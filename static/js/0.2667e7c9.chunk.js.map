{"version":3,"sources":["../node_modules/classnames/index.js","../node_modules/libphonenumber-js/metadata.min.json.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","../node_modules/libphonenumber-js/es6/helpers/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/helpers/RFC3966.js","../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","../node_modules/libphonenumber-js/es6/helpers/getNumberType.js","../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","../node_modules/libphonenumber-js/es6/getCountries.js","../node_modules/react-phone-number-input/locale/en.json.js","../node_modules/react-phone-number-input/modules/PropTypes.js","../node_modules/input-format/modules/helpers.js","../node_modules/input-format/modules/templateFormatter.js","../node_modules/input-format/modules/closeBraces.js","../node_modules/input-format/modules/dom.js","../node_modules/input-format/modules/inputControl.js","../node_modules/input-format/modules/parse.js","../node_modules/input-format/modules/edit.js","../node_modules/input-format/modules/format.js","../node_modules/input-format/modules/react/Input.js","../node_modules/libphonenumber-js/es6/AsYouTypeState.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternParser.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternMatcher.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js","../node_modules/libphonenumber-js/es6/AsYouTypeParser.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/react-phone-number-input/modules/helpers/inputValuePrefix.js","../node_modules/react-phone-number-input/modules/InputSmart.js","../node_modules/react-phone-number-input/modules/InputBasic.js","../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","../node_modules/country-flag-icons/modules/unicode.js","../node_modules/react-phone-number-input/modules/CountrySelect.js","../node_modules/react-phone-number-input/modules/Flag.js","../node_modules/react-phone-number-input/modules/InternationalIcon.js","../node_modules/react-phone-number-input/modules/helpers/countries.js","../node_modules/react-phone-number-input/modules/CountryIcon.js","../node_modules/react-phone-number-input/modules/helpers/getInternationalPhoneNumberPrefix.js","../node_modules/react-phone-number-input/modules/helpers/phoneInputHelpers.js","../node_modules/react-phone-number-input/modules/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js","../node_modules/react-phone-number-input/modules/PhoneInputWithCountry.js","../node_modules/react-phone-number-input/modules/PhoneInputWithCountryDefault.js","../node_modules/react-phone-number-input/min/index.js"],"names":["__WEBPACK_AMD_DEFINE_RESULT__","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","undefined","metadata_min_json","version","country_calling_codes","1","7","20","27","30","31","32","33","34","36","39","40","41","43","44","45","46","47","48","49","51","52","53","54","55","56","57","58","60","61","62","63","64","65","66","81","82","84","86","90","91","92","93","94","95","98","211","212","213","216","218","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","260","261","262","263","264","265","266","267","268","269","290","291","297","298","299","350","351","352","353","354","355","356","357","358","359","370","371","372","373","374","375","376","377","378","380","381","382","383","385","386","387","389","420","421","423","500","501","502","503","504","505","506","507","508","509","590","591","592","593","594","595","596","597","598","599","670","672","673","674","675","676","677","678","679","680","681","682","683","685","686","687","688","689","690","691","692","850","852","853","855","856","880","886","960","961","962","963","964","965","966","967","968","970","971","972","973","974","975","976","977","992","993","994","995","996","998","countries","AC","AD","AE","AF","AG","AI","AL","AM","AO","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GT","GU","GW","GY","HK","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW","nonGeographic","800","808","870","878","881","882","883","888","979","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_PUNCTUATION","concat","_typeof","obj","Symbol","iterator","constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","self","TypeError","_assertThisInitialized","_possibleConstructorReturn","ReferenceError","_wrapNativeSuper","Class","_cache","Map","fn","Function","indexOf","has","get","set","Wrapper","_construct","create","value","_setPrototypeOf","Parent","args","a","instance","bind","sham","Proxy","Boolean","valueOf","e","o","p","setPrototypeOf","__proto__","getPrototypeOf","ParseError","_Error","subClass","superClass","_inherits","Error","Constructor","protoProps","staticProps","_super","code","_this","_classCallCheck","name","semver_compare","b","split","pa","pb","na","Number","nb","isNaN","metadata_typeof","metadata_classCallCheck","metadata_defineProperties","metadata_createClass","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","metadata","is_object","keys","type_of","validateMetadata","setVersion","filter","_","countryCode","v1","v2","v3","nonGeographical","country","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","test","hasCountry","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","type","ext","country_phone_code_to_countries","globalMetadataObject","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type2","metadata_getType","Type","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","getCountryCallingCode","countryCallingCode","isSupportedCountry","v4","RFC3966_EXTN_PREFIX","createExtensionPattern_getExtensionDigitsPattern","maxLength","createExtensionPattern","purpose","possibleSeparatorsBetweenNumberAndExtLabel","possibleSeparatorsNumberExtLabelNoComma","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","RegExp","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","EXTN_PATTERN","_createForOfIteratorHelperLoose","allowArrayLike","it","next","minLen","_arrayLikeToArray","n","slice","from","_unsupportedIterableToArray","done","arr","len","arr2","DIGITS","0","2","3","4","5","6","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseDigit","character","parseDigits","string","_step","_iterator","digit","parseIncompletePhoneNumber_createForOfIteratorHelperLoose","parseIncompletePhoneNumber_arrayLikeToArray","parseIncompletePhoneNumber_unsupportedIterableToArray","parseIncompletePhoneNumber","parsePhoneNumberCharacter","prevParsedCharacters","mergeArrays_createForOfIteratorHelperLoose","mergeArrays_arrayLikeToArray","mergeArrays_unsupportedIterableToArray","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","element","sort","mergeArrays","actual_length","minimum_length","isPossibleNumber","_slicedToArray","_arrayWithHoles","_i","_s","_e","_arr","_n","_d","err","_iterableToArrayLimit","RFC3966_unsupportedIterableToArray","_nonIterableRest","RFC3966_arrayLikeToArray","parseRFC3966","text","RFC3966_createForOfIteratorHelperLoose","replace","_part$split2","matchesEntirely","regular_expression","getNumberType_createForOfIteratorHelperLoose","getNumberType_arrayLikeToArray","getNumberType_unsupportedIterableToArray","NON_FIXED_LINE_PHONE_TYPES","getNumberType","input","options","phone","isNumberTypeEqualTo","pattern","applyInternationalSeparatorStyle","formattedNumber","trim","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","_ref","useInternationalFormat","withNationalPrefix","carrierCode","internationalFormat","SINGLE_IDD_PREFIX_REG_EXP","format_createForOfIteratorHelperLoose","format_arrayLikeToArray","format_unsupportedIterableToArray","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","_objectSpread","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","DEFAULT_OPTIONS","formatExtension","extension","formatNumber","addExtension","formatNationalNumber","formatRFC3966","fromCountry","iddPrefix","countryMetadata","getIddPrefix","formatIDD","formatAs","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","search","chooseFormatForNumber","PhoneNumber_ownKeys","PhoneNumber_objectSpread","PhoneNumber_defineProperty","PhoneNumber_defineProperties","USE_NON_GEOGRAPHIC_COUNTRY_CODE","PhoneNumber_PhoneNumber","PhoneNumber","PhoneNumber_classCallCheck","_metadata","isCountryCode","isNonGeographicCallingCode","isPossiblePhoneNumber","phoneNumber","CAPTURING_DIGIT_PATTERN","stripIddPrefix","IDDPrefixPattern","matchedGroups","match","extractNationalNumberFromPossiblyIncompleteNumber","prefixPattern","prefixMatch","exec","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","extractNationalNumber","_extractNationalNumbe","nationalNumberBefore","nationalNumberAfter","shouldHaveExtractedNationalPrefix","isPossibleIncompleteNationalNumber","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","possibleShorterNumber","possibleShorterNationalNumber","extractCountryCallingCode_extractCountryCallingCode","numberWithoutIDD","_extractCountryCallin","shorterNumber","_countryCallingCode","getCountryByCallingCode_createForOfIteratorHelperLoose","getCountryByCallingCode_arrayLikeToArray","getCountryByCallingCode_unsupportedIterableToArray","getCountryByCallingCode_USE_NON_GEOGRAPHIC_COUNTRY_CODE","getCountryByCallingCode","nationalPhoneNumber","possibleCountries","selectCountryFromList","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parse_USE_NON_GEOGRAPHIC_COUNTRY_CODE","parse_parse","defaultCountry","_parseInput","extract","throwOnError","startsAt","extractFormattedPhoneNumber","isViablePhoneNumberStart","error","withExtensionStripped","start","numberWithoutExtension","matches","extractExtension","parseInput","formattedPhoneNumber","_parsePhoneNumber","defaultCallingCode","exactCountry","parsePhoneNumber","hasSelectedNumberingPlan","valid","extended","possible","parse_result","parsePhoneNumber_ownKeys","parsePhoneNumber_objectSpread","parsePhoneNumber_defineProperty","parsePhoneNumber_parsePhoneNumber","parsePhoneNumber_typeof","es6_parsePhoneNumber_ownKeys","es6_parsePhoneNumber_defineProperty","parsePhoneNumber_slicedToArray","parsePhoneNumber_arrayWithHoles","parsePhoneNumber_iterableToArrayLimit","parsePhoneNumber_arrayLikeToArray","parsePhoneNumber_unsupportedIterableToArray","parsePhoneNumber_nonIterableRest","normalizeArguments","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","es6_parsePhoneNumber_objectSpread","parsePhoneNumberFromString_ownKeys","parsePhoneNumberFromString_objectSpread","parsePhoneNumberFromString_defineProperty","parsePhoneNumberFromString","parsePhoneNumberFromString_parsePhoneNumberFromString","_normalizeArguments","getCountries","en_json","AB","AQ","BV","GS","HM","OS","PN","TF","UM","ZZ","PropTypes_metadata","prop_types_default","shape","isRequired","PropTypes_labels","objectOf","helpers_createForOfIteratorHelperLoose","helpers_arrayLikeToArray","helpers_unsupportedIterableToArray","count_occurences","symbol","count","templateFormatter_createForOfIteratorHelperLoose","templateFormatter_arrayLikeToArray","templateFormatter_unsupportedIterableToArray","templateFormatter","template","placeholder","should_close_braces","characters_in_template","value_character_index","filled_in_template","retained_template","empty_placeholder","cut_before","dangling_braces","closeBraces","isReadOnly","hasAttribute","getSelection","selectionStart","selectionEnd","end","Keys","Backspace","Delete","setCaretPosition","caret_position","navigator","ANDROID_USER_AGENT_REG_EXP","userAgent","isAndroid","setSelectionRange","setTimeout","inputControl_onKeyDown","event","_parse","on_change","operation","keyCode","getOperation","preventDefault","selection","eraseSelection","formatInputText","_parse2","parse_character","focused_input_character_index","index","caret","modules_parse_parse","newValueAndCaret","edit","formatted","formatter","found","possibly_last_input_character_index","format_format","_excluded","_extends","assign","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","Input_Input","ref","parse","InputComponent","inputComponent","onChange","onKeyDown","rest","internalRef","react","setRef","current","_onChange","_onKeyDown","react_default","createElement","isEmptyValue","forwardRef","propTypes","func","elementType","onCut","onPaste","defaultProps","react_Input","AsYouTypeState_defineProperties","AsYouTypeState","onCountryChange","onCallingCodeChange","AsYouTypeState_classCallCheck","international","missingPlus","digits","resetNationalSignificantNumber","initCountryAndCallingCode","nationalSignificantNumber","getNationalDigits","nationalSignificantNumberMatchesInput","complexPrefixBeforeNationalSignificantNumber","properties","_Object$keys","setCountry","setCallingCode","nextDigits","AsYouTypeFormatter_util_createForOfIteratorHelperLoose","AsYouTypeFormatter_util_arrayLikeToArray","AsYouTypeFormatter_util_unsupportedIterableToArray","DIGIT_PLACEHOLDER_MATCHER","repeat","times","cutAndStripNonPairedParens","cutBeforeIndex","pop","cleared_string","_dangling_braces","stripNonPairedParens","formatCompleteNumber","state","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","_ref2","AsYouTypeFormatter_complete_formatNationalNumber","useNationalPrefixFormattingRule","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","_ref3","formattedNationalNumber","isValidFormattedNationalNumber","AsYouTypeFormatter_PatternParser_defineProperties","PatternParser","AsYouTypeFormatter_PatternParser_classCallCheck","context","or","instructions","parsePattern","_this$context$","branches","op","expandSingleElementArray","OPERATOR","operator","before","rightPart","startContext","getContext","endContext","oneOfSet","parseOneOfSet","ILLEGAL_CHARACTER_REGEXP","values","prevValue","charCodeAt","nextValue","String","fromCharCode","array","AsYouTypeFormatter_PatternMatcher_createForOfIteratorHelperLoose","AsYouTypeFormatter_PatternMatcher_arrayLikeToArray","AsYouTypeFormatter_PatternMatcher_unsupportedIterableToArray","AsYouTypeFormatter_PatternMatcher_defineProperties","AsYouTypeFormatter_PatternMatcher_PatternMatcher","PatternMatcher","AsYouTypeFormatter_PatternMatcher_classCallCheck","matchTree","allowOverflow","_match","characters","tree","last","characterString","matchedChars","partialMatch","overflow","restCharacters","subtree","JSON","stringify","branch","_result","_step2","_iterator2","_char","AsYouTypeFormatter_createForOfIteratorHelperLoose","AsYouTypeFormatter_arrayLikeToArray","AsYouTypeFormatter_unsupportedIterableToArray","AsYouTypeFormatter_defineProperties","LONGEST_DUMMY_PHONE_NUMBER","NATIONAL_PREFIX_SEPARATORS_PATTERN","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","NON_ALTERING_FORMAT_REG_EXP","AsYouTypeFormatter_AsYouTypeFormatter","AsYouTypeFormatter","AsYouTypeFormatter_classCallCheck","resetFormat","chosenFormat","nationalNumberTemplate","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","isNANP","matchingFormats","narrowDownMatchingFormats","formattedCompleteNumber","setNationalNumberTemplate","lastIndexOf","formatNationalNumberWithNextDigits","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","_this2","leadingDigitsPatternIndex","formatSuits","formatMatches","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","Math","min","leadingDigitsPattern","console","_this3","_loop","getFormatFormat","createTemplateForFormat","_ret","getTemplateForFormat","spacing","internationalPrefix","getInternationalPrefixBeforeCountryCallingCode","getDigitsWithoutInternationalPrefix","_ref4","strictPattern","nationalNumberDummyDigits","nationalPrefixIncludedInTemplate","numberFormat","numberFormatWithNationalPrefix","position","populateTemplateWithDigits","_ref5","AsYouTypeParser_slicedToArray","AsYouTypeParser_arrayWithHoles","AsYouTypeParser_iterableToArrayLimit","AsYouTypeParser_arrayLikeToArray","AsYouTypeParser_unsupportedIterableToArray","AsYouTypeParser_nonIterableRest","AsYouTypeParser_defineProperties","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser_AsYouTypeParser","AsYouTypeParser","onNationalSignificantNumberChange","AsYouTypeParser_classCallCheck","justLeadingPlus","_extractFormattedDigi","_extractFormattedDigi4","extractedNumber","hasPlus","AsYouTypeParser_extractFormattedPhoneNumber","_extractFormattedDigitsAndPlus","formattedDigits","extractFormattedDigitsAndPlus","_extractFormattedDigi2","startInternationalNumber","inputDigits","hasReceivedThreeLeadingDigits","appendDigits","extractIddPrefix","isWaitingForCountryCallingCode","extractCountryCallingCode","appendNationalSignificantNumberDigits","hasExtractedNationalSignificantNumber","extractNationalSignificantNumber","stateUpdate","update","couldPossiblyExtractAnotherNationalSignificantNumber","nationalDigits","setState","onExtractedNationalNumber","prevNationalSignificantNumber","_extractNationalNumbe2","nationalSignificantNumberIndex","extractAnotherNationalSignificantNumber","extractCallingCodeAndNationalSignificantNumber","fixMissingPlus","_extractCountryCallin2","newCallingCode","AsYouType_typeof","AsYouType_slicedToArray","AsYouType_arrayWithHoles","AsYouType_iterableToArrayLimit","AsYouType_arrayLikeToArray","AsYouType_unsupportedIterableToArray","AsYouType_nonIterableRest","AsYouType_defineProperties","AsYouType_AsYouType","AsYouType","optionsOrDefaultCountry","AsYouType_classCallCheck","_this$getCountryAndCa2","getCountryAndCallingCode","reset","_this$parser$input","parser","formattedOutput","determineTheCountryIfNeeded","reExtractNationalSignificantNumber","getFullNumber","getNonFormattedNumber","isInternational","getCallingCode","_getCountry","isCountryCallingCodeAmbiguous","determineTheCountry","prefix","_this$state","getNonFormattedNationalNumberWithPrefix","_this$state2","_this$state3","getNumber","isPossible","isValid","getTemplate","getNonFormattedTemplate","getInputValuePrefix","withCountryCallingCode","removeInputValuePrefix","InputSmart_excluded","InputSmart_extends","InputSmart_objectWithoutProperties","InputSmart_objectWithoutPropertiesLoose","modules_InputSmart","defaultMetadata","InputSmart","bool","InputBasic_excluded","InputBasic_extends","InputBasic_objectWithoutProperties","InputBasic_objectWithoutPropertiesLoose","modules_InputBasic","InputBasic","Input","newValue","InputBasic_format","formatIncompletePhoneNumber","getRegionalIndicatorSymbol","letter","fromCodePoint","toUpperCase","CountrySelect_excluded","_excluded2","CountrySelect_createForOfIteratorHelperLoose","CountrySelect_arrayLikeToArray","CountrySelect_unsupportedIterableToArray","CountrySelect_extends","CountrySelect_objectWithoutProperties","CountrySelect_objectWithoutPropertiesLoose","CountrySelect","onChange_","getSelectedOption","label","divider","disabled","style","DIVIDER_STYLE","arrayOf","fontSize","backgroundColor","color","CountrySelectWithIcon","className","Icon","iconComponent","Arrow","getIconAspectRatio","arrowComponent","unicodeFlags","selectedOption","classnames_default","aria-hidden","aspectRatio","option","Flag_excluded","Flag_extends","Flag_objectWithoutProperties","Flag_objectWithoutPropertiesLoose","Flag_FlagComponent","countryName","flags","flagUrl","title","alt","role","src","toLowerCase","InternationalIcon_excluded","InternationalIcon_excluded2","_excluded3","InternationalIcon_extends","InternationalIcon_objectWithoutProperties","InternationalIcon_objectWithoutPropertiesLoose","InternationalIcon_InternationalIcon","InternationalIcon1x1","InternationalIcon3x2","xmlns","viewBox","stroke","fill","strokeWidth","strokeMiterlimit","strokeLinecap","d","x1","y1","x2","y2","countries_createForOfIteratorHelperLoose","countries_arrayLikeToArray","countries_unsupportedIterableToArray","isCountrySupportedWithError","getSupportedCountries","CountryIcon_excluded","CountryIcon_extends","CountryIcon_objectWithoutProperties","CountryIcon_objectWithoutPropertiesLoose","createCountryIconComponent","FlagComponent","flagComponent","InternationalIcon","internationalIcon","CountryIcon","_aspectRatio","PhoneInputCountryIcon--square","PhoneInputCountryIcon--border","ONLY_DIGITS_REGEXP","getInternationalPhoneNumberPrefix","phoneInputHelpers_parsePhoneNumber","getPhoneDigitsForNewCountry","phoneDigits","prevCountry","newCountry","useNationalFormat","countryCallingCodePrefix","country_calling_code","stripCountryCallingCode","newCountryPrefix","defaultValue","e164","asYouType","getNumberValue","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","getCountryForPartialE164Number","partialE164Number","required","derived_country","getCountry","getCountryFromPossiblyIncompleteInternationalPhoneNumber","couldNumberBelongToCountry","convertInternationalPhoneDigitsToNational","formatNational","compareStrings","locales","localeCompare","intlPhoneNumberPrefix","getInitialPhoneDigits","_ref6","generateNationalNumberDigits","getPhoneInputWithCountryStateUpdateFromNewProps_ownKeys","getPhoneInputWithCountryStateUpdateFromNewProps_objectSpread","getPhoneInputWithCountryStateUpdateFromNewProps_defineProperty","PhoneInputWithCountry_typeof","PhoneInputWithCountry_excluded","PhoneInputWithCountry_ownKeys","PhoneInputWithCountry_extends","PhoneInputWithCountry_objectWithoutProperties","PhoneInputWithCountry_objectWithoutPropertiesLoose","PhoneInputWithCountry_defineProperties","PhoneInputWithCountry_setPrototypeOf","PhoneInputWithCountry_createSuper","PhoneInputWithCountry_isNativeReflectConstruct","PhoneInputWithCountry_getPrototypeOf","PhoneInputWithCountry_assertThisInitialized","PhoneInputWithCountry_possibleConstructorReturn","PhoneInputWithCountry_defineProperty","PhoneInputWithCountry_PhoneNumberInput_","_React$PureComponent","PhoneInputWithCountry_inherits","PhoneNumberInput_","PureComponent","PhoneInputWithCountry_classCallCheck","inputRef","_this$props","focusInputOnCountrySelection","newPhoneDigits","focus","hasUserSelectedACountry","_phoneDigits","_this$props2","addInternationalOption","limitMaxLength","countryCallingCodeEditable","_onPhoneDigitsChange","prevPhoneDigits","countryRequired","getAnyCountry","_value","onPhoneDigitsChange","getFirstSupportedCountry","forceRerender","isFocused","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","createRef","_this$props3","_international","labels","_addInternationalOption","displayInitialValueAsLocalNumber","initialValueFormat","_this$props4","_defaultCountry","_countries","preSelectedCountry","getPreSelectedCountry","PhoneInputWithCountry_objectSpread","prevProps","newDefaultCountry","newReset","prevDefaultCountry","prevReset","_getInitialPhoneDigits","parameters","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","parsedCountry","hasUserSelectedACountryUpdate","supportedCountries","getPhoneInputWithCountryStateUpdateFromNewProps","selectedCountry","prevState","_this$props5","countryOptionsOrder","useMemoCountrySelectOptions","order","optionsOnTop","optionsOnBottom","appendTo","splice","sortCountryOptions","countryNames","compareStringsLocales","_compareStrings","countrySelectOptions","unshift","phoneInputHelpers_getCountrySelectOptions","countryOptions","getSupportedCountryOptions","generator","dependencies","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","getCountrySelectOptions","_this$props6","readOnly","autoComplete","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","PhoneInput--focus","PhoneInput--disabled","PhoneInput--readOnly","aria-label","onCountryFocus","onCountryBlur","setInputRef","PhoneNumberInput","oneOf","oneOfType","any","PhoneInputWithCountry","PhoneInputWithCountryDefault_extends","createPhoneInput","PhoneInputDefault","__webpack_exports__"],"mappings":"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","file":"static/js/0.2667e7c9.chunk.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString === Object.prototype.toString) {\n          for (var key in arg) {\n            if (hasOwn.call(arg, key) && arg[key]) {\n              classes.push(key);\n            }\n          }\n        } else {\n          classes.push(arg.toString());\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\n  \"version\": 4,\n  \"country_calling_codes\": {\n    \"1\": [\"US\", \"AG\", \"AI\", \"AS\", \"BB\", \"BM\", \"BS\", \"CA\", \"DM\", \"DO\", \"GD\", \"GU\", \"JM\", \"KN\", \"KY\", \"LC\", \"MP\", \"MS\", \"PR\", \"SX\", \"TC\", \"TT\", \"VC\", \"VG\", \"VI\"],\n    \"7\": [\"RU\", \"KZ\"],\n    \"20\": [\"EG\"],\n    \"27\": [\"ZA\"],\n    \"30\": [\"GR\"],\n    \"31\": [\"NL\"],\n    \"32\": [\"BE\"],\n    \"33\": [\"FR\"],\n    \"34\": [\"ES\"],\n    \"36\": [\"HU\"],\n    \"39\": [\"IT\", \"VA\"],\n    \"40\": [\"RO\"],\n    \"41\": [\"CH\"],\n    \"43\": [\"AT\"],\n    \"44\": [\"GB\", \"GG\", \"IM\", \"JE\"],\n    \"45\": [\"DK\"],\n    \"46\": [\"SE\"],\n    \"47\": [\"NO\", \"SJ\"],\n    \"48\": [\"PL\"],\n    \"49\": [\"DE\"],\n    \"51\": [\"PE\"],\n    \"52\": [\"MX\"],\n    \"53\": [\"CU\"],\n    \"54\": [\"AR\"],\n    \"55\": [\"BR\"],\n    \"56\": [\"CL\"],\n    \"57\": [\"CO\"],\n    \"58\": [\"VE\"],\n    \"60\": [\"MY\"],\n    \"61\": [\"AU\", \"CC\", \"CX\"],\n    \"62\": [\"ID\"],\n    \"63\": [\"PH\"],\n    \"64\": [\"NZ\"],\n    \"65\": [\"SG\"],\n    \"66\": [\"TH\"],\n    \"81\": [\"JP\"],\n    \"82\": [\"KR\"],\n    \"84\": [\"VN\"],\n    \"86\": [\"CN\"],\n    \"90\": [\"TR\"],\n    \"91\": [\"IN\"],\n    \"92\": [\"PK\"],\n    \"93\": [\"AF\"],\n    \"94\": [\"LK\"],\n    \"95\": [\"MM\"],\n    \"98\": [\"IR\"],\n    \"211\": [\"SS\"],\n    \"212\": [\"MA\", \"EH\"],\n    \"213\": [\"DZ\"],\n    \"216\": [\"TN\"],\n    \"218\": [\"LY\"],\n    \"220\": [\"GM\"],\n    \"221\": [\"SN\"],\n    \"222\": [\"MR\"],\n    \"223\": [\"ML\"],\n    \"224\": [\"GN\"],\n    \"225\": [\"CI\"],\n    \"226\": [\"BF\"],\n    \"227\": [\"NE\"],\n    \"228\": [\"TG\"],\n    \"229\": [\"BJ\"],\n    \"230\": [\"MU\"],\n    \"231\": [\"LR\"],\n    \"232\": [\"SL\"],\n    \"233\": [\"GH\"],\n    \"234\": [\"NG\"],\n    \"235\": [\"TD\"],\n    \"236\": [\"CF\"],\n    \"237\": [\"CM\"],\n    \"238\": [\"CV\"],\n    \"239\": [\"ST\"],\n    \"240\": [\"GQ\"],\n    \"241\": [\"GA\"],\n    \"242\": [\"CG\"],\n    \"243\": [\"CD\"],\n    \"244\": [\"AO\"],\n    \"245\": [\"GW\"],\n    \"246\": [\"IO\"],\n    \"247\": [\"AC\"],\n    \"248\": [\"SC\"],\n    \"249\": [\"SD\"],\n    \"250\": [\"RW\"],\n    \"251\": [\"ET\"],\n    \"252\": [\"SO\"],\n    \"253\": [\"DJ\"],\n    \"254\": [\"KE\"],\n    \"255\": [\"TZ\"],\n    \"256\": [\"UG\"],\n    \"257\": [\"BI\"],\n    \"258\": [\"MZ\"],\n    \"260\": [\"ZM\"],\n    \"261\": [\"MG\"],\n    \"262\": [\"RE\", \"YT\"],\n    \"263\": [\"ZW\"],\n    \"264\": [\"NA\"],\n    \"265\": [\"MW\"],\n    \"266\": [\"LS\"],\n    \"267\": [\"BW\"],\n    \"268\": [\"SZ\"],\n    \"269\": [\"KM\"],\n    \"290\": [\"SH\", \"TA\"],\n    \"291\": [\"ER\"],\n    \"297\": [\"AW\"],\n    \"298\": [\"FO\"],\n    \"299\": [\"GL\"],\n    \"350\": [\"GI\"],\n    \"351\": [\"PT\"],\n    \"352\": [\"LU\"],\n    \"353\": [\"IE\"],\n    \"354\": [\"IS\"],\n    \"355\": [\"AL\"],\n    \"356\": [\"MT\"],\n    \"357\": [\"CY\"],\n    \"358\": [\"FI\", \"AX\"],\n    \"359\": [\"BG\"],\n    \"370\": [\"LT\"],\n    \"371\": [\"LV\"],\n    \"372\": [\"EE\"],\n    \"373\": [\"MD\"],\n    \"374\": [\"AM\"],\n    \"375\": [\"BY\"],\n    \"376\": [\"AD\"],\n    \"377\": [\"MC\"],\n    \"378\": [\"SM\"],\n    \"380\": [\"UA\"],\n    \"381\": [\"RS\"],\n    \"382\": [\"ME\"],\n    \"383\": [\"XK\"],\n    \"385\": [\"HR\"],\n    \"386\": [\"SI\"],\n    \"387\": [\"BA\"],\n    \"389\": [\"MK\"],\n    \"420\": [\"CZ\"],\n    \"421\": [\"SK\"],\n    \"423\": [\"LI\"],\n    \"500\": [\"FK\"],\n    \"501\": [\"BZ\"],\n    \"502\": [\"GT\"],\n    \"503\": [\"SV\"],\n    \"504\": [\"HN\"],\n    \"505\": [\"NI\"],\n    \"506\": [\"CR\"],\n    \"507\": [\"PA\"],\n    \"508\": [\"PM\"],\n    \"509\": [\"HT\"],\n    \"590\": [\"GP\", \"BL\", \"MF\"],\n    \"591\": [\"BO\"],\n    \"592\": [\"GY\"],\n    \"593\": [\"EC\"],\n    \"594\": [\"GF\"],\n    \"595\": [\"PY\"],\n    \"596\": [\"MQ\"],\n    \"597\": [\"SR\"],\n    \"598\": [\"UY\"],\n    \"599\": [\"CW\", \"BQ\"],\n    \"670\": [\"TL\"],\n    \"672\": [\"NF\"],\n    \"673\": [\"BN\"],\n    \"674\": [\"NR\"],\n    \"675\": [\"PG\"],\n    \"676\": [\"TO\"],\n    \"677\": [\"SB\"],\n    \"678\": [\"VU\"],\n    \"679\": [\"FJ\"],\n    \"680\": [\"PW\"],\n    \"681\": [\"WF\"],\n    \"682\": [\"CK\"],\n    \"683\": [\"NU\"],\n    \"685\": [\"WS\"],\n    \"686\": [\"KI\"],\n    \"687\": [\"NC\"],\n    \"688\": [\"TV\"],\n    \"689\": [\"PF\"],\n    \"690\": [\"TK\"],\n    \"691\": [\"FM\"],\n    \"692\": [\"MH\"],\n    \"850\": [\"KP\"],\n    \"852\": [\"HK\"],\n    \"853\": [\"MO\"],\n    \"855\": [\"KH\"],\n    \"856\": [\"LA\"],\n    \"880\": [\"BD\"],\n    \"886\": [\"TW\"],\n    \"960\": [\"MV\"],\n    \"961\": [\"LB\"],\n    \"962\": [\"JO\"],\n    \"963\": [\"SY\"],\n    \"964\": [\"IQ\"],\n    \"965\": [\"KW\"],\n    \"966\": [\"SA\"],\n    \"967\": [\"YE\"],\n    \"968\": [\"OM\"],\n    \"970\": [\"PS\"],\n    \"971\": [\"AE\"],\n    \"972\": [\"IL\"],\n    \"973\": [\"BH\"],\n    \"974\": [\"QA\"],\n    \"975\": [\"BT\"],\n    \"976\": [\"MN\"],\n    \"977\": [\"NP\"],\n    \"992\": [\"TJ\"],\n    \"993\": [\"TM\"],\n    \"994\": [\"AZ\"],\n    \"995\": [\"GE\"],\n    \"996\": [\"KG\"],\n    \"998\": [\"UZ\"]\n  },\n  \"countries\": {\n    \"AC\": [\"247\", \"00\", \"(?:[01589]\\\\d|[46])\\\\d{4}\", [5, 6]],\n    \"AD\": [\"376\", \"00\", \"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\", [6, 8, 9], [[\"(\\\\d{3})(\\\\d{3})\", \"$1 $2\", [\"[135-9]\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"1\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"6\"]]]],\n    \"AE\": [\"971\", \"00\", \"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\", [5, 6, 7, 8, 9, 10, 11, 12], [[\"(\\\\d{3})(\\\\d{2,9})\", \"$1 $2\", [\"60|8\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[236]|[479][2-8]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d)(\\\\d{5})\", \"$1 $2 $3\", [\"[479]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"5\"], \"0$1\"]], \"0\"],\n    \"AF\": [\"93\", \"00\", \"[2-7]\\\\d{8}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2-7]\"], \"0$1\"]], \"0\"],\n    \"AG\": [\"1\", \"011\", \"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([457]\\\\d{6})$\", \"268$1\", 0, \"268\"],\n    \"AI\": [\"1\", \"011\", \"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2457]\\\\d{6})$\", \"264$1\", 0, \"264\"],\n    \"AL\": [\"355\", \"00\", \"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\", [6, 7, 8, 9], [[\"(\\\\d{3})(\\\\d{3,4})\", \"$1 $2\", [\"80|9\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"4[2-6]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2358][2-5]|4\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[23578]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"6\"], \"0$1\"]], \"0\"],\n    \"AM\": [\"374\", \"00\", \"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\", [8], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"[89]0\"], \"0 $1\"], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"2|3[12]\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"1|47\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"[3-9]\"], \"0$1\"]], \"0\"],\n    \"AO\": [\"244\", \"00\", \"[29]\\\\d{8}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[29]\"]]]],\n    \"AR\": [\"54\", \"00\", \"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\", [10, 11], [[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\", \"$1 $2-$3\", [\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\", \"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\", \"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\", \"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"], \"0$1\", 1], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2-$3\", [\"1\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"[68]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2-$3\", [\"[23]\"], \"0$1\", 1], [\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\", \"$2 15-$3-$4\", [\"9(?:2[2-469]|3[3-578])\", \"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\", \"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\", \"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\", \"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"], \"0$1\", 0, \"$1 $2 $3-$4\"], [\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$2 15-$3-$4\", [\"91\"], \"0$1\", 0, \"$1 $2 $3-$4\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\", \"$1-$2-$3\", [\"8\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$2 15-$3-$4\", [\"9\"], \"0$1\", 0, \"$1 $2 $3-$4\"]], \"0\", 0, \"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\", \"9$1\"],\n    \"AS\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([267]\\\\d{6})$\", \"684$1\", 0, \"684\"],\n    \"AT\": [\"43\", \"00\", \"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\", [4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [[\"(\\\\d)(\\\\d{3,12})\", \"$1 $2\", [\"1(?:11|[2-9])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})\", \"$1 $2\", [\"517\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3,5})\", \"$1 $2\", [\"5[079]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3,10})\", \"$1 $2\", [\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3,9})\", \"$1 $2\", [\"[2-467]|5[2-6]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"5\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\", \"$1 $2 $3\", [\"5\"], \"0$1\"]], \"0\"],\n    \"AU\": [\"61\", \"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\", \"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\", [5, 6, 7, 8, 9, 10, 12], [[\"(\\\\d{2})(\\\\d{3,4})\", \"$1 $2\", [\"16\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\", \"$1 $2 $3\", [\"16\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"14|4\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[2378]\"], \"(0$1)\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1(?:30|[89])\"]]], \"0\", 0, \"0|(183[12])\", 0, 0, 0, [[\"(?:(?:2(?:[0-26-9]\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\d|2[0-8]))\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\", [9]], [\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\", [9]], [\"180(?:0\\\\d{3}|2)\\\\d{3}\", [7, 10]], [\"190[0-26]\\\\d{6}\", [10]], 0, 0, 0, [\"163\\\\d{2,6}\", [5, 6, 7, 8, 9]], [\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\", [9]], [\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\", [6, 8, 10, 12]]], \"0011\"],\n    \"AW\": [\"297\", \"00\", \"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[25-9]\"]]]],\n    \"AX\": [\"358\", \"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\", \"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\", [5, 6, 7, 8, 9, 10, 11, 12], 0, \"0\", 0, 0, 0, 0, \"18\", 0, \"00\"],\n    \"AZ\": [\"994\", \"00\", \"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"90\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"1[28]|2|365|46\", \"1[28]|2|365[45]|46\", \"1[28]|2|365(?:4|5[02])|46\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[13-9]\"], \"0$1\"]], \"0\"],\n    \"BA\": [\"387\", \"00\", \"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"6[1-3]|[7-9]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2-$3\", [\"[3-5]|6[56]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"6\"], \"0$1\"]], \"0\"],\n    \"BB\": [\"1\", \"011\", \"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-9]\\\\d{6})$\", \"246$1\", 0, \"246\"],\n    \"BD\": [\"880\", \"00\", \"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\", [6, 7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{4,6})\", \"$1-$2\", [\"31[5-8]|[459]1\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3,7})\", \"$1-$2\", [\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3,6})\", \"$1-$2\", [\"[13-9]|22\"], \"0$1\"], [\"(\\\\d)(\\\\d{7,8})\", \"$1-$2\", [\"2\"], \"0$1\"]], \"0\"],\n    \"BE\": [\"32\", \"00\", \"4\\\\d{8}|[1-9]\\\\d{7}\", [8, 9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"(?:80|9)0\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[239]|4[23]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[15-8]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"4\"], \"0$1\"]], \"0\"],\n    \"BF\": [\"226\", \"00\", \"[025-7]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[025-7]\"]]]],\n    \"BG\": [\"359\", \"00\", \"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\", [6, 7, 8, 9], [[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"2\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"43[1-6]|70[1-9]\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"2\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\", \"$1 $2 $3\", [\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"(?:70|8)0\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\", \"$1 $2 $3\", [\"43[1-7]|7\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[48]|9[08]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"9\"], \"0$1\"]], \"0\"],\n    \"BH\": [\"973\", \"00\", \"[136-9]\\\\d{7}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[13679]|8[047]\"]]]],\n    \"BI\": [\"257\", \"00\", \"(?:[267]\\\\d|31)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2367]\"]]]],\n    \"BJ\": [\"229\", \"00\", \"(?:[25689]\\\\d|40)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[24-689]\"]]]],\n    \"BL\": [\"590\", \"00\", \"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\", [9], 0, \"0\", 0, 0, 0, 0, 0, [[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"], [\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"], [\"80[0-5]\\\\d{6}\"], 0, 0, 0, 0, 0, [\"976[01]\\\\d{5}\"]]],\n    \"BM\": [\"1\", \"011\", \"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-8]\\\\d{6})$\", \"441$1\", 0, \"441\"],\n    \"BN\": [\"673\", \"00\", \"[2-578]\\\\d{6}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-578]\"]]]],\n    \"BO\": [\"591\", \"00(?:1\\\\d)?\", \"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\", [8, 9], [[\"(\\\\d)(\\\\d{7})\", \"$1 $2\", [\"[23]|4[46]\"]], [\"(\\\\d{8})\", \"$1\", [\"[67]\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"]]], \"0\", 0, \"0(1\\\\d)?\"],\n    \"BQ\": [\"599\", \"00\", \"(?:[34]1|7\\\\d)\\\\d{5}\", [7], 0, 0, 0, 0, 0, 0, \"[347]\"],\n    \"BR\": [\"55\", \"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\", \"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-46-9]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\", [8, 9, 10, 11], [[\"(\\\\d{4})(\\\\d{4})\", \"$1-$2\", [\"300|4(?:0[02]|37)\", \"4(?:02|37)0|[34]00\"]], [\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\", \"$1 $2 $3\", [\"(?:[358]|90)0\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2-$3\", [\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"], \"($1)\"], [\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\", \"$1 $2-$3\", [\"[16][1-9]|[2-57-9]\"], \"($1)\"]], \"0\", 0, \"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\", \"$2\"],\n    \"BS\": [\"1\", \"011\", \"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([3-8]\\\\d{6})$\", \"242$1\", 0, \"242\"],\n    \"BT\": [\"975\", \"00\", \"[17]\\\\d{7}|[2-8]\\\\d{6}\", [7, 8], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2-68]|7[246]\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"1[67]|7\"]]]],\n    \"BW\": [\"267\", \"00\", \"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\", [7, 8, 10], [[\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"90\"]], [\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[24-6]|3[15-79]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[37]\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"0\"]], [\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"BY\": [\"375\", \"810\", \"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\", [6, 7, 8, 9, 10, 11], [[\"(\\\\d{3})(\\\\d{3})\", \"$1 $2\", [\"800\"], \"8 $1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\", \"$1 $2 $3\", [\"800\"], \"8 $1\"], [\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\", \"$1 $2-$3\", [\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\", \"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"], \"8 0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2-$3-$4\", [\"1(?:[56]|7[467])|2[1-3]\"], \"8 0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2-$3-$4\", [\"[1-4]\"], \"8 0$1\"], [\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"[89]\"], \"8 $1\"]], \"8\", 0, \"0|80?\", 0, 0, 0, 0, \"8~10\"],\n    \"BZ\": [\"501\", \"00\", \"(?:0800\\\\d|[2-8])\\\\d{6}\", [7, 11], [[\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"[2-8]\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\", \"$1-$2-$3-$4\", [\"0\"]]]],\n    \"CA\": [\"1\", \"011\", \"(?:[2-8]\\\\d|90)\\\\d{8}|3\\\\d{6}\", [7, 10], 0, \"1\", 0, 0, 0, 0, 0, [[\"(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|6[578])|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\", [10]], [\"\", [10]], [\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\", [10]], [\"900[2-9]\\\\d{6}\", [10]], [\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:00|2[125-7]|33|44|66|77|88)|622)[2-9]\\\\d{6}\", [10]], 0, [\"310\\\\d{4}\", [7]], 0, [\"600[2-9]\\\\d{6}\", [10]]]],\n    \"CC\": [\"61\", \"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\", \"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\", [6, 7, 8, 9, 10, 12], 0, \"0\", 0, \"0|([59]\\\\d{7})$\", \"8$1\", 0, 0, [[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\", [9]], [\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\", [9]], [\"180(?:0\\\\d{3}|2)\\\\d{3}\", [7, 10]], [\"190[0-26]\\\\d{6}\", [10]], 0, 0, 0, 0, [\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\", [9]], [\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\", [6, 8, 10, 12]]], \"0011\"],\n    \"CD\": [\"243\", \"00\", \"[189]\\\\d{8}|[1-68]\\\\d{6}\", [7, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"88\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"[1-6]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[89]\"], \"0$1\"]], \"0\"],\n    \"CF\": [\"236\", \"00\", \"(?:[27]\\\\d{3}|8776)\\\\d{4}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[278]\"]]]],\n    \"CG\": [\"242\", \"00\", \"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\", [9], [[\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[02]\"]]]],\n    \"CH\": [\"41\", \"00\", \"8\\\\d{11}|[2-9]\\\\d{8}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8[047]|90\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2-79]|81\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4 $5\", [\"8\"], \"0$1\"]], \"0\"],\n    \"CI\": [\"225\", \"00\", \"[02]\\\\d{9}\", [10], [[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\", \"$1 $2 $3 $4\", [\"2\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3 $4\", [\"0\"]]]],\n    \"CK\": [\"682\", \"00\", \"[2-578]\\\\d{4}\", [5], [[\"(\\\\d{2})(\\\\d{3})\", \"$1 $2\", [\"[2-578]\"]]]],\n    \"CL\": [\"56\", \"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\", \"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\", [9, 10, 11], [[\"(\\\\d{5})(\\\\d{4})\", \"$1 $2\", [\"219\", \"2196\"], \"($1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"44\"]], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"2[1-36]\"], \"($1)\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"9[2-9]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"], \"($1)\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"60|8\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"60\"]]]],\n    \"CM\": [\"237\", \"00\", \"[26]\\\\d{8}|88\\\\d{6,7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"88\"]], [\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4 $5\", [\"[26]|88\"]]]],\n    \"CN\": [\"86\", \"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\", \"1[127]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-689]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\", [7, 8, 9, 10, 11, 12], [[\"(\\\\d{2})(\\\\d{5,6})\", \"$1 $2\", [\"(?:10|2[0-57-9])[19]\", \"(?:10|2[0-57-9])(?:10|9[56])\", \"(?:10|2[0-57-9])(?:100|9[56])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5,6})\", \"$1 $2\", [\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\", \"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\", \"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\", \"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"(?:4|80)0\"]], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"10|2(?:[02-57-9]|1[1-9])\", \"10|2(?:[02-57-9]|1[1-9])\", \"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{7,8})\", \"$1 $2\", [\"9\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"80\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[3-578]\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"1[3-9]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3 $4\", [\"[12]\"], \"0$1\", 1]], \"0\", 0, \"0|(1(?:[12]\\\\d|79)\\\\d\\\\d)\", 0, 0, 0, 0, \"00\"],\n    \"CO\": [\"57\", \"00(?:4(?:[14]4|56)|[579])\", \"(?:60\\\\d\\\\d|9101)\\\\d{6}|(?:1\\\\d|3)\\\\d{9}\", [10, 11], [[\"(\\\\d{3})(\\\\d{7})\", \"$1 $2\", [\"6\"], \"($1)\"], [\"(\\\\d{3})(\\\\d{7})\", \"$1 $2\", [\"[39]\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{7})\", \"$1-$2-$3\", [\"1\"], \"0$1\", 0, \"$1 $2 $3\"]], \"0\", 0, \"0(4(?:[14]4|56)|[579])?\"],\n    \"CR\": [\"506\", \"00\", \"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\", [8, 10], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2-7]|8[3-9]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"[89]\"]]], 0, 0, \"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\n    \"CU\": [\"53\", \"119\", \"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\", [6, 7, 8, 10], [[\"(\\\\d{2})(\\\\d{4,6})\", \"$1 $2\", [\"2[1-4]|[34]\"], \"(0$1)\"], [\"(\\\\d)(\\\\d{6,7})\", \"$1 $2\", [\"7\"], \"(0$1)\"], [\"(\\\\d)(\\\\d{7})\", \"$1 $2\", [\"5\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{7})\", \"$1 $2\", [\"8\"], \"0$1\"]], \"0\"],\n    \"CV\": [\"238\", \"0\", \"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"[2-589]\"]]]],\n    \"CW\": [\"599\", \"00\", \"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\", [7, 8], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[3467]\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"9[4-8]\"]]], 0, 0, 0, 0, 0, \"[69]\"],\n    \"CX\": [\"61\", \"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\", \"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\", [6, 7, 8, 9, 10, 12], 0, \"0\", 0, \"0|([59]\\\\d{7})$\", \"8$1\", 0, 0, [[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\", [9]], [\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\", [9]], [\"180(?:0\\\\d{3}|2)\\\\d{3}\", [7, 10]], [\"190[0-26]\\\\d{6}\", [10]], 0, 0, 0, 0, [\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\", [9]], [\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\", [6, 8, 10, 12]]], \"0011\"],\n    \"CY\": [\"357\", \"00\", \"(?:[279]\\\\d|[58]0)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"[257-9]\"]]]],\n    \"CZ\": [\"420\", \"00\", \"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2-8]|9[015-7]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"96\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"9\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"9\"]]]],\n    \"DE\": [\"49\", \"00\", \"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[02-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|[23]1|[46][1-8])\\\\d{1,9}\", [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [[\"(\\\\d{2})(\\\\d{3,13})\", \"$1 $2\", [\"3[02]|40|[68]9\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3,12})\", \"$1 $2\", [\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\", \"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{2,11})\", \"$1 $2\", [\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\", \"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"138\"], \"0$1\"], [\"(\\\\d{5})(\\\\d{2,10})\", \"$1 $2\", [\"3\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5,11})\", \"$1 $2\", [\"181\"], \"0$1\"], [\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\", \"$1 $2 $3\", [\"1(?:3|80)|9\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{7,8})\", \"$1 $2\", [\"1[67]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{7,12})\", \"$1 $2\", [\"8\"], \"0$1\"], [\"(\\\\d{5})(\\\\d{6})\", \"$1 $2\", [\"185\", \"1850\", \"18500\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{7})\", \"$1 $2\", [\"18[68]\"], \"0$1\"], [\"(\\\\d{5})(\\\\d{6})\", \"$1 $2\", [\"15[0568]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{7})\", \"$1 $2\", [\"15[1279]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{8})\", \"$1 $2\", [\"18\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\", \"$1 $2 $3\", [\"1(?:6[023]|7)\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\", \"$1 $2 $3\", [\"15[279]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\", \"$1 $2 $3\", [\"15\"], \"0$1\"]], \"0\"],\n    \"DJ\": [\"253\", \"00\", \"(?:2\\\\d|77)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[27]\"]]]],\n    \"DK\": [\"45\", \"00\", \"[2-9]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2-9]\"]]]],\n    \"DM\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-7]\\\\d{6})$\", \"767$1\", 0, \"767\"],\n    \"DO\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, 0, 0, 0, \"8001|8[024]9\"],\n    \"DZ\": [\"213\", \"00\", \"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[1-4]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"9\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[5-8]\"], \"0$1\"]], \"0\"],\n    \"EC\": [\"593\", \"00\", \"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\", [8, 9, 10, 11], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2-$3\", [\"[2-7]\"], \"(0$1)\", 0, \"$1-$2-$3\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"9\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"1\"]]], \"0\"],\n    \"EE\": [\"372\", \"00\", \"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\", [7, 8, 10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\", \"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]], [\"(\\\\d{4})(\\\\d{3,4})\", \"$1 $2\", [\"[45]|8(?:00|[1-49])\", \"[45]|8(?:00[1-9]|[1-49])\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"EG\": [\"20\", \"00\", \"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\", [8, 9, 10], [[\"(\\\\d)(\\\\d{7,8})\", \"$1 $2\", [\"[23]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{6,7})\", \"$1 $2\", [\"1[35]|[4-6]|8[2468]|9[235-7]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[189]\"], \"0$1\"]], \"0\"],\n    \"EH\": [\"212\", \"00\", \"[5-8]\\\\d{8}\", [9], 0, \"0\", 0, 0, 0, 0, \"528[89]\"],\n    \"ER\": [\"291\", \"00\", \"[178]\\\\d{6}\", [7], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[178]\"], \"0$1\"]], \"0\"],\n    \"ES\": [\"34\", \"00\", \"[5-9]\\\\d{8}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[89]00\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[5-9]\"]]]],\n    \"ET\": [\"251\", \"00\", \"(?:11|[2-579]\\\\d)\\\\d{7}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[1-579]\"], \"0$1\"]], \"0\"],\n    \"FI\": [\"358\", \"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\", \"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\", [5, 6, 7, 8, 9, 10, 11, 12], [[\"(\\\\d)(\\\\d{4,9})\", \"$1 $2\", [\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3,7})\", \"$1 $2\", [\"[12]00|[368]|70[07-9]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4,8})\", \"$1 $2\", [\"[1245]|7[135]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{6,10})\", \"$1 $2\", [\"7\"], \"0$1\"]], \"0\", 0, 0, 0, 0, \"1[03-79]|[2-9]\", 0, \"00\"],\n    \"FJ\": [\"679\", \"0(?:0|52)\", \"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\", [7, 11], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[235-9]|45\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"0\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"FK\": [\"500\", \"00\", \"[2-7]\\\\d{4}\", [5]],\n    \"FM\": [\"691\", \"00\", \"(?:[39]\\\\d\\\\d|820)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[389]\"]]]],\n    \"FO\": [\"298\", \"00\", \"[2-9]\\\\d{5}\", [6], [[\"(\\\\d{6})\", \"$1\", [\"[2-9]\"]]], 0, 0, \"(10(?:01|[12]0|88))\"],\n    \"FR\": [\"33\", \"00\", \"[1-9]\\\\d{8}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"], \"0 $1\"], [\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4 $5\", [\"[1-79]\"], \"0$1\"]], \"0\"],\n    \"GA\": [\"241\", \"00\", \"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\", [7, 8], [[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2-7]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"0\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"11|[67]\"], \"0$1\"]], 0, 0, \"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\", \"$1\"],\n    \"GB\": [\"44\", \"00\", \"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\", [7, 9, 10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"800\", \"8001\", \"80011\", \"800111\", \"8001111\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"845\", \"8454\", \"84546\", \"845464\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{6})\", \"$1 $2\", [\"800\"], \"0$1\"], [\"(\\\\d{5})(\\\\d{4,5})\", \"$1 $2\", [\"1(?:38|5[23]|69|76|94)\", \"1(?:(?:38|69)7|5(?:24|39)|768|946)\", \"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{5,6})\", \"$1 $2\", [\"1(?:[2-69][02-9]|[78])\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[25]|7(?:0|6[02-9])\", \"[25]|7(?:0|6(?:[03-9]|2[356]))\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{6})\", \"$1 $2\", [\"7\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[1389]\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, [[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0235])|4(?:[0-5]\\\\d\\\\d|69[7-9]|70[01359])|(?:5[0-26-9]|[78][0-49])\\\\d\\\\d|6(?:[0-4]\\\\d\\\\d|50[0-79]))|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|8(?:[02]\\\\d|1[0-26-9])))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\", [9, 10]], [\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\", [10]], [\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"], [\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\", [7, 10]], [\"70\\\\d{8}\", [10]], 0, [\"(?:3[0347]|55)\\\\d{8}\", [10]], [\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\", [10]], [\"56\\\\d{8}\", [10]]], 0, \" x\"],\n    \"GD\": [\"1\", \"011\", \"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-9]\\\\d{6})$\", \"473$1\", 0, \"473\"],\n    \"GE\": [\"995\", \"00\", \"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"70\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"32\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[57]\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[348]\"], \"0$1\"]], \"0\"],\n    \"GF\": [\"594\", \"00\", \"(?:[56]94|80\\\\d|976)\\\\d{6}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[569]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\"],\n    \"GG\": [\"44\", \"00\", \"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\", [7, 9, 10], 0, \"0\", 0, \"0|([25-9]\\\\d{5})$\", \"1481$1\", 0, 0, [[\"1481[25-9]\\\\d{5}\", [10]], [\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\", [10]], [\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"], [\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\", [7, 10]], [\"70\\\\d{8}\", [10]], 0, [\"(?:3[0347]|55)\\\\d{8}\", [10]], [\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\", [10]], [\"56\\\\d{8}\", [10]]]],\n    \"GH\": [\"233\", \"00\", \"(?:[235]\\\\d{3}|800)\\\\d{5}\", [8, 9], [[\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"8\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[235]\"], \"0$1\"]], \"0\"],\n    \"GI\": [\"350\", \"00\", \"(?:[25]\\\\d\\\\d|606)\\\\d{5}\", [8], [[\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"2\"]]]],\n    \"GL\": [\"299\", \"00\", \"(?:19|[2-689]\\\\d|70)\\\\d{4}\", [6], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"19|[2-9]\"]]]],\n    \"GM\": [\"220\", \"00\", \"[2-9]\\\\d{6}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-9]\"]]]],\n    \"GN\": [\"224\", \"00\", \"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"3\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[67]\"]]]],\n    \"GP\": [\"590\", \"00\", \"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[569]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, [[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|6[0-289]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"], [\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"], [\"80[0-5]\\\\d{6}\"], 0, 0, 0, 0, 0, [\"976[01]\\\\d{5}\"]]],\n    \"GQ\": [\"240\", \"00\", \"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[235]\"]], [\"(\\\\d{3})(\\\\d{6})\", \"$1 $2\", [\"[89]\"]]]],\n    \"GR\": [\"30\", \"00\", \"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\", [10, 11, 12], [[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"21|7\"]], [\"(\\\\d{4})(\\\\d{6})\", \"$1 $2\", [\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2689]\"]], [\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"GT\": [\"502\", \"00\", \"(?:1\\\\d{3}|[2-7])\\\\d{7}\", [8, 11], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2-7]\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"]]]],\n    \"GU\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([3-9]\\\\d{6})$\", \"671$1\", 0, \"671\"],\n    \"GW\": [\"245\", \"00\", \"[49]\\\\d{8}|4\\\\d{6}\", [7, 9], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"40\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[49]\"]]]],\n    \"GY\": [\"592\", \"001\", \"9008\\\\d{3}|(?:[2-467]\\\\d\\\\d|862)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-46-9]\"]]]],\n    \"HK\": [\"852\", \"00(?:30|5[09]|[126-9]?)\", \"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\", [5, 6, 7, 8, 9, 11], [[\"(\\\\d{3})(\\\\d{2,5})\", \"$1 $2\", [\"900\", \"9003\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"9\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"HN\": [\"504\", \"00\", \"8\\\\d{10}|[237-9]\\\\d{7}\", [8, 11], [[\"(\\\\d{4})(\\\\d{4})\", \"$1-$2\", [\"[237-9]\"]]]],\n    \"HR\": [\"385\", \"00\", \"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\", [6, 7, 8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\", \"$1 $2 $3\", [\"6[01]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\", \"$1 $2 $3\", [\"8\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{3})\", \"$1 $2 $3\", [\"1\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[67]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"9\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[2-5]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"], \"0$1\"]], \"0\"],\n    \"HT\": [\"509\", \"00\", \"[2-489]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"[2-489]\"]]]],\n    \"HU\": [\"36\", \"00\", \"[235-7]\\\\d{8}|[1-9]\\\\d{7}\", [8, 9], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"(06 $1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"], \"(06 $1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[2-9]\"], \"06 $1\"]], \"06\"],\n    \"ID\": [\"62\", \"00[89]\", \"(?:(?:00[1-9]|8\\\\d)\\\\d{4}|[1-36])\\\\d{6}|00\\\\d{10}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\", [7, 8, 9, 10, 11, 12, 13], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"15\"]], [\"(\\\\d{2})(\\\\d{5,9})\", \"$1 $2\", [\"2[124]|[36]1\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{5,7})\", \"$1 $2\", [\"800\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5,8})\", \"$1 $2\", [\"[2-79]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\", \"$1-$2-$3\", [\"8[1-35-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{6,8})\", \"$1 $2\", [\"1\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"804\"], \"0$1\"], [\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"80\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\", \"$1-$2-$3\", [\"8\"], \"0$1\"]], \"0\"],\n    \"IE\": [\"353\", \"00\", \"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\", [7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"2[24-9]|47|58|6[237-9]|9[35-9]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[45]0\"], \"(0$1)\"], [\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[2569]|4[1-69]|7[14]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"70\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"81\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[78]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1\"]], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"4\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\"],\n    \"IL\": [\"972\", \"0(?:0|1[2-9])\", \"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\", [7, 8, 9, 10, 11, 12], [[\"(\\\\d{4})(\\\\d{3})\", \"$1-$2\", [\"125\"]], [\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\", \"$1-$2-$3\", [\"121\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"[2-489]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"[57]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1-$2-$3\", [\"12\"]], [\"(\\\\d{4})(\\\\d{6})\", \"$1-$2\", [\"159\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1-$2-$3-$4\", [\"1[7-9]\"]], [\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\", \"$1-$2 $3-$4\", [\"15\"]]], \"0\"],\n    \"IM\": [\"44\", \"00\", \"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\", [10], 0, \"0\", 0, \"0|([25-8]\\\\d{5})$\", \"1624$1\", 0, \"74576|(?:16|7[56])24\"],\n    \"IN\": [\"91\", \"00\", \"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\", [8, 9, 10, 11, 12, 13], [[\"(\\\\d{8})\", \"$1\", [\"5(?:0|2[23]|3[03]|[67]1|88)\", \"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\", \"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"], 0, 1], [\"(\\\\d{4})(\\\\d{4,5})\", \"$1 $2\", [\"180\", \"1800\"], 0, 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"140\"], 0, 1], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\", \"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\", \"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\", \"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\", \"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"], \"0$1\", 1], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\", \"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\", \"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"], \"0$1\", 1], [\"(\\\\d{5})(\\\\d{5})\", \"$1 $2\", [\"[6-9]\"], \"0$1\", 1], [\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\", \"$1 $2 $3\", [\"1(?:6|8[06])\", \"1(?:6|8[06]0)\"], 0, 1], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"18\"], 0, 1]], \"0\"],\n    \"IO\": [\"246\", \"00\", \"3\\\\d{6}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"3\"]]]],\n    \"IQ\": [\"964\", \"00\", \"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\", [8, 9, 10], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[2-6]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"0$1\"]], \"0\"],\n    \"IR\": [\"98\", \"00\", \"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\", [4, 5, 6, 7, 10], [[\"(\\\\d{4,5})\", \"$1\", [\"96\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4,5})\", \"$1 $2\", [\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"9\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[1-8]\"], \"0$1\"]], \"0\"],\n    \"IS\": [\"354\", \"00|1(?:0(?:01|[12]0)|100)\", \"(?:38\\\\d|[4-9])\\\\d{6}\", [7, 9], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[4-9]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"3\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"IT\": [\"39\", \"00\", \"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\", [6, 7, 8, 9, 10, 11], [[\"(\\\\d{2})(\\\\d{4,6})\", \"$1 $2\", [\"0[26]\"]], [\"(\\\\d{3})(\\\\d{3,6})\", \"$1 $2\", [\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\", \"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]], [\"(\\\\d{4})(\\\\d{2,6})\", \"$1 $2\", [\"0(?:[13-579][2-46-8]|8[236-8])\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"894\"]], [\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"0[26]|5\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"1(?:44|[679])|[378]\"]], [\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"0[13-57-9][0159]|14\"]], [\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\", \"$1 $2 $3\", [\"0[26]\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"0\"]], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\", \"$1 $2 $3\", [\"3\"]]], 0, 0, 0, 0, 0, 0, [[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"], [\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\", [9, 10]], [\"80(?:0\\\\d{3}|3)\\\\d{3}\", [6, 9]], [\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\", [6, 8, 9, 10]], [\"1(?:78\\\\d|99)\\\\d{6}\", [9, 10]], 0, 0, 0, [\"55\\\\d{8}\", [10]], [\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\", [6, 9]]]],\n    \"JE\": [\"44\", \"00\", \"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\", [10], 0, \"0\", 0, \"0|([0-24-8]\\\\d{5})$\", \"1534$1\", 0, 0, [[\"1534[0-24-8]\\\\d{5}\"], [\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"], [\"80(?:07(?:35|81)|8901)\\\\d{4}\"], [\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"], [\"701511\\\\d{4}\"], 0, [\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"], [\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"], [\"56\\\\d{8}\"]]],\n    \"JM\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\", [10], 0, \"1\", 0, 0, 0, 0, \"658|876\"],\n    \"JO\": [\"962\", \"00\", \"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\", [8, 9], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2356]|87\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{5,6})\", \"$1 $2\", [\"[89]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1 $2\", [\"70\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"0$1\"]], \"0\"],\n    \"JP\": [\"81\", \"010\", \"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\", [8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1-$2-$3\", [\"(?:12|57|99)0\"], \"0$1\"], [\"(\\\\d{4})(\\\\d)(\\\\d{4})\", \"$1-$2-$3\", [\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])\", \"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\", \"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"60\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1-$2-$3\", [\"[36]|4(?:2[09]|7[01])\", \"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\", \"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\", \"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\", \"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\", \"$1-$2-$3\", [\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"800\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1-$2-$3\", [\"[257-9]\"], \"0$1\"]], \"0\"],\n    \"KE\": [\"254\", \"000\", \"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\", [7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{5,7})\", \"$1 $2\", [\"[24-6]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{6})\", \"$1 $2\", [\"[17]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[89]\"], \"0$1\"]], \"0\"],\n    \"KG\": [\"996\", \"00\", \"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\", [9, 10], [[\"(\\\\d{4})(\\\\d{5})\", \"$1 $2\", [\"3(?:1[346]|[24-79])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[235-79]|88\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\"],\n    \"KH\": [\"855\", \"00[14-9]\", \"1\\\\d{9}|[1-9]\\\\d{7,8}\", [8, 9, 10], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[1-9]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1\"]]], \"0\"],\n    \"KI\": [\"686\", \"00\", \"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\", [5, 8], 0, \"0\"],\n    \"KM\": [\"269\", \"00\", \"[3478]\\\\d{6}\", [7], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"[3478]\"]]]],\n    \"KN\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-7]\\\\d{6})$\", \"869$1\", 0, \"869\"],\n    \"KP\": [\"850\", \"00|99\", \"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\", [8, 10], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2-7]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"0$1\"]], \"0\"],\n    \"KR\": [\"82\", \"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\", \"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\", [5, 6, 8, 9, 10, 11, 12, 13, 14], [[\"(\\\\d{2})(\\\\d{3,4})\", \"$1-$2\", [\"(?:3[1-3]|[46][1-4]|5[1-5])1\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{4})\", \"$1-$2\", [\"1\"]], [\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\", \"$1-$2-$3\", [\"2\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"60|8\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\", \"$1-$2-$3\", [\"[1346]|5[1-5]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1-$2-$3\", [\"[57]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\", \"$1-$2-$3\", [\"5\"], \"0$1\"]], \"0\", 0, \"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\n    \"KW\": [\"965\", \"00\", \"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\", [7, 8], [[\"(\\\\d{4})(\\\\d{3,4})\", \"$1 $2\", [\"[169]|2(?:[235]|4[1-35-9])|52\"]], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[245]\"]]]],\n    \"KY\": [\"1\", \"011\", \"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-9]\\\\d{6})$\", \"345$1\", 0, \"345\"],\n    \"KZ\": [\"7\", \"810\", \"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\", [10, 14], 0, \"8\", 0, 0, 0, 0, \"33|7\", 0, \"8~10\"],\n    \"LA\": [\"856\", \"00\", \"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\", [8, 9, 10], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"2[13]|3[14]|[4-8]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"30[013-9]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"[23]\"], \"0$1\"]], \"0\"],\n    \"LB\": [\"961\", \"00\", \"[27-9]\\\\d{7}|[13-9]\\\\d{6}\", [7, 8], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[27-9]\"]]], \"0\"],\n    \"LC\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-8]\\\\d{6})$\", \"758$1\", 0, \"758\"],\n    \"LI\": [\"423\", \"00\", \"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\", [7, 9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"[2379]|8(?:0[09]|7)\", \"[2379]|8(?:0(?:02|9)|7)\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"69\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"6\"]]], \"0\", 0, \"0|(1001)\"],\n    \"LK\": [\"94\", \"00\", \"[1-9]\\\\d{8}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[1-689]\"], \"0$1\"]], \"0\"],\n    \"LR\": [\"231\", \"00\", \"(?:2|33|5\\\\d|77|88)\\\\d{7}|[4-6]\\\\d{6}\", [7, 8, 9], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[4-6]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"2\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[3578]\"], \"0$1\"]], \"0\"],\n    \"LS\": [\"266\", \"00\", \"(?:[256]\\\\d\\\\d|800)\\\\d{5}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2568]\"]]]],\n    \"LT\": [\"370\", \"00\", \"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\", [8], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"52[0-7]\"], \"(8-$1)\", 1], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"[7-9]\"], \"8 $1\", 1], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"37|4(?:[15]|6[1-8])\"], \"(8-$1)\", 1], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[3-6]\"], \"(8-$1)\", 1]], \"8\", 0, \"[08]\"],\n    \"LU\": [\"352\", \"00\", \"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\", [4, 5, 6, 7, 8, 9, 10, 11], [[\"(\\\\d{2})(\\\\d{3})\", \"$1 $2\", [\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"20[2-689]\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\", \"$1 $2 $3 $4\", [\"2(?:[0367]|4[3-8])\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"80[01]|90[015]\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"20\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"6\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\", \"$1 $2 $3 $4 $5\", [\"2(?:[0367]|4[3-8])\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\", \"$1 $2 $3 $4\", [\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]], 0, 0, \"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\n    \"LV\": [\"371\", \"00\", \"(?:[268]\\\\d|90)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[269]|8[01]\"]]]],\n    \"LY\": [\"218\", \"00\", \"[2-9]\\\\d{8}\", [9], [[\"(\\\\d{2})(\\\\d{7})\", \"$1-$2\", [\"[2-9]\"], \"0$1\"]], \"0\"],\n    \"MA\": [\"212\", \"00\", \"[5-8]\\\\d{8}\", [9], [[\"(\\\\d{5})(\\\\d{4})\", \"$1-$2\", [\"5(?:29|38)\", \"5(?:29[89]|389)\", \"5(?:29[89]|389)0\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"5[45]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{5})\", \"$1-$2\", [\"5(?:2[2-489]|3[5-9]|9)|892\", \"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1-$2\", [\"8\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{6})\", \"$1-$2\", [\"[5-7]\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, [[\"5(?:29(?:[189][05]|2[29]|3[01])|389[05])\\\\d{4}|5(?:2(?:[0-25-7]\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[08]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"], [\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[017]\\\\d|2[0-2]|6[0-8]))\\\\d{6}\"], [\"80\\\\d{7}\"], [\"89\\\\d{7}\"], 0, 0, 0, 0, [\"592(?:4[0-2]|93)\\\\d{4}\"]]],\n    \"MC\": [\"377\", \"00\", \"(?:[3489]|6\\\\d)\\\\d{7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"4\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[389]\"]], [\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4 $5\", [\"6\"], \"0$1\"]], \"0\"],\n    \"MD\": [\"373\", \"00\", \"(?:[235-7]\\\\d|[89]0)\\\\d{6}\", [8], [[\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[89]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"22|3\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"[25-7]\"], \"0$1\"]], \"0\"],\n    \"ME\": [\"382\", \"00\", \"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[2-9]\"], \"0$1\"]], \"0\"],\n    \"MF\": [\"590\", \"00\", \"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\", [9], 0, \"0\", 0, 0, 0, 0, 0, [[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"], [\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"], [\"80[0-5]\\\\d{6}\"], 0, 0, 0, 0, 0, [\"976[01]\\\\d{5}\"]]],\n    \"MG\": [\"261\", \"00\", \"[23]\\\\d{8}\", [9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[23]\"], \"0$1\"]], \"0\", 0, \"0|([24-9]\\\\d{6})$\", \"20$1\"],\n    \"MH\": [\"692\", \"011\", \"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"[2-6]\"]]], \"1\"],\n    \"MK\": [\"389\", \"00\", \"[2-578]\\\\d{7}\", [8], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"2|34[47]|4(?:[37]7|5[47]|64)\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[347]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[58]\"], \"0$1\"]], \"0\"],\n    \"ML\": [\"223\", \"00\", \"[24-9]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[24-9]\"]]]],\n    \"MM\": [\"95\", \"00\", \"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\", [6, 7, 8, 9, 10], [[\"(\\\\d)(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"16|2\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[12]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[4-7]|8[1-35]\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\", \"$1 $2 $3\", [\"9(?:2[0-4]|[35-9]|4[137-9])\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"2\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"92\"], \"0$1\"], [\"(\\\\d)(\\\\d{5})(\\\\d{4})\", \"$1 $2 $3\", [\"9\"], \"0$1\"]], \"0\"],\n    \"MN\": [\"976\", \"001\", \"[12]\\\\d{7,9}|[5-9]\\\\d{7}\", [8, 9, 10], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"[12]1\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[5-9]\"]], [\"(\\\\d{3})(\\\\d{5,6})\", \"$1 $2\", [\"[12]2[1-3]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{5,6})\", \"$1 $2\", [\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\", \"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"], \"0$1\"], [\"(\\\\d{5})(\\\\d{4,5})\", \"$1 $2\", [\"[12]\"], \"0$1\"]], \"0\"],\n    \"MO\": [\"853\", \"00\", \"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\", [7, 8], [[\"(\\\\d{4})(\\\\d{3})\", \"$1 $2\", [\"0\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[268]\"]]]],\n    \"MP\": [\"1\", \"011\", \"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-9]\\\\d{6})$\", \"670$1\", 0, \"670\"],\n    \"MQ\": [\"596\", \"00\", \"(?:69|80)\\\\d{7}|(?:59|97)6\\\\d{6}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[569]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\"],\n    \"MR\": [\"222\", \"00\", \"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2-48]\"]]]],\n    \"MS\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([34]\\\\d{6})$\", \"664$1\", 0, \"664\"],\n    \"MT\": [\"356\", \"00\", \"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2357-9]\"]]]],\n    \"MU\": [\"230\", \"0(?:0|[24-7]0|3[03])\", \"(?:5|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\", [7, 8, 10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-46]|8[013]\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"5\"]], [\"(\\\\d{5})(\\\\d{5})\", \"$1 $2\", [\"8\"]]], 0, 0, 0, 0, 0, 0, 0, \"020\"],\n    \"MV\": [\"960\", \"0(?:0|19)\", \"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\", [7, 10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"[3467]|9[13-9]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[89]\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"MW\": [\"265\", \"00\", \"(?:[129]\\\\d|31|77|88)\\\\d{7}|1\\\\d{6}\", [7, 9], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1[2-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"2\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[137-9]\"], \"0$1\"]], \"0\"],\n    \"MX\": [\"52\", \"0[09]\", \"1(?:(?:44|99)[1-9]|65[0-689])\\\\d{7}|(?:1(?:[017]\\\\d|[235][1-9]|4[0-35-9]|6[0-46-9]|8[1-79]|9[1-8])|[2-9]\\\\d)\\\\d{8}\", [10, 11], [[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"33|5[56]|81\"], 0, 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2-9]\"], 0, 1], [\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$2 $3 $4\", [\"1(?:33|5[56]|81)\"], 0, 1], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$2 $3 $4\", [\"1\"], 0, 1]], \"01\", 0, \"0(?:[12]|4[45])|1\", 0, 0, 0, 0, \"00\"],\n    \"MY\": [\"60\", \"00\", \"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\", [8, 9, 10], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1-$2 $3\", [\"[4-79]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1-$2 $3\", [\"1(?:[02469]|[378][1-9]|53)|8\", \"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1-$2 $3\", [\"3\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\", \"$1-$2-$3-$4\", [\"1(?:[367]|80)\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1-$2 $3\", [\"15\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1-$2 $3\", [\"1\"], \"0$1\"]], \"0\"],\n    \"MZ\": [\"258\", \"00\", \"(?:2|8\\\\d)\\\\d{7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"2|8[2-79]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"NA\": [\"264\", \"00\", \"[68]\\\\d{7,8}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"88\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"6\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"87\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"], \"0$1\"]], \"0\"],\n    \"NC\": [\"687\", \"00\", \"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\", [6], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1.$2.$3\", [\"[02-57-9]\"]]]],\n    \"NE\": [\"227\", \"00\", \"[027-9]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"08\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[089]|2[013]|7[04]\"]]]],\n    \"NF\": [\"672\", \"00\", \"[13]\\\\d{5}\", [6], [[\"(\\\\d{2})(\\\\d{4})\", \"$1 $2\", [\"1[0-3]\"]], [\"(\\\\d)(\\\\d{5})\", \"$1 $2\", [\"[13]\"]]], 0, 0, \"([0-258]\\\\d{4})$\", \"3$1\"],\n    \"NG\": [\"234\", \"009\", \"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\", [7, 8, 10, 11, 12, 13, 14], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"78\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[12]|9(?:0[3-9]|[1-9])\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\", \"$1 $2 $3\", [\"[3-7]|8[2-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[7-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\", \"$1 $2 $3\", [\"[78]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\", \"$1 $2 $3\", [\"[78]\"], \"0$1\"]], \"0\"],\n    \"NI\": [\"505\", \"00\", \"(?:1800|[25-8]\\\\d{3})\\\\d{4}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[125-8]\"]]]],\n    \"NL\": [\"31\", \"00\", \"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\", [5, 6, 7, 8, 9, 10, 11], [[\"(\\\\d{3})(\\\\d{4,7})\", \"$1 $2\", [\"[89]0\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1 $2\", [\"66\"], \"0$1\"], [\"(\\\\d)(\\\\d{8})\", \"$1 $2\", [\"6\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[1-578]|91\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\", \"$1 $2 $3\", [\"9\"], \"0$1\"]], \"0\"],\n    \"NO\": [\"47\", \"00\", \"(?:0|[2-9]\\\\d{3})\\\\d{4}\", [5, 8], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"[489]|59\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[235-7]\"]]], 0, 0, 0, 0, 0, \"[02-689]|7[0-8]\"],\n    \"NP\": [\"977\", \"00\", \"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\", [8, 10, 11], [[\"(\\\\d)(\\\\d{7})\", \"$1-$2\", [\"1[2-6]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{6})\", \"$1-$2\", [\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{7})\", \"$1-$2\", [\"9\"]]], \"0\"],\n    \"NR\": [\"674\", \"00\", \"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[4-68]\"]]]],\n    \"NU\": [\"683\", \"00\", \"(?:[47]|888\\\\d)\\\\d{3}\", [4, 7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"8\"]]]],\n    \"NZ\": [\"64\", \"0(?:0|161)\", \"[29]\\\\d{7,9}|50\\\\d{5}(?:\\\\d{2,3})?|6[0-35-9]\\\\d{6}|7\\\\d{7,8}|8\\\\d{4,9}|(?:11\\\\d|[34])\\\\d{7}\", [5, 6, 7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{3,8})\", \"$1 $2\", [\"8[1-579]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\", \"$1 $2 $3\", [\"50[036-8]|[89]0\", \"50(?:[0367]|88)|[89]0\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"24|[346]|7[2-57-9]|9[2-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"2(?:10|74)|[59]|80\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"1|2[028]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\", \"$1 $2 $3\", [\"2(?:[169]|7[0-35-9])|7|86\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, 0, \"00\"],\n    \"OM\": [\"968\", \"00\", \"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\", [7, 8, 9], [[\"(\\\\d{3})(\\\\d{4,6})\", \"$1 $2\", [\"[58]\"]], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"2\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[179]\"]]]],\n    \"PA\": [\"507\", \"00\", \"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\", [7, 8, 10, 11], [[\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"[1-57-9]\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1-$2\", [\"[68]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"PE\": [\"51\", \"00|19(?:1[124]|77|90)00\", \"(?:[14-8]|9\\\\d)\\\\d{7}\", [8, 9], [[\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"80\"], \"(0$1)\"], [\"(\\\\d)(\\\\d{7})\", \"$1 $2\", [\"1\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"[4-8]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"9\"]]], \"0\", 0, 0, 0, 0, 0, 0, \"00\", \" Anexo \"],\n    \"PF\": [\"689\", \"00\", \"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\", [6, 8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"44\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"4|8[7-9]\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"]]]],\n    \"PG\": [\"675\", \"00|140[1-3]\", \"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\", [7, 8], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"18|[2-69]|85\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[78]\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"PH\": [\"63\", \"00\", \"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\", [6, 8, 9, 10, 11, 12, 13], [[\"(\\\\d)(\\\\d{5})\", \"$1 $2\", [\"2\"], \"(0$1)\"], [\"(\\\\d{4})(\\\\d{4,6})\", \"$1 $2\", [\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\", \"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"], \"(0$1)\"], [\"(\\\\d{5})(\\\\d{4})\", \"$1 $2\", [\"346|4(?:27|9[35])|883\", \"3469|4(?:279|9(?:30|56))|8834\"], \"(0$1)\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"2\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[3-7]|8[2-8]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[89]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"]], [\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3 $4\", [\"1\"]]], \"0\"],\n    \"PK\": [\"92\", \"00\", \"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\", [8, 9, 10, 11, 12], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\", \"$1 $2 $3\", [\"[89]0\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{5})\", \"$1 $2\", [\"1\"]], [\"(\\\\d{3})(\\\\d{6,7})\", \"$1 $2\", [\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\", \"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{7,8})\", \"$1 $2\", [\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"], \"(0$1)\"], [\"(\\\\d{5})(\\\\d{5})\", \"$1 $2\", [\"58\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{7})\", \"$1 $2\", [\"3\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"[24-9]\"], \"(0$1)\"]], \"0\"],\n    \"PL\": [\"48\", \"00\", \"6\\\\d{5}(?:\\\\d{2})?|8\\\\d{9}|[1-9]\\\\d{6}(?:\\\\d{2})?\", [6, 7, 8, 9, 10], [[\"(\\\\d{5})\", \"$1\", [\"19\"]], [\"(\\\\d{3})(\\\\d{3})\", \"$1 $2\", [\"11|64\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\", \"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\", \"$1 $2 $3\", [\"64\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"1[2-8]|[2-7]|8[1-79]|9[145]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"PM\": [\"508\", \"00\", \"(?:[45]|80\\\\d\\\\d)\\\\d{5}\", [6, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"[45]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\"],\n    \"PR\": [\"1\", \"011\", \"(?:[589]\\\\d\\\\d|787)\\\\d{7}\", [10], 0, \"1\", 0, 0, 0, 0, \"787|939\"],\n    \"PS\": [\"970\", \"00\", \"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\", [8, 9, 10], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2489]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"5\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1\"]]], \"0\"],\n    \"PT\": [\"351\", \"00\", \"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"2[12]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"16|[236-9]\"]]]],\n    \"PW\": [\"680\", \"01[12]\", \"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-9]\"]]]],\n    \"PY\": [\"595\", \"00\", \"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\", [6, 7, 8, 9, 10, 11], [[\"(\\\\d{3})(\\\\d{3,6})\", \"$1 $2\", [\"[2-9]0\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{4,5})\", \"$1 $2\", [\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"87\"]], [\"(\\\\d{3})(\\\\d{6})\", \"$1 $2\", [\"9(?:[5-79]|8[1-6])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2-8]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"9\"]]], \"0\"],\n    \"QA\": [\"974\", \"00\", \"[2-7]\\\\d{7}|800\\\\d{4}(?:\\\\d{2})?|2\\\\d{6}\", [7, 8, 9], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"2[126]|8\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2-7]\"]]]],\n    \"RE\": [\"262\", \"00\", \"976\\\\d{6}|(?:26|[68]\\\\d)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2689]\"], \"0$1\"]], \"0\", 0, 0, 0, 0, \"26[23]|69|[89]\"],\n    \"RO\": [\"40\", \"00\", \"(?:[2378]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\", [6, 9], [[\"(\\\\d{3})(\\\\d{3})\", \"$1 $2\", [\"2[3-6]\", \"2[3-6]\\\\d9\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})\", \"$1 $2\", [\"219|31\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[23]1\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[237-9]\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, 0, 0, \" int \"],\n    \"RS\": [\"381\", \"00\", \"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\", [6, 7, 8, 9, 10, 11, 12], [[\"(\\\\d{3})(\\\\d{3,9})\", \"$1 $2\", [\"(?:2[389]|39)0|[7-9]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{5,10})\", \"$1 $2\", [\"[1-36]\"], \"0$1\"]], \"0\"],\n    \"RU\": [\"7\", \"810\", \"8\\\\d{13}|[347-9]\\\\d{9}\", [10, 14], [[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"7(?:1[0-8]|2[1-9])\", \"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\", \"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"], \"8 ($1)\", 1], [\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"7(?:1[0-68]|2[1-9])\", \"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\", \"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"], \"8 ($1)\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"8 ($1)\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2-$3-$4\", [\"[349]|8(?:[02-7]|1[1-8])\"], \"8 ($1)\", 1], [\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"8\"], \"8 ($1)\"]], \"8\", 0, 0, 0, 0, \"3[04-689]|[489]\", 0, \"8~10\"],\n    \"RW\": [\"250\", \"00\", \"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\", [8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"0\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[7-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"2\"]]], \"0\"],\n    \"SA\": [\"966\", \"00\", \"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\", [9, 10], [[\"(\\\\d{4})(\\\\d{5})\", \"$1 $2\", [\"9\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"5\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"81\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"]]], \"0\"],\n    \"SB\": [\"677\", \"0[01]\", \"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\", [5, 7], [[\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\n    \"SC\": [\"248\", \"010|0[0-2]\", \"800\\\\d{4}|(?:[249]\\\\d|64)\\\\d{5}\", [7], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[246]|9[57]\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"SD\": [\"249\", \"00\", \"[19]\\\\d{8}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[19]\"], \"0$1\"]], \"0\"],\n    \"SE\": [\"46\", \"00\", \"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\", [6, 7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\", \"$1-$2 $3\", [\"20\"], \"0$1\", 0, \"$1 $2 $3\"], [\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"9(?:00|39|44|9)\"], \"0$1\", 0, \"$1 $2\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\", \"$1-$2 $3\", [\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"], \"0$1\", 0, \"$1 $2 $3\"], [\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\", \"$1-$2 $3 $4\", [\"8\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\", \"$1-$2 $3\", [\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"], \"0$1\", 0, \"$1 $2 $3\"], [\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\", \"$1-$2 $3\", [\"9(?:00|39|44)\"], \"0$1\", 0, \"$1 $2 $3\"], [\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\", \"$1-$2 $3 $4\", [\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1-$2 $3 $4\", [\"10|7\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\", \"$1-$2 $3 $4\", [\"8\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1-$2 $3 $4\", [\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1-$2 $3 $4\", [\"9\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1-$2 $3 $4 $5\", [\"[26]\"], \"0$1\", 0, \"$1 $2 $3 $4 $5\"]], \"0\"],\n    \"SG\": [\"65\", \"0[0-3]\\\\d\", \"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\", [8, 10, 11], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[369]|8(?:0[1-5]|[1-9])\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"]], [\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\", \"$1 $2 $3\", [\"7\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"]]]],\n    \"SH\": [\"290\", \"00\", \"(?:[256]\\\\d|8)\\\\d{3}\", [4, 5], 0, 0, 0, 0, 0, 0, \"[256]\"],\n    \"SI\": [\"386\", \"00|10(?:22|66|88|99)\", \"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\", [5, 6, 7, 8], [[\"(\\\\d{2})(\\\\d{3,6})\", \"$1 $2\", [\"8[09]|9\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"59|8\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[37][01]|4[0139]|51|6\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[1-57]\"], \"(0$1)\"]], \"0\", 0, 0, 0, 0, 0, 0, \"00\"],\n    \"SJ\": [\"47\", \"00\", \"0\\\\d{4}|(?:[489]\\\\d|[57]9)\\\\d{6}\", [5, 8], 0, 0, 0, 0, 0, 0, \"79\"],\n    \"SK\": [\"421\", \"00\", \"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\", [6, 7, 9], [[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\", \"$1 $2 $3\", [\"21\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\", \"$1 $2 $3\", [\"[3-5][1-8]1\", \"[3-5][1-8]1[67]\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\", \"$1/$2 $3 $4\", [\"2\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[689]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1/$2 $3 $4\", [\"[3-5]\"], \"0$1\"]], \"0\"],\n    \"SL\": [\"232\", \"00\", \"(?:[237-9]\\\\d|66)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"[236-9]\"], \"(0$1)\"]], \"0\"],\n    \"SM\": [\"378\", \"00\", \"(?:0549|[5-7]\\\\d)\\\\d{6}\", [8, 10], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[5-7]\"]], [\"(\\\\d{4})(\\\\d{6})\", \"$1 $2\", [\"0\"]]], 0, 0, \"([89]\\\\d{5})$\", \"0549$1\"],\n    \"SN\": [\"221\", \"00\", \"(?:[378]\\\\d|93)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[379]\"]]]],\n    \"SO\": [\"252\", \"00\", \"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\", [6, 7, 8, 9], [[\"(\\\\d{2})(\\\\d{4})\", \"$1 $2\", [\"8[125]\"]], [\"(\\\\d{6})\", \"$1\", [\"[134]\"]], [\"(\\\\d)(\\\\d{6})\", \"$1 $2\", [\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]], [\"(\\\\d)(\\\\d{7})\", \"$1 $2\", [\"24|[67]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[3478]|64|90\"]], [\"(\\\\d{2})(\\\\d{5,7})\", \"$1 $2\", [\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\"]]], \"0\"],\n    \"SR\": [\"597\", \"00\", \"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\", [6, 7], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1-$2-$3\", [\"56\"]], [\"(\\\\d{3})(\\\\d{3})\", \"$1-$2\", [\"[2-5]\"]], [\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"[6-8]\"]]]],\n    \"SS\": [\"211\", \"00\", \"[19]\\\\d{8}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[19]\"], \"0$1\"]], \"0\"],\n    \"ST\": [\"239\", \"00\", \"(?:22|9\\\\d)\\\\d{5}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[29]\"]]]],\n    \"SV\": [\"503\", \"00\", \"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\", [7, 8, 11], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[89]\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[267]\"]], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[89]\"]]]],\n    \"SX\": [\"1\", \"011\", \"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|(5\\\\d{6})$\", \"721$1\", 0, \"721\"],\n    \"SY\": [\"963\", \"00\", \"[1-39]\\\\d{8}|[1-5]\\\\d{7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[1-5]\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"9\"], \"0$1\", 1]], \"0\"],\n    \"SZ\": [\"268\", \"00\", \"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\", [8, 9], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[0237]\"]], [\"(\\\\d{5})(\\\\d{4})\", \"$1 $2\", [\"9\"]]]],\n    \"TA\": [\"290\", \"00\", \"8\\\\d{3}\", [4], 0, 0, 0, 0, 0, 0, \"8\"],\n    \"TC\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-479]\\\\d{6})$\", \"649$1\", 0, \"649\"],\n    \"TD\": [\"235\", \"00|16\", \"(?:22|[69]\\\\d|77)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2679]\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"TG\": [\"228\", \"00\", \"[279]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[279]\"]]]],\n    \"TH\": [\"66\", \"00[1-9]\", \"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\", [8, 9, 10, 13], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"2\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[13-9]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1\"]]], \"0\"],\n    \"TJ\": [\"992\", \"810\", \"(?:00|[1-57-9]\\\\d)\\\\d{7}\", [9], [[\"(\\\\d{6})(\\\\d)(\\\\d{2})\", \"$1 $2 $3\", [\"331\", \"3317\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"[34]7|91[78]\"]], [\"(\\\\d{4})(\\\\d)(\\\\d{4})\", \"$1 $2 $3\", [\"3[1-5]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[0-57-9]\"]]], 0, 0, 0, 0, 0, 0, 0, \"8~10\"],\n    \"TK\": [\"690\", \"00\", \"[2-47]\\\\d{3,6}\", [4, 5, 6, 7]],\n    \"TL\": [\"670\", \"00\", \"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\", [7, 8], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-489]|70\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"7\"]]]],\n    \"TM\": [\"993\", \"810\", \"[1-6]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2-$3-$4\", [\"12\"], \"(8 $1)\"], [\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\", \"$1 $2-$3-$4\", [\"[1-5]\"], \"(8 $1)\"], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"6\"], \"8 $1\"]], \"8\", 0, 0, 0, 0, 0, 0, \"8~10\"],\n    \"TN\": [\"216\", \"00\", \"[2-57-9]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2-57-9]\"]]]],\n    \"TO\": [\"676\", \"00\", \"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\", [5, 7], [[\"(\\\\d{2})(\\\\d{3})\", \"$1-$2\", [\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]], [\"(\\\\d{4})(\\\\d{3})\", \"$1 $2\", [\"0\"]], [\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[5-9]\"]]]],\n    \"TR\": [\"90\", \"00\", \"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\", [7, 10, 12, 13], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"512|8[01589]|90\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"5(?:[0-59]|61)\", \"5(?:[0-59]|616)\", \"5(?:[0-59]|6161)\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[24][1-8]|3[1-9]\"], \"(0$1)\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\", \"$1 $2 $3\", [\"80\"], \"0$1\", 1]], \"0\"],\n    \"TT\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-46-8]\\\\d{6})$\", \"868$1\", 0, \"868\"],\n    \"TV\": [\"688\", \"00\", \"(?:2|7\\\\d\\\\d|90)\\\\d{4}\", [5, 6, 7], [[\"(\\\\d{2})(\\\\d{3})\", \"$1 $2\", [\"2\"]], [\"(\\\\d{2})(\\\\d{4})\", \"$1 $2\", [\"90\"]], [\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"7\"]]]],\n    \"TW\": [\"886\", \"0(?:0[25-79]|19)\", \"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\", [7, 8, 9, 10, 11], [[\"(\\\\d{2})(\\\\d)(\\\\d{4})\", \"$1 $2 $3\", [\"202\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[258]0\"], \"0$1\"], [\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\", \"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[49]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\", \"$1 $2 $3\", [\"7\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, 0, 0, \"#\"],\n    \"TZ\": [\"255\", \"00[056]\", \"(?:[26-8]\\\\d|41|90)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"[89]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[24]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[67]\"], \"0$1\"]], \"0\"],\n    \"UA\": [\"380\", \"00\", \"[89]\\\\d{9}|[3-9]\\\\d{8}\", [9, 10], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\", \"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{5})\", \"$1 $2\", [\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\", \"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[3-7]|89|9[1-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[89]\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, 0, \"0~0\"],\n    \"UG\": [\"256\", \"00[057]\", \"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\", [9], [[\"(\\\\d{4})(\\\\d{5})\", \"$1 $2\", [\"202\", \"2024\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{6})\", \"$1 $2\", [\"[27-9]|4(?:6[45]|[7-9])\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1 $2\", [\"[34]\"], \"0$1\"]], \"0\"],\n    \"US\": [\"1\", \"011\", \"[2-9]\\\\d{9}|3\\\\d{6}\", [10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"310\"], 0, 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"($1) $2-$3\", [\"[2-9]\"], 0, 1, \"$1-$2-$3\"]], \"1\", 0, 0, 0, 0, 0, [[\"5(?:05(?:[2-57-9]\\\\d\\\\d|6(?:[0-35-9]\\\\d|44))|82(?:2(?:0[0-3]|[268]2)|3(?:0[02]|22|33)|4(?:00|4[24]|65|82)|5(?:00|29|58|83)|6(?:00|66|82)|7(?:58|77)|8(?:00|42|88)|9(?:00|9[89])))\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-289]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0157-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"], [\"\"], [\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"], [\"900[2-9]\\\\d{6}\"], [\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-7]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\n    \"UY\": [\"598\", \"0(?:0|1[3-9]\\\\d)\", \"4\\\\d{9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\", [7, 8, 10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"405|8|90\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"9\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[124]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"4\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, 0, \"00\", \" int. \"],\n    \"UZ\": [\"998\", \"810\", \"(?:33|55|[679]\\\\d|88)\\\\d{7}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[35-9]\"], \"8 $1\"]], \"8\", 0, 0, 0, 0, 0, 0, \"8~10\"],\n    \"VA\": [\"39\", \"00\", \"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\", [6, 7, 8, 9, 10, 11], 0, 0, 0, 0, 0, 0, \"06698\"],\n    \"VC\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-7]\\\\d{6})$\", \"784$1\", 0, \"784\"],\n    \"VE\": [\"58\", \"00\", \"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\", [10], [[\"(\\\\d{3})(\\\\d{7})\", \"$1-$2\", [\"[24-689]\"], \"0$1\"]], \"0\"],\n    \"VG\": [\"1\", \"011\", \"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-578]\\\\d{6})$\", \"284$1\", 0, \"284\"],\n    \"VI\": [\"1\", \"011\", \"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-9]\\\\d{6})$\", \"340$1\", 0, \"340\"],\n    \"VN\": [\"84\", \"00\", \"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\", [7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"80\"], \"0$1\", 1], [\"(\\\\d{4})(\\\\d{4,6})\", \"$1 $2\", [\"1\"], 0, 1], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[69]\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[3578]\"], \"0$1\", 1], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"2[48]\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\", \"$1 $2 $3\", [\"2\"], \"0$1\", 1]], \"0\"],\n    \"VU\": [\"678\", \"00\", \"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\", [5, 7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[57-9]\"]]]],\n    \"WF\": [\"681\", \"00\", \"(?:40|72)\\\\d{4}|8\\\\d{5}(?:\\\\d{3})?\", [6, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"[478]\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"]]]],\n    \"WS\": [\"685\", \"0\", \"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\", [5, 6, 7, 10], [[\"(\\\\d{5})\", \"$1\", [\"[2-5]|6[1-9]\"]], [\"(\\\\d{3})(\\\\d{3,7})\", \"$1 $2\", [\"[68]\"]], [\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"7\"]]]],\n    \"XK\": [\"383\", \"00\", \"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\", [8, 9], [[\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[89]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2-4]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[23]\"], \"0$1\"]], \"0\"],\n    \"YE\": [\"967\", \"00\", \"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\", [7, 8, 9], [[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[1-6]|7[24-68]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"7\"], \"0$1\"]], \"0\"],\n    \"YT\": [\"262\", \"00\", \"80\\\\d{7}|(?:26|63)9\\\\d{6}\", [9], 0, \"0\", 0, 0, 0, 0, \"269|63\"],\n    \"ZA\": [\"27\", \"00\", \"[1-79]\\\\d{8}|8\\\\d{4,9}\", [5, 6, 7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{3,4})\", \"$1 $2\", [\"8[1-4]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\", \"$1 $2 $3\", [\"8[1-4]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"860\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[1-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"], \"0$1\"]], \"0\"],\n    \"ZM\": [\"260\", \"00\", \"800\\\\d{6}|(?:21|63|[79]\\\\d)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[28]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1 $2\", [\"[79]\"], \"0$1\"]], \"0\"],\n    \"ZW\": [\"263\", \"00\", \"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\", [5, 6, 7, 8, 9, 10], [[\"(\\\\d{3})(\\\\d{3,5})\", \"$1 $2\", [\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\", \"$1 $2 $3\", [\"[49]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"80\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1 $2\", [\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\", \"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\", \"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{6})\", \"$1 $2\", [\"8\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3,5})\", \"$1 $2\", [\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"29[013-9]|39|54\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3,5})\", \"$1 $2\", [\"(?:25|54)8\", \"258|5483\"], \"0$1\"]], \"0\"]\n  },\n  \"nonGeographic\": {\n    \"800\": [\"800\", 0, \"(?:00|[1-9]\\\\d)\\\\d{6}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"\\\\d\"]]], 0, 0, 0, 0, 0, 0, [0, 0, [\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\n    \"808\": [\"808\", 0, \"[1-9]\\\\d{7}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[1-9]\"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, 0, [\"[1-9]\\\\d{7}\"]]],\n    \"870\": [\"870\", 0, \"7\\\\d{11}|[35-7]\\\\d{8}\", [9, 12], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[35-7]\"]]], 0, 0, 0, 0, 0, 0, [0, [\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"]]],\n    \"878\": [\"878\", 0, \"10\\\\d{10}\", [12], [[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\", \"$1 $2 $3\", [\"1\"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, [\"10\\\\d{10}\"]]],\n    \"881\": [\"881\", 0, \"[0-36-9]\\\\d{8}\", [9], [[\"(\\\\d)(\\\\d{3})(\\\\d{5})\", \"$1 $2 $3\", [\"[0-36-9]\"]]], 0, 0, 0, 0, 0, 0, [0, [\"[0-36-9]\\\\d{8}\"]]],\n    \"882\": [\"882\", 0, \"[13]\\\\d{6}(?:\\\\d{2,5})?|285\\\\d{9}|(?:[19]\\\\d|49)\\\\d{6}\", [7, 8, 9, 10, 11, 12], [[\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"16|342\"]], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"4\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"[19]\"]], [\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\", \"$1 $2 $3\", [\"3[23]\"]], [\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"]], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"34[57]\"]], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"34\"]], [\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\", \"$1 $2 $3\", [\"[1-3]\"]]], 0, 0, 0, 0, 0, 0, [0, [\"342\\\\d{4}|(?:337|49)\\\\d{6}|3(?:2|47|7\\\\d{3})\\\\d{7}\", [7, 8, 9, 10, 12]], 0, 0, 0, 0, 0, 0, [\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:(?:285\\\\d\\\\d|3(?:45|[69]\\\\d{3}))\\\\d|9[89])\\\\d{6}\"]]],\n    \"883\": [\"883\", 0, \"(?:210|370\\\\d\\\\d)\\\\d{7}|51\\\\d{7}(?:\\\\d{3})?\", [9, 10, 12], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"510\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"2\"]], [\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"51[13]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"[35]\"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, [\"(?:210|(?:370[1-9]|51[013]0)\\\\d)\\\\d{7}|5100\\\\d{5}\"]]],\n    \"888\": [\"888\", 0, \"\\\\d{11}\", [11], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\", \"$1 $2 $3\"]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, [\"\\\\d{11}\"]]],\n    \"979\": [\"979\", 0, \"[1359]\\\\d{8}\", [9], [[\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[1359]\"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, [\"[1359]\\\\d{8}\"]]]\n  }\n};","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n} // https://stackoverflow.com/a/46971044/970769\n// \"Breaking changes in Typescript 2.1\"\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n\nvar ParseError = /*#__PURE__*/function (_Error) {\n  _inherits(ParseError, _Error);\n\n  var _super = _createSuper(ParseError);\n\n  function ParseError(code) {\n    var _this;\n\n    _classCallCheck(this, ParseError);\n\n    _this = _super.call(this, code); // Set the prototype explicitly.\n    // Any subclass of FooError will have to manually set the prototype as well.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError.prototype);\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n\n  return _createClass(ParseError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexport { ParseError as default };","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport compare from './tools/semver-compare.js'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n      // The test case could be found by searching for \"nonGeographical\".\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        // In that metadata, there was no concept of \"non-geographic\" metadata\n        // so metadata for `001` country code was stored along with other countries.\n        // The test case can be found by searching for:\n        // \"should work around `nonGeographic` metadata not existing\".\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // \"possible length\" data is always present in Google's metadata.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }","import { VALID_DIGITS } from '../../constants.js'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants.js';\nimport createExtensionPattern from './extension/createExtensionPattern.js'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){1,2}' + '$', 'i');\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nexport function isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}","import createExtensionPattern from './createExtensionPattern.js'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n} // These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\n\n\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { parseDigit } from './helpers/parseDigits.js';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\n\n\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = _createForOfIteratorHelperLoose(b), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}","import mergeArrays from './mergeArrays.js';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}","import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}","function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport isViablePhoneNumber from './isViablePhoneNumber.js'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = _createForOfIteratorHelperLoose(text.split(';')), _step; !(_step = _iterator()).done;) {\n    var part = _step.value;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref) {\n  var number = _ref.number,\n      ext = _ref.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\n    // For example, for \"US\" country.\n    // Old metadata (< `1.0.18`) had a specific \"types\" data structure\n    // that happened to be `undefined` for `MOBILE` in that case.\n    // Newer metadata (>= `1.0.18`) has another data structure that is\n    // not `undefined` for `MOBILE` in that case (it's just an empty array).\n    // So this `if` is just for backwards compatibility with old metadata.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {\n    var type = _step.value;\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}","import { VALID_PUNCTUATION } from '../constants.js'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}","import Metadata from '../metadata.js';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nimport Metadata, { getCountryCallingCode } from './metadata.js';\nimport getIddPrefix from './helpers/getIddPrefix.js';\nimport { formatRFC3966 } from './helpers/RFC3966.js';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  }\n}; // Formats a phone number\n//\n// Example use cases:\n//\n// ```js\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n// formatNumber('+78005553535', 'NATIONAL')\n// formatNumber('+78005553535', 'NATIONAL', metadata)\n// ```\n//\n\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {\n    var format = _step.value; // Validate leading digits.\n    // The test case for \"else path\" could be found by searching for\n    // \"format.leadingDigitsPatterns().length === 0\".\n\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}","function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport Metadata from './metadata.js';\nimport isPossibleNumber from './isPossibleNumber_.js';\nimport isValidNumber from './validate_.js';\nimport isValidNumberForRegion from './isValidNumberForRegion_.js';\nimport getNumberType from './helpers/getNumberType.js';\nimport formatNumber from './format_.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber = /*#__PURE__*/function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};","import Metadata from './metadata.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport getNumberType from './helpers/getNumberType.js';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}","import Metadata from '../metadata.js';\nimport { VALID_DIGITS } from '../constants.js';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n        // then carrier code is the first one.\n\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport checkNumberLength from './checkNumberLength.js';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n      carrierCode = _extractNationalNumbe.carrierCode,\n      nationalNumber = _extractNationalNumbe.nationalNumber;\n\n  if (nationalNumber !== number) {\n    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\n      // Don't strip the national prefix.\n      return {\n        nationalNumber: number\n      };\n    } // Check the national (significant) number length after extracting national prefix and carrier code.\n    // Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\n\n\n    if (metadata.possibleLengths()) {\n      // The number remaining after stripping the national prefix and carrier code\n      // should be long enough to have a possible length for the country.\n      // Otherwise, don't strip the national prefix and carrier code,\n      // since the original number could be a valid number.\n      // This check has been copy-pasted \"as is\" from Google's original library:\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      // It doesn't check for the \"possibility\" of the original `number`.\n      // I guess it's fine not checking that one. It works as is anyway.\n      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\n        // Don't strip the national prefix.\n        return {\n          nationalNumber: number\n        };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\n    return false;\n  } // This \"is possible\" national number (length) check has been commented out\n  // because it's superceded by the (effectively) same check done in the\n  // `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\n  // In other words, why run the same check twice if it could only be run once.\n  // // Check the national (significant) number length after extracting national prefix and carrier code.\n  // // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\n  // // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\n  // if (metadata.possibleLengths()) {\n  // \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\n  // \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\n  // \t\treturn false\n  // \t}\n  // }\n\n\n  return true;\n}\n\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'TOO_SHORT':\n    case 'INVALID_LENGTH':\n      // This library ignores \"local-only\" phone numbers (for simplicity).\n      // See the readme for more info on what are \"local-only\" phone numbers.\n      // case 'IS_POSSIBLE_LOCAL_ONLY':\n      return false;\n\n    default:\n      return true;\n  }\n}","import Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport extractNationalNumber from './extractNationalNumber.js';\nimport checkNumberLength from './checkNumberLength.js';\nimport getCountryCallingCode from '../getCountryCallingCode.js';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}","import stripIddPrefix from './stripIddPrefix.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport Metadata from '../metadata.js';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport Metadata from '../metadata.js';\nimport getNumberType from './getNumberType.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(possibleCountries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country); // Leading digits check would be the simplest and fastest one.\n    // Leading digits patterns are only defined for about 20% of all countries.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // Matching \"leading digits\" is a sufficient but not necessary condition.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      return country;\n    }\n  }\n}","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants.js';\nimport ParseError from './ParseError.js';\nimport Metadata from './metadata.js';\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js';\nimport extractExtension from './helpers/extension/extractExtension.js';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js';\nimport getCountryCallingCode from './getCountryCallingCode.js';\nimport { isPossibleNumber } from './isPossibleNumber_.js';\nimport { parseRFC3966 } from './helpers/RFC3966.js';\nimport PhoneNumber from './PhoneNumber.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport extractNationalNumber from './helpers/extractNationalNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext,\n      error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError('TOO_SHORT');\n      }\n\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  }\n\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2, extract) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, extract, v2); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n\n  if (!isViablePhoneNumber(number)) {\n    if (isViablePhoneNumberStart(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n\n    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n  } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}","function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport parseNumber from './parse_.js';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _objectSpread(_objectSpread({}, options), {}, {\n    v2: true\n  }), metadata);\n}","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport parsePhoneNumber_ from './parsePhoneNumber_.js';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};","function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport parsePhoneNumber from './parsePhoneNumber_.js';\nimport ParseError from './ParseError.js';\nimport { isSupportedCountry } from './metadata.js';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}","import { normalizeArguments } from './parsePhoneNumber.js';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_.js';\nexport default function parsePhoneNumberFromString() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumberFromString_(text, options, metadata);\n}","import Metadata from './metadata.js';\nexport default function getCountries(metadata) {\n  return new Metadata(metadata).getCountries();\n}","export default {\n  \"ext\": \"ext.\",\n  \"country\": \"Phone number country\",\n  \"phone\": \"Phone\",\n  \"AB\": \"Abkhazia\",\n  \"AC\": \"Ascension Island\",\n  \"AD\": \"Andorra\",\n  \"AE\": \"United Arab Emirates\",\n  \"AF\": \"Afghanistan\",\n  \"AG\": \"Antigua and Barbuda\",\n  \"AI\": \"Anguilla\",\n  \"AL\": \"Albania\",\n  \"AM\": \"Armenia\",\n  \"AO\": \"Angola\",\n  \"AQ\": \"Antarctica\",\n  \"AR\": \"Argentina\",\n  \"AS\": \"American Samoa\",\n  \"AT\": \"Austria\",\n  \"AU\": \"Australia\",\n  \"AW\": \"Aruba\",\n  \"AX\": \"Åland Islands\",\n  \"AZ\": \"Azerbaijan\",\n  \"BA\": \"Bosnia and Herzegovina\",\n  \"BB\": \"Barbados\",\n  \"BD\": \"Bangladesh\",\n  \"BE\": \"Belgium\",\n  \"BF\": \"Burkina Faso\",\n  \"BG\": \"Bulgaria\",\n  \"BH\": \"Bahrain\",\n  \"BI\": \"Burundi\",\n  \"BJ\": \"Benin\",\n  \"BL\": \"Saint Barthélemy\",\n  \"BM\": \"Bermuda\",\n  \"BN\": \"Brunei Darussalam\",\n  \"BO\": \"Bolivia\",\n  \"BQ\": \"Bonaire, Sint Eustatius and Saba\",\n  \"BR\": \"Brazil\",\n  \"BS\": \"Bahamas\",\n  \"BT\": \"Bhutan\",\n  \"BV\": \"Bouvet Island\",\n  \"BW\": \"Botswana\",\n  \"BY\": \"Belarus\",\n  \"BZ\": \"Belize\",\n  \"CA\": \"Canada\",\n  \"CC\": \"Cocos (Keeling) Islands\",\n  \"CD\": \"Congo, Democratic Republic of the\",\n  \"CF\": \"Central African Republic\",\n  \"CG\": \"Congo\",\n  \"CH\": \"Switzerland\",\n  \"CI\": \"Cote d'Ivoire\",\n  \"CK\": \"Cook Islands\",\n  \"CL\": \"Chile\",\n  \"CM\": \"Cameroon\",\n  \"CN\": \"China\",\n  \"CO\": \"Colombia\",\n  \"CR\": \"Costa Rica\",\n  \"CU\": \"Cuba\",\n  \"CV\": \"Cape Verde\",\n  \"CW\": \"Curaçao\",\n  \"CX\": \"Christmas Island\",\n  \"CY\": \"Cyprus\",\n  \"CZ\": \"Czech Republic\",\n  \"DE\": \"Germany\",\n  \"DJ\": \"Djibouti\",\n  \"DK\": \"Denmark\",\n  \"DM\": \"Dominica\",\n  \"DO\": \"Dominican Republic\",\n  \"DZ\": \"Algeria\",\n  \"EC\": \"Ecuador\",\n  \"EE\": \"Estonia\",\n  \"EG\": \"Egypt\",\n  \"EH\": \"Western Sahara\",\n  \"ER\": \"Eritrea\",\n  \"ES\": \"Spain\",\n  \"ET\": \"Ethiopia\",\n  \"FI\": \"Finland\",\n  \"FJ\": \"Fiji\",\n  \"FK\": \"Falkland Islands\",\n  \"FM\": \"Federated States of Micronesia\",\n  \"FO\": \"Faroe Islands\",\n  \"FR\": \"France\",\n  \"GA\": \"Gabon\",\n  \"GB\": \"United Kingdom\",\n  \"GD\": \"Grenada\",\n  \"GE\": \"Georgia\",\n  \"GF\": \"French Guiana\",\n  \"GG\": \"Guernsey\",\n  \"GH\": \"Ghana\",\n  \"GI\": \"Gibraltar\",\n  \"GL\": \"Greenland\",\n  \"GM\": \"Gambia\",\n  \"GN\": \"Guinea\",\n  \"GP\": \"Guadeloupe\",\n  \"GQ\": \"Equatorial Guinea\",\n  \"GR\": \"Greece\",\n  \"GS\": \"South Georgia and the South Sandwich Islands\",\n  \"GT\": \"Guatemala\",\n  \"GU\": \"Guam\",\n  \"GW\": \"Guinea-Bissau\",\n  \"GY\": \"Guyana\",\n  \"HK\": \"Hong Kong\",\n  \"HM\": \"Heard Island and McDonald Islands\",\n  \"HN\": \"Honduras\",\n  \"HR\": \"Croatia\",\n  \"HT\": \"Haiti\",\n  \"HU\": \"Hungary\",\n  \"ID\": \"Indonesia\",\n  \"IE\": \"Ireland\",\n  \"IL\": \"Israel\",\n  \"IM\": \"Isle of Man\",\n  \"IN\": \"India\",\n  \"IO\": \"British Indian Ocean Territory\",\n  \"IQ\": \"Iraq\",\n  \"IR\": \"Iran\",\n  \"IS\": \"Iceland\",\n  \"IT\": \"Italy\",\n  \"JE\": \"Jersey\",\n  \"JM\": \"Jamaica\",\n  \"JO\": \"Jordan\",\n  \"JP\": \"Japan\",\n  \"KE\": \"Kenya\",\n  \"KG\": \"Kyrgyzstan\",\n  \"KH\": \"Cambodia\",\n  \"KI\": \"Kiribati\",\n  \"KM\": \"Comoros\",\n  \"KN\": \"Saint Kitts and Nevis\",\n  \"KP\": \"North Korea\",\n  \"KR\": \"South Korea\",\n  \"KW\": \"Kuwait\",\n  \"KY\": \"Cayman Islands\",\n  \"KZ\": \"Kazakhstan\",\n  \"LA\": \"Laos\",\n  \"LB\": \"Lebanon\",\n  \"LC\": \"Saint Lucia\",\n  \"LI\": \"Liechtenstein\",\n  \"LK\": \"Sri Lanka\",\n  \"LR\": \"Liberia\",\n  \"LS\": \"Lesotho\",\n  \"LT\": \"Lithuania\",\n  \"LU\": \"Luxembourg\",\n  \"LV\": \"Latvia\",\n  \"LY\": \"Libya\",\n  \"MA\": \"Morocco\",\n  \"MC\": \"Monaco\",\n  \"MD\": \"Moldova\",\n  \"ME\": \"Montenegro\",\n  \"MF\": \"Saint Martin (French Part)\",\n  \"MG\": \"Madagascar\",\n  \"MH\": \"Marshall Islands\",\n  \"MK\": \"North Macedonia\",\n  \"ML\": \"Mali\",\n  \"MM\": \"Burma\",\n  \"MN\": \"Mongolia\",\n  \"MO\": \"Macao\",\n  \"MP\": \"Northern Mariana Islands\",\n  \"MQ\": \"Martinique\",\n  \"MR\": \"Mauritania\",\n  \"MS\": \"Montserrat\",\n  \"MT\": \"Malta\",\n  \"MU\": \"Mauritius\",\n  \"MV\": \"Maldives\",\n  \"MW\": \"Malawi\",\n  \"MX\": \"Mexico\",\n  \"MY\": \"Malaysia\",\n  \"MZ\": \"Mozambique\",\n  \"NA\": \"Namibia\",\n  \"NC\": \"New Caledonia\",\n  \"NE\": \"Niger\",\n  \"NF\": \"Norfolk Island\",\n  \"NG\": \"Nigeria\",\n  \"NI\": \"Nicaragua\",\n  \"NL\": \"Netherlands\",\n  \"NO\": \"Norway\",\n  \"NP\": \"Nepal\",\n  \"NR\": \"Nauru\",\n  \"NU\": \"Niue\",\n  \"NZ\": \"New Zealand\",\n  \"OM\": \"Oman\",\n  \"OS\": \"South Ossetia\",\n  \"PA\": \"Panama\",\n  \"PE\": \"Peru\",\n  \"PF\": \"French Polynesia\",\n  \"PG\": \"Papua New Guinea\",\n  \"PH\": \"Philippines\",\n  \"PK\": \"Pakistan\",\n  \"PL\": \"Poland\",\n  \"PM\": \"Saint Pierre and Miquelon\",\n  \"PN\": \"Pitcairn\",\n  \"PR\": \"Puerto Rico\",\n  \"PS\": \"Palestine\",\n  \"PT\": \"Portugal\",\n  \"PW\": \"Palau\",\n  \"PY\": \"Paraguay\",\n  \"QA\": \"Qatar\",\n  \"RE\": \"Reunion\",\n  \"RO\": \"Romania\",\n  \"RS\": \"Serbia\",\n  \"RU\": \"Russia\",\n  \"RW\": \"Rwanda\",\n  \"SA\": \"Saudi Arabia\",\n  \"SB\": \"Solomon Islands\",\n  \"SC\": \"Seychelles\",\n  \"SD\": \"Sudan\",\n  \"SE\": \"Sweden\",\n  \"SG\": \"Singapore\",\n  \"SH\": \"Saint Helena\",\n  \"SI\": \"Slovenia\",\n  \"SJ\": \"Svalbard and Jan Mayen\",\n  \"SK\": \"Slovakia\",\n  \"SL\": \"Sierra Leone\",\n  \"SM\": \"San Marino\",\n  \"SN\": \"Senegal\",\n  \"SO\": \"Somalia\",\n  \"SR\": \"Suriname\",\n  \"SS\": \"South Sudan\",\n  \"ST\": \"Sao Tome and Principe\",\n  \"SV\": \"El Salvador\",\n  \"SX\": \"Sint Maarten\",\n  \"SY\": \"Syria\",\n  \"SZ\": \"Swaziland\",\n  \"TA\": \"Tristan da Cunha\",\n  \"TC\": \"Turks and Caicos Islands\",\n  \"TD\": \"Chad\",\n  \"TF\": \"French Southern Territories\",\n  \"TG\": \"Togo\",\n  \"TH\": \"Thailand\",\n  \"TJ\": \"Tajikistan\",\n  \"TK\": \"Tokelau\",\n  \"TL\": \"Timor-Leste\",\n  \"TM\": \"Turkmenistan\",\n  \"TN\": \"Tunisia\",\n  \"TO\": \"Tonga\",\n  \"TR\": \"Turkey\",\n  \"TT\": \"Trinidad and Tobago\",\n  \"TV\": \"Tuvalu\",\n  \"TW\": \"Taiwan\",\n  \"TZ\": \"Tanzania\",\n  \"UA\": \"Ukraine\",\n  \"UG\": \"Uganda\",\n  \"UM\": \"United States Minor Outlying Islands\",\n  \"US\": \"United States\",\n  \"UY\": \"Uruguay\",\n  \"UZ\": \"Uzbekistan\",\n  \"VA\": \"Holy See (Vatican City State)\",\n  \"VC\": \"Saint Vincent and the Grenadines\",\n  \"VE\": \"Venezuela\",\n  \"VG\": \"Virgin Islands, British\",\n  \"VI\": \"Virgin Islands, U.S.\",\n  \"VN\": \"Vietnam\",\n  \"VU\": \"Vanuatu\",\n  \"WF\": \"Wallis and Futuna\",\n  \"WS\": \"Samoa\",\n  \"XK\": \"Kosovo\",\n  \"YE\": \"Yemen\",\n  \"YT\": \"Mayotte\",\n  \"ZA\": \"South Africa\",\n  \"ZM\": \"Zambia\",\n  \"ZW\": \"Zimbabwe\",\n  \"ZZ\": \"International\"\n};","import PropTypes from 'prop-types';\nexport var metadata = PropTypes.shape({\n  country_calling_codes: PropTypes.object.isRequired,\n  countries: PropTypes.object.isRequired\n});\nexport var labels = PropTypes.objectOf(PropTypes.string);","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n} // Counts all occurences of a symbol in a string\n\n\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n}","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { count_occurences } from './helpers.js';\nimport close_braces from './closeBraces.js'; // Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\n\nexport default function (template) {\n  var placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var should_close_braces = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!template) {\n    return function (value) {\n      return {\n        text: value\n      };\n    };\n  }\n\n  var characters_in_template = count_occurences(placeholder, template);\n  return function (value) {\n    if (!value) {\n      return {\n        text: '',\n        template: template\n      };\n    }\n\n    var value_character_index = 0;\n    var filled_in_template = ''; // Using `.split('')` here instead of normal `for ... of`\n    // because the importing application doesn't neccessarily include an ES6 polyfill.\n    // The `.split('')` approach discards \"exotic\" UTF-8 characters\n    // (the ones consisting of four bytes)\n    // but template placeholder characters don't fall into that range\n    // and appending UTF-8 characters to a string in parts still works.\n\n    for (var _iterator = _createForOfIteratorHelperLoose(template.split('')), _step; !(_step = _iterator()).done;) {\n      var character = _step.value;\n\n      if (character !== placeholder) {\n        filled_in_template += character;\n        continue;\n      }\n\n      filled_in_template += value[value_character_index];\n      value_character_index++; // If the last available value character has been filled in,\n      // then return the filled in template\n      // (either trim the right part or retain it,\n      //  if no more character placeholders in there)\n\n      if (value_character_index === value.length) {\n        // If there are more character placeholders\n        // in the right part of the template\n        // then simply trim it.\n        if (value.length < characters_in_template) {\n          break;\n        }\n      }\n    }\n\n    if (should_close_braces) {\n      filled_in_template = close_braces(filled_in_template, template);\n    }\n\n    return {\n      text: filled_in_template,\n      template: template\n    };\n  };\n}","import { count_occurences } from './helpers.js';\nexport default function closeBraces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return retained_template;\n}","export function isReadOnly(element) {\n  return element.hasAttribute('readonly');\n} // Gets <input/> selection bounds\n\nexport function getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nexport var Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nexport function getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nexport function getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nexport function setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;","import edit from './edit.js';\nimport parse from './parse.js';\nimport format from './format.js';\nimport { isReadOnly, getOperation, getSelection, getCaretPosition, setCaretPosition } from './dom.js'; // Deprecated.\n// I don't know why this function exists.\n\nexport function onCut(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  } // The actual cut hasn't happened just yet hence the timeout.\n\n\n  setTimeout(function () {\n    return formatInputText(input, _parse, _format, undefined, on_change);\n  }, 0);\n} // Deprecated.\n// I don't know why this function exists.\n\nexport function onPaste(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  }\n\n  var selection = getSelection(input); // If selection is made,\n  // just erase the selected text\n  // prior to pasting\n\n  if (selection) {\n    eraseSelection(input, selection);\n  }\n\n  formatInputText(input, _parse, _format, undefined, on_change);\n}\nexport function onChange(event, input, _parse, _format, on_change) {\n  formatInputText(input, _parse, _format, undefined, on_change);\n} // \"Delete\" and \"Backspace\" keys are special\n// in a way that they're not handled by the regular `onChange()` handler\n// and instead are intercepted and re-applied manually.\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\n// results in erasing a character, but that character might be any character,\n// while it would be a better \"user experience\" if it erased not just any character\n// but the closest \"meaningful\" character.\n// For example, if a template is `(xxx) xxx-xxxx`,\n// and the `<input/>` value is `(111) 222-3333`,\n// then, if a user begins erasing the `3333` part via \"Backspace\"\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\n// Nothing wrong with that, but it would be a better \"user experience\"\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\n// character, which would be the rightmost `2`.\n// So, what this `onKeyDown()` handler does is it intercepts\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\n// following the logic described above.\n\nexport function onKeyDown(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  }\n\n  var operation = getOperation(event);\n\n  switch (operation) {\n    case 'Delete':\n    case 'Backspace':\n      // Intercept this operation and perform it manually.\n      event.preventDefault();\n      var selection = getSelection(input); // If a selection is made, just erase the selected text.\n\n      if (selection) {\n        eraseSelection(input, selection);\n        return formatInputText(input, _parse, _format, undefined, on_change);\n      } // Else, perform the (character erasing) operation manually.\n\n\n      return formatInputText(input, _parse, _format, operation, on_change);\n\n    default: // Will be handled normally as part of the `onChange` handler.\n\n  }\n}\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\n\nfunction eraseSelection(input, selection) {\n  var text = input.value;\n  text = text.slice(0, selection.start) + text.slice(selection.end);\n  input.value = text;\n  setCaretPosition(input, selection.start);\n}\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\n\n\nfunction formatInputText(input, _parse, _format, operation, on_change) {\n  // Parse `<input/>` textual value.\n  // Get the `value` and `caret` position.\n  var _parse2 = parse(input.value, getCaretPosition(input), _parse),\n      value = _parse2.value,\n      caret = _parse2.caret; // If a user performed an operation (\"Backspace\", \"Delete\")\n  // then apply that operation and get the new `value` and `caret` position.\n\n\n  if (operation) {\n    var newValueAndCaret = edit(value, caret, operation);\n    value = newValueAndCaret.value;\n    caret = newValueAndCaret.caret;\n  } // Format the `value`.\n  // (and reposition the caret accordingly)\n\n\n  var formatted = format(value, caret, _format);\n  var text = formatted.text;\n  caret = formatted.caret; // Set `<input/>` textual value manually\n  // to prevent React from resetting the caret position\n  // later inside a subsequent `render()`.\n  // Doesn't work for custom `inputComponent`s for some reason.\n\n  input.value = text; // Position the caret properly.\n\n  setCaretPosition(input, caret); // If the `<input/>` textual value did change,\n  // then the parsed `value` may have changed too.\n\n  on_change(value);\n}","// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nexport default function parse(text, caret_position, parse_character) {\n  var value = '';\n  var focused_input_character_index = 0;\n  var index = 0;\n\n  while (index < text.length) {\n    var character = parse_character(text[index], value);\n\n    if (character !== undefined) {\n      value += character;\n\n      if (caret_position !== undefined) {\n        if (caret_position === index) {\n          focused_input_character_index = value.length - 1;\n        } else if (caret_position > index) {\n          focused_input_character_index = value.length;\n        }\n      }\n    }\n\n    index++;\n  } // If caret position wasn't specified\n\n\n  if (caret_position === undefined) {\n    // Then set caret position to \"after the last input character\"\n    focused_input_character_index = value.length;\n  }\n\n  var result = {\n    value: value,\n    caret: focused_input_character_index\n  };\n  return result;\n}","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nexport default function edit(value, caret, operation) {\n  switch (operation) {\n    case 'Backspace':\n      // If there exists the previous character,\n      // then erase it and reposition the caret.\n      if (caret > 0) {\n        // Remove the previous character\n        value = value.slice(0, caret - 1) + value.slice(caret); // Position the caret where the previous (erased) character was\n\n        caret--;\n      }\n\n      break;\n\n    case 'Delete':\n      // Remove current digit (if any)\n      value = value.slice(0, caret) + value.slice(caret + 1);\n      break;\n  }\n\n  return {\n    value: value,\n    caret: caret\n  };\n}","import template_formatter from './templateFormatter.js'; // Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\n\nexport default function format(value, caret, formatter) {\n  if (typeof formatter === 'string') {\n    formatter = template_formatter(formatter);\n  }\n\n  var _ref = formatter(value) || {},\n      text = _ref.text,\n      template = _ref.template;\n\n  if (text === undefined) {\n    text = value;\n  }\n\n  if (template) {\n    if (caret === undefined) {\n      caret = text.length;\n    } else {\n      var index = 0;\n      var found = false;\n      var possibly_last_input_character_index = -1;\n\n      while (index < text.length && index < template.length) {\n        // Character placeholder found\n        if (text[index] !== template[index]) {\n          if (caret === 0) {\n            found = true;\n            caret = index;\n            break;\n          }\n\n          possibly_last_input_character_index = index;\n          caret--;\n        }\n\n        index++;\n      } // If the caret was positioned after last input character,\n      // then the text caret index is just after the last input character.\n\n\n      if (!found) {\n        caret = possibly_last_input_character_index + 1;\n      }\n    }\n  }\n\n  return {\n    text: text,\n    caret: caret\n  };\n}","var _excluded = [\"value\", \"parse\", \"format\", \"inputComponent\", \"onChange\", \"onKeyDown\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} // This is just `./ReactInput.js` rewritten in Hooks.\n\n\nimport React, { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { onChange as onInputChange, onKeyDown as onInputKeyDown } from '../inputControl.js'; // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nfunction Input(_ref, ref) {\n  var value = _ref.value,\n      parse = _ref.parse,\n      format = _ref.format,\n      InputComponent = _ref.inputComponent,\n      onChange = _ref.onChange,\n      onKeyDown = _ref.onKeyDown,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var internalRef = useRef();\n  var setRef = useCallback(function (instance) {\n    internalRef.current = instance;\n\n    if (ref) {\n      if (typeof ref === 'function') {\n        ref(instance);\n      } else {\n        ref.current = instance;\n      }\n    }\n  }, [ref]);\n\n  var _onChange = useCallback(function (event) {\n    return onInputChange(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange]);\n\n  var _onKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    return onInputKeyDown(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange, onKeyDown]);\n\n  return /*#__PURE__*/React.createElement(InputComponent, _extends({}, rest, {\n    ref: setRef,\n    value: format(isEmptyValue(value) ? '' : value).text,\n    onKeyDown: _onKeyDown,\n    onChange: _onChange\n  }));\n}\n\nInput = /*#__PURE__*/React.forwardRef(Input);\nInput.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: PropTypes.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: PropTypes.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: PropTypes.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: PropTypes.string.isRequired,\n  // Is parsed from <input/> text.\n  value: PropTypes.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: PropTypes.func.isRequired,\n  // Passthrough\n  onKeyDown: PropTypes.func,\n  onCut: PropTypes.func,\n  onPaste: PropTypes.func\n};\nInput.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n};\nexport default Input;\n\nfunction isEmptyValue(value) {\n  return value === undefined || value === null;\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nvar AsYouTypeState = /*#__PURE__*/function () {\n  function AsYouTypeState(_ref) {\n    var onCountryChange = _ref.onCountryChange,\n        onCallingCodeChange = _ref.onCallingCodeChange;\n\n    _classCallCheck(this, AsYouTypeState);\n\n    this.onCountryChange = onCountryChange;\n    this.onCallingCodeChange = onCallingCodeChange;\n  }\n\n  _createClass(AsYouTypeState, [{\n    key: \"reset\",\n    value: function reset(defaultCountry, defaultCallingCode) {\n      this.international = false;\n      this.IDDPrefix = undefined;\n      this.missingPlus = undefined;\n      this.callingCode = undefined;\n      this.digits = '';\n      this.resetNationalSignificantNumber();\n      this.initCountryAndCallingCode(defaultCountry, defaultCallingCode);\n    }\n  }, {\n    key: \"resetNationalSignificantNumber\",\n    value: function resetNationalSignificantNumber() {\n      this.nationalSignificantNumber = this.getNationalDigits();\n      this.nationalSignificantNumberMatchesInput = true;\n      this.nationalPrefix = undefined;\n      this.carrierCode = undefined;\n      this.complexPrefixBeforeNationalSignificantNumber = undefined;\n    }\n  }, {\n    key: \"update\",\n    value: function update(properties) {\n      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        this[key] = properties[key];\n      }\n    }\n  }, {\n    key: \"initCountryAndCallingCode\",\n    value: function initCountryAndCallingCode(country, callingCode) {\n      this.setCountry(country);\n      this.setCallingCode(callingCode);\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country) {\n      this.country = country;\n      this.onCountryChange(country);\n    }\n  }, {\n    key: \"setCallingCode\",\n    value: function setCallingCode(callingCode) {\n      this.callingCode = callingCode;\n      this.onCallingCodeChange(callingCode, this.country);\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(country, callingCode) {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.initCountryAndCallingCode(country, callingCode);\n    }\n  }, {\n    key: \"appendDigits\",\n    value: function appendDigits(nextDigits) {\n      this.digits += nextDigits;\n    }\n  }, {\n    key: \"appendNationalSignificantNumberDigits\",\n    value: function appendNationalSignificantNumberDigits(nextDigits) {\n      this.nationalSignificantNumber += nextDigits;\n    }\n    /**\r\n     * Returns the part of `this.digits` that corresponds to the national number.\r\n     * Basically, all digits that have been input by the user, except for the\r\n     * international prefix and the country calling code part\r\n     * (if the number is an international one).\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getNationalDigits\",\n    value: function getNationalDigits() {\n      if (this.international) {\n        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));\n      }\n\n      return this.digits;\n    }\n  }, {\n    key: \"getDigitsWithoutInternationalPrefix\",\n    value: function getDigitsWithoutInternationalPrefix() {\n      if (this.international) {\n        if (this.IDDPrefix) {\n          return this.digits.slice(this.IDDPrefix.length);\n        }\n      }\n\n      return this.digits;\n    }\n  }]);\n\n  return AsYouTypeState;\n}();\n\nexport { AsYouTypeState as default };","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n} // Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\n\n\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nexport function closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n}\nexport function stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i = 0, _dangling_braces = dangling_braces; _i < _dangling_braces.length; _i++) {\n    var index = _dangling_braces[_i];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function populateTemplateWithDigits(template, position, digits) {\n  // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for `digits` it is safe.\n  // for (const digit of digits)\n  for (var _iterator2 = _createForOfIteratorHelperLoose(digits.split('')), _step2; !(_step2 = _iterator2()).done;) {\n    var digit = _step2.value; // If there is room for more digits in current `template`,\n    // then set the next digit in the `template`,\n    // and return the formatted digits so far.\n    // If more digits are entered than the current format could handle.\n\n    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n      return;\n    }\n\n    position = template.search(DIGIT_PLACEHOLDER_MATCHER);\n    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n  }\n\n  return [template, position];\n}","import checkNumberLength from './helpers/checkNumberLength.js';\nimport parseDigits from './helpers/parseDigits.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nexport default function formatCompleteNumber(state, format, _ref) {\n  var metadata = _ref.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;\n  var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n\n  if (matcher.test(state.nationalSignificantNumber)) {\n    return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\n      metadata: metadata,\n      shouldTryNationalPrefixFormattingRule: shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix\n    });\n  }\n}\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\n  return checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE';\n}\n\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {\n  var metadata = _ref2.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix; // `format` has already been checked for `nationalPrefix` requirement.\n\n  var nationalSignificantNumber = state.nationalSignificantNumber,\n      international = state.international,\n      nationalPrefix = state.nationalPrefix,\n      carrierCode = state.carrierCode; // Format the number with using `national_prefix_formatting_rule`.\n  // If the resulting formatted number is a valid formatted number, then return it.\n  //\n  // Google's AsYouType formatter is different in a way that it doesn't try\n  // to format using the \"national prefix formatting rule\", and instead it\n  // simply prepends a national prefix followed by a \" \" character.\n  // This code does that too, but as a fallback.\n  // The reason is that \"national prefix formatting rule\" may use parentheses,\n  // which wouldn't be included has it used the simpler Google's way.\n  //\n\n  if (shouldTryNationalPrefixFormattingRule(format)) {\n    var formattedNumber = formatNationalNumber(state, format, {\n      useNationalPrefixFormattingRule: true,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n      metadata: metadata\n    });\n\n    if (formattedNumber) {\n      return formattedNumber;\n    }\n  } // Format the number without using `national_prefix_formatting_rule`.\n\n\n  return formatNationalNumber(state, format, {\n    useNationalPrefixFormattingRule: false,\n    getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n    metadata: metadata\n  });\n}\n\nfunction formatNationalNumber(state, format, _ref3) {\n  var metadata = _ref3.metadata,\n      useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;\n  var formattedNationalNumber = formatNationalNumberUsingFormat(state.nationalSignificantNumber, format, {\n    carrierCode: state.carrierCode,\n    useInternationalFormat: state.international,\n    withNationalPrefix: useNationalPrefixFormattingRule,\n    metadata: metadata\n  });\n\n  if (!useNationalPrefixFormattingRule) {\n    if (state.nationalPrefix) {\n      // If a national prefix was extracted, then just prepend it,\n      // followed by a \" \" character.\n      formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n    } else if (state.complexPrefixBeforeNationalSignificantNumber) {\n      formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + ' ' + formattedNationalNumber;\n    }\n  }\n\n  if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\n    return formattedNationalNumber;\n  }\n} // Check that the formatted phone number contains exactly\n// the same digits that have been input by the user.\n// For example, when \"0111523456789\" is input for `AR` country,\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\n// which means that the national part of `this.digits` isn't simply equal to\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\n//\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\n// being formatted via `metadata[country].national_prefix_transform_rule`.\n// For example, for `VI` country, it prepends `340` to the national number,\n// and if this check hasn't been implemented, then there would be a bug\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\n//\n// So, all these \"gotchas\" are filtered out.\n//\n// In the original Google's code, the comments say:\n// \"Check that we didn't remove nor add any extra digits when we matched\n// this formatting pattern. This usually happens after we entered the last\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n// formatted but AYTF should retain all the number entered and not change\n// in order to match a format (of same leading digits and length) display\n// in that way.\"\n// \"If it's the same (i.e entered number and format is same), then it's\n// safe to return this in formatted number as nothing is lost / added.\"\n// Otherwise, don't use this format.\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n//\n\n\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\n  return parseDigits(formattedNationalNumber) === state.getNationalDigits();\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nvar PatternParser = /*#__PURE__*/function () {\n  function PatternParser() {\n    _classCallCheck(this, PatternParser);\n  }\n\n  _createClass(PatternParser, [{\n    key: \"parse\",\n    value: function parse(pattern) {\n      this.context = [{\n        or: true,\n        instructions: []\n      }];\n      this.parsePattern(pattern);\n\n      if (this.context.length !== 1) {\n        throw new Error('Non-finalized contexts left when pattern parse ended');\n      }\n\n      var _this$context$ = this.context[0],\n          branches = _this$context$.branches,\n          instructions = _this$context$.instructions;\n\n      if (branches) {\n        return {\n          op: '|',\n          args: branches.concat([expandSingleElementArray(instructions)])\n        };\n      }\n      /* istanbul ignore if */\n\n\n      if (instructions.length === 0) {\n        throw new Error('Pattern is required');\n      }\n\n      if (instructions.length === 1) {\n        return instructions[0];\n      }\n\n      return instructions;\n    }\n  }, {\n    key: \"startContext\",\n    value: function startContext(context) {\n      this.context.push(context);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.context.pop();\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.context[this.context.length - 1];\n    }\n  }, {\n    key: \"parsePattern\",\n    value: function parsePattern(pattern) {\n      if (!pattern) {\n        throw new Error('Pattern is required');\n      }\n\n      var match = pattern.match(OPERATOR);\n\n      if (!match) {\n        if (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\n          throw new Error(\"Illegal characters found in a pattern: \".concat(pattern));\n        }\n\n        this.getContext().instructions = this.getContext().instructions.concat(pattern.split(''));\n        return;\n      }\n\n      var operator = match[1];\n      var before = pattern.slice(0, match.index);\n      var rightPart = pattern.slice(match.index + operator.length);\n\n      switch (operator) {\n        case '(?:':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            or: true,\n            instructions: [],\n            branches: []\n          });\n          break;\n\n        case ')':\n          if (!this.getContext().or) {\n            throw new Error('\")\" operator must be preceded by \"(?:\" operator');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          if (this.getContext().instructions.length === 0) {\n            throw new Error('No instructions found after \"|\" operator in an \"or\" group');\n          }\n\n          var _this$getContext = this.getContext(),\n              branches = _this$getContext.branches;\n\n          branches.push(expandSingleElementArray(this.getContext().instructions));\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '|',\n            args: branches\n          });\n          break;\n\n        case '|':\n          if (!this.getContext().or) {\n            throw new Error('\"|\" operator can only be used inside \"or\" groups');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          } // The top-level is an implicit \"or\" group, if required.\n\n\n          if (!this.getContext().branches) {\n            // `branches` are not defined only for the root implicit \"or\" operator.\n\n            /* istanbul ignore else */\n            if (this.context.length === 1) {\n              this.getContext().branches = [];\n            } else {\n              throw new Error('\"branches\" not found in an \"or\" group context');\n            }\n          }\n\n          this.getContext().branches.push(expandSingleElementArray(this.getContext().instructions));\n          this.getContext().instructions = [];\n          break;\n\n        case '[':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            oneOfSet: true\n          });\n          break;\n\n        case ']':\n          if (!this.getContext().oneOfSet) {\n            throw new Error('\"]\" operator must be preceded by \"[\" operator');\n          }\n\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '[]',\n            args: parseOneOfSet(before)\n          });\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error(\"Unknown operator: \".concat(operator));\n      }\n\n      if (rightPart) {\n        this.parsePattern(rightPart);\n      }\n    }\n  }]);\n\n  return PatternParser;\n}();\n\nexport { PatternParser as default };\n\nfunction parseOneOfSet(pattern) {\n  var values = [];\n  var i = 0;\n\n  while (i < pattern.length) {\n    if (pattern[i] === '-') {\n      if (i === 0 || i === pattern.length - 1) {\n        throw new Error(\"Couldn't parse a one-of set pattern: \".concat(pattern));\n      }\n\n      var prevValue = pattern[i - 1].charCodeAt(0) + 1;\n      var nextValue = pattern[i + 1].charCodeAt(0) - 1;\n      var value = prevValue;\n\n      while (value <= nextValue) {\n        values.push(String.fromCharCode(value));\n        value++;\n      }\n    } else {\n      values.push(pattern[i]);\n    }\n\n    i++;\n  }\n\n  return values;\n}\n\nvar ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/;\nvar OPERATOR = new RegExp( // any of:\n'(' + // or operator\n'\\\\|' + // or\n'|' + // or group start\n'\\\\(\\\\?\\\\:' + // or\n'|' + // or group end\n'\\\\)' + // or\n'|' + // one-of set start\n'\\\\[' + // or\n'|' + // one-of set end\n'\\\\]' + ')');\n\nfunction expandSingleElementArray(array) {\n  if (array.length === 1) {\n    return array[0];\n  }\n\n  return array;\n}","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport PatternParser from './AsYouTypeFormatter.PatternParser.js';\n\nvar PatternMatcher = /*#__PURE__*/function () {\n  function PatternMatcher(pattern) {\n    _classCallCheck(this, PatternMatcher);\n\n    this.matchTree = new PatternParser().parse(pattern);\n  }\n\n  _createClass(PatternMatcher, [{\n    key: \"match\",\n    value: function match(string) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          allowOverflow = _ref.allowOverflow;\n\n      if (!string) {\n        throw new Error('String is required');\n      }\n\n      var result = _match(string.split(''), this.matchTree, true);\n\n      if (result && result.match) {\n        delete result.matchedChars;\n      }\n\n      if (result && result.overflow) {\n        if (!allowOverflow) {\n          return;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return PatternMatcher;\n}();\n/**\r\n * Matches `characters` against a pattern compiled into a `tree`.\r\n * @param  {string[]} characters\r\n * @param  {Tree} tree — A pattern compiled into a `tree`. See the `*.d.ts` file for the description of the `tree` structure.\r\n * @param  {boolean} last — Whether it's the last (rightmost) subtree on its level of the match tree.\r\n * @return {object} See the `*.d.ts` file for the description of the result object.\r\n */\n\n\nexport { PatternMatcher as default };\n\nfunction _match(characters, tree, last) {\n  // If `tree` is a string, then `tree` is a single character.\n  // That's because when a pattern is parsed, multi-character-string parts\n  // of a pattern are compiled into arrays of single characters.\n  // I still wrote this piece of code for a \"general\" hypothetical case\n  // when `tree` could be a string of several characters, even though\n  // such case is not possible with the current implementation.\n  if (typeof tree === 'string') {\n    var characterString = characters.join('');\n\n    if (tree.indexOf(characterString) === 0) {\n      // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore else */\n      if (characters.length === tree.length) {\n        return {\n          match: true,\n          matchedChars: characters\n        };\n      } // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore next */\n\n\n      return {\n        partialMatch: true // matchedChars: characters\n\n      };\n    }\n\n    if (characterString.indexOf(tree) === 0) {\n      if (last) {\n        // The `else` path is not possible because `tree` is always a single character.\n        // The `else` case for `characters.length > tree.length` would be\n        // `characters.length <= tree.length` which means `characters.length <= 1`.\n        // `characters` array can't be empty, so that means `characters === [tree]`,\n        // which would also mean `tree.indexOf(characterString) === 0` and that'd mean\n        // that the `if (tree.indexOf(characterString) === 0)` condition before this\n        // `if` condition would be entered, and returned from there, not reaching this code.\n\n        /* istanbul ignore else */\n        if (characters.length > tree.length) {\n          return {\n            overflow: true\n          };\n        }\n      }\n\n      return {\n        match: true,\n        matchedChars: characters.slice(0, tree.length)\n      };\n    }\n\n    return;\n  }\n\n  if (Array.isArray(tree)) {\n    var restCharacters = characters.slice();\n    var i = 0;\n\n    while (i < tree.length) {\n      var subtree = tree[i];\n\n      var result = _match(restCharacters, subtree, last && i === tree.length - 1);\n\n      if (!result) {\n        return;\n      } else if (result.overflow) {\n        return result;\n      } else if (result.match) {\n        // Continue with the next subtree with the rest of the characters.\n        restCharacters = restCharacters.slice(result.matchedChars.length);\n\n        if (restCharacters.length === 0) {\n          if (i === tree.length - 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          } else {\n            return {\n              partialMatch: true // matchedChars: characters\n\n            };\n          }\n        }\n      } else {\n        /* istanbul ignore else */\n        if (result.partialMatch) {\n          return {\n            partialMatch: true // matchedChars: characters\n\n          };\n        } else {\n          throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(result, null, 2)));\n        }\n      }\n\n      i++;\n    } // If `last` then overflow has already been checked\n    // by the last element of the `tree` array.\n\n    /* istanbul ignore if */\n\n\n    if (last) {\n      return {\n        overflow: true\n      };\n    }\n\n    return {\n      match: true,\n      matchedChars: characters.slice(0, characters.length - restCharacters.length)\n    };\n  }\n\n  switch (tree.op) {\n    case '|':\n      var partialMatch;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(tree.args), _step; !(_step = _iterator()).done;) {\n        var branch = _step.value;\n\n        var _result = _match(characters, branch, last);\n\n        if (_result) {\n          if (_result.overflow) {\n            return _result;\n          } else if (_result.match) {\n            return {\n              match: true,\n              matchedChars: _result.matchedChars\n            };\n          } else {\n            /* istanbul ignore else */\n            if (_result.partialMatch) {\n              partialMatch = true;\n            } else {\n              throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(_result, null, 2)));\n            }\n          }\n        }\n      }\n\n      if (partialMatch) {\n        return {\n          partialMatch: true // matchedChars: ...\n\n        };\n      } // Not even a partial match.\n\n\n      return;\n\n    case '[]':\n      for (var _iterator2 = _createForOfIteratorHelperLoose(tree.args), _step2; !(_step2 = _iterator2()).done;) {\n        var _char = _step2.value;\n\n        if (characters[0] === _char) {\n          if (characters.length === 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          }\n\n          if (last) {\n            return {\n              overflow: true\n            };\n          }\n\n          return {\n            match: true,\n            matchedChars: [_char]\n          };\n        }\n      } // No character matches.\n\n\n      return;\n\n    /* istanbul ignore next */\n\n    default:\n      throw new Error(\"Unsupported instruction tree: \".concat(tree));\n  }\n}","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport { DIGIT_PLACEHOLDER, countOccurences, repeat, cutAndStripNonPairedParens, closeNonPairedParens, stripNonPairedParens, populateTemplateWithDigits } from './AsYouTypeFormatter.util.js';\nimport formatCompleteNumber, { canFormatCompleteNumber } from './AsYouTypeFormatter.complete.js';\nimport PatternMatcher from './AsYouTypeFormatter.PatternMatcher.js';\nimport parseDigits from './helpers/parseDigits.js';\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util.js';\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat.js';\nimport { VALID_PUNCTUATION } from './constants.js';\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle.js'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A regular expression that is used to determine if a `format` is\n// suitable to be used in the \"as you type formatter\".\n// A `format` is suitable when the resulting formatted number has\n// the same digits as the user has entered.\n//\n// In the simplest case, that would mean that the format\n// doesn't add any additional digits when formatting a number.\n// Google says that it also shouldn't add \"star\" (`*`) characters,\n// like it does in some Israeli formats.\n// Such basic format would only contain \"valid punctuation\"\n// and \"captured group\" identifiers ($1, $2, etc).\n//\n// An example of a format that adds additional digits:\n//\n// Country: `AR` (Argentina).\n// Format:\n// {\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n//    \"leading_digits_patterns\": [\"91\"],\n//    \"national_prefix_formatting_rule\": \"0$1\",\n//    \"format\": \"$2 15-$3-$4\",\n//    \"international_format\": \"$1 $2 $3-$4\"\n// }\n//\n// In the format above, the `format` adds `15` to the digits when formatting a number.\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\n// has previously removed `15` from a national number, so re-adding `15` in `format`\n// doesn't actually result in any extra digits added to user's input.\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\n//\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\n// `libphonenumber` code.\n//\n\n\nvar NON_ALTERING_FORMAT_REG_EXP = new RegExp('[' + VALID_PUNCTUATION + ']*' + // Google developers say:\n// \"We require that the first matching group is present in the\n//  output pattern to ensure no data is lost while formatting.\"\n'\\\\$1' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)*' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar AsYouTypeFormatter = /*#__PURE__*/function () {\n  function AsYouTypeFormatter(_ref) {\n    var state = _ref.state,\n        metadata = _ref.metadata;\n\n    _classCallCheck(this, AsYouTypeFormatter);\n\n    this.metadata = metadata;\n    this.resetFormat();\n  }\n\n  _createClass(AsYouTypeFormatter, [{\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.nationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan, state) {\n      this.resetFormat();\n\n      if (numberingPlan) {\n        this.isNANP = numberingPlan.callingCode() === '1';\n        this.matchingFormats = numberingPlan.formats();\n\n        if (state.nationalSignificantNumber) {\n          this.narrowDownMatchingFormats(state);\n        }\n      } else {\n        this.isNANP = undefined;\n        this.matchingFormats = [];\n      }\n    }\n    /**\r\n     * Formats an updated phone number.\r\n     * @param  {string} nextDigits — Additional phone number digits.\r\n     * @param  {object} state — `AsYouType` state.\r\n     * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(nextDigits, state) {\n      var _this = this; // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNationalNumberWithNextDigits()`,\n      // which formats based on the chosen formatting pattern.\n      //\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`, so this library just follows it.\n      // Google's `libphonenumber` code doesn't explain in detail why does it\n      // attempt to format digits as a complete phone number\n      // instead of just going with a previoulsy (or newly) chosen `format`:\n      //\n      // \"Checks to see if there is an exact pattern match for these digits.\n      //  If so, we should use this instead of any other formatting template\n      //  whose leadingDigitsPattern also matches the input.\"\n      //\n\n\n      if (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(this.matchingFormats), _step; !(_step = _iterator()).done;) {\n          var format = _step.value;\n          var formattedCompleteNumber = formatCompleteNumber(state, format, {\n            metadata: this.metadata,\n            shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format) {\n              return _this.shouldTryNationalPrefixFormattingRule(format, {\n                international: state.international,\n                nationalPrefix: state.nationalPrefix\n              });\n            },\n            getSeparatorAfterNationalPrefix: function getSeparatorAfterNationalPrefix(format) {\n              return _this.getSeparatorAfterNationalPrefix(format);\n            }\n          });\n\n          if (formattedCompleteNumber) {\n            this.resetFormat();\n            this.chosenFormat = format;\n            this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state);\n            this.populatedNationalNumberTemplate = formattedCompleteNumber; // With a new formatting template, the matched position\n            // using the old template needs to be reset.\n\n            this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER);\n            return formattedCompleteNumber;\n          }\n        }\n      } // Format the digits as a partial (incomplete) phone number\n      // using the previously chosen formatting pattern (or a newly chosen one).\n\n\n      return this.formatNationalNumberWithNextDigits(nextDigits, state);\n    } // Formats the next phone number digits.\n\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits, state) {\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat(state);\n\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If it can format the next (current) digits\n          // using the previously chosen phone number format\n          // then return the updated formatted number.\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then re-format the national phone number part\n          // using the newly selected format.\n          return this.formatNextNationalNumberDigits(state.getNationalDigits());\n        }\n      }\n    }\n  }, {\n    key: \"narrowDownMatchingFormats\",\n    value: function narrowDownMatchingFormats(_ref2) {\n      var _this2 = this;\n\n      var nationalSignificantNumber = _ref2.nationalSignificantNumber,\n          nationalPrefix = _ref2.nationalPrefix,\n          international = _ref2.international;\n      var leadingDigits = nationalSignificantNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        return _this2.formatSuits(format, international, nationalPrefix) && _this2.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"formatSuits\",\n    value: function formatSuits(format, international, nationalPrefix) {\n      // When a prefix before a national (significant) number is\n      // simply a national prefix, then it's parsed as `this.nationalPrefix`.\n      // In more complex cases, a prefix before national (significant) number\n      // could include a national prefix as well as some \"capturing groups\",\n      // and in that case there's no info whether a national prefix has been parsed.\n      // If national prefix is not used when formatting a phone number\n      // using this format, but a national prefix has been entered by the user,\n      // and was extracted, then discard such phone number format.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\n      if (nationalPrefix && !format.usesNationalPrefix() && // !format.domesticCarrierCodeFormattingRule() &&\n      !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n        return false;\n      } // If national prefix is mandatory for this phone number format\n      // and there're no guarantees that a national prefix is present in user input\n      // then discard this phone number format as not suitable.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\n\n\n      if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"formatMatches\",\n    value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\n      var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n      // leading digits pattern then it fits.\n      // The test case could be found by searching for \"leadingDigitsPatternsCount === 0\".\n\n      if (leadingDigitsPatternsCount === 0) {\n        return true;\n      } // Start narrowing down the list of possible formats based on the leading digits.\n      // (only previously matched formats take part in the narrowing down process)\n      // `leading_digits_patterns` start with 3 digits min\n      // and then go up from there one digit at a time.\n\n\n      leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n      var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Google imposes a requirement on the leading digits\n      // to be minimum 3 digits long in order to be eligible\n      // for checking those with a leading digits pattern.\n      //\n      // Since `leading_digits_patterns` start with 3 digits min,\n      // Google's original `libphonenumber` library only starts\n      // excluding any non-matching formats only when the\n      // national number entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives.\n      //\n      // For example, when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n      //\n      // Also, `leading_digits_patterns` doesn't always correspond to a single\n      // digits count. For example, `60|8` pattern would already match `8`\n      // but the `60` part would require having at least two leading digits,\n      // so the whole pattern would require inputting two digits first in order to\n      // decide on whether it matches the input, even when the input is \"80\".\n      //\n      // This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\n      // even when there's only 1 or 2 digits of the national (significant) number.\n      // To do that, it uses a non-strict pattern matcher written specifically for that.\n      //\n\n      if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n        // Before leading digits < 3 matching was implemented:\n        // return true\n        //\n        // After leading digits < 3 matching was implemented:\n        try {\n          return new PatternMatcher(leadingDigitsPattern).match(leadingDigits, {\n            allowOverflow: true\n          }) !== undefined;\n        } catch (error)\n        /* istanbul ignore next */\n        {\n          // There's a slight possibility that there could be some undiscovered bug\n          // in the pattern matcher code. Since the \"leading digits < 3 matching\"\n          // feature is not \"essential\" for operation, it can fall back to the old way\n          // in case of any issues rather than halting the application's execution.\n          console.error(error);\n          return true;\n        }\n      } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\n      // available then use the usual regular expression matching.\n      //\n      // The whole pattern is wrapped in round brackets (`()`) because\n      // the pattern can use \"or\" operator (`|`) at the top level of the pattern.\n      //\n\n\n      return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format, international) {\n      return international ? format.internationalFormat() : format.format();\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat(state) {\n      var _this3 = this;\n\n      var _loop = function _loop() {\n        var format = _step2.value; // If this format is currently being used\n        // and is still suitable, then stick to it.\n\n        if (_this3.chosenFormat === format) {\n          return \"break\";\n        } // Sometimes, a formatting rule inserts additional digits in a phone number,\n        // and \"as you type\" formatter can't do that: it should only use the digits\n        // that the user has input.\n        //\n        // For example, in Argentina, there's a format for mobile phone numbers:\n        //\n        // {\n        //    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n        //    \"leading_digits_patterns\": [\"91\"],\n        //    \"national_prefix_formatting_rule\": \"0$1\",\n        //    \"format\": \"$2 15-$3-$4\",\n        //    \"international_format\": \"$1 $2 $3-$4\"\n        // }\n        //\n        // In that format, `international_format` is used instead of `format`\n        // because `format` inserts `15` in the formatted number,\n        // and `AsYouType` formatter should only use the digits\n        // the user has actually input, without adding any extra digits.\n        // In this case, it wouldn't make a difference, because the `15`\n        // is first stripped when applying `national_prefix_for_parsing`\n        // and then re-added when using `format`, so in reality it doesn't\n        // add any new digits to the number, but to detect that, the code\n        // would have to be more complex: it would have to try formatting\n        // the digits using the format and then see if any digits have\n        // actually been added or removed, and then, every time a new digit\n        // is input, it should re-check whether the chosen format doesn't\n        // alter the digits.\n        //\n        // Google's code doesn't go that far, and so does this library:\n        // it simply requires that a `format` doesn't add any additonal\n        // digits to user's input.\n        //\n        // Also, people in general should move from inputting phone numbers\n        // in national format (possibly with national prefixes)\n        // and use international phone number format instead:\n        // it's a logical thing in the modern age of mobile phones,\n        // globalization and the internet.\n        //\n\n        /* istanbul ignore if */\n\n\n        if (!NON_ALTERING_FORMAT_REG_EXP.test(_this3.getFormatFormat(format, state.international))) {\n          return \"continue\";\n        }\n\n        if (!_this3.createTemplateForFormat(format, state)) {\n          // Remove the format if it can't generate a template.\n          _this3.matchingFormats = _this3.matchingFormats.filter(function (_) {\n            return _ !== format;\n          });\n          return \"continue\";\n        }\n\n        _this3.chosenFormat = format;\n        return \"break\";\n      }; // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      //\n      // For some weird reason, `istanbul` says \"else path not taken\"\n      // for the `for of` line below. Supposedly that means that\n      // the loop doesn't ever go over the last element in the list.\n      // That's true because there always is `this.chosenFormat`\n      // when `this.matchingFormats` is non-empty.\n      // And, for some weird reason, it doesn't think that the case\n      // with empty `this.matchingFormats` qualifies for a valid \"else\" path.\n      // So simply muting this `istanbul` warning.\n      // It doesn't skip the contents of the `for of` loop,\n      // it just skips the `for of` line.\n      //\n\n      /* istanbul ignore next */\n\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.matchingFormats.slice()), _step2; !(_step2 = _iterator2()).done;) {\n        var _ret = _loop();\n\n        if (_ret === \"break\") break;\n        if (_ret === \"continue\") continue;\n      }\n\n      if (!this.chosenFormat) {\n        // No format matches the national (significant) phone number.\n        this.resetFormat();\n      }\n\n      return this.chosenFormat;\n    }\n  }, {\n    key: \"createTemplateForFormat\",\n    value: function createTemplateForFormat(format, state) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForFormat(format, state); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (template) {\n        this.setNationalNumberTemplate(template, state);\n        return true;\n      }\n    }\n  }, {\n    key: \"getSeparatorAfterNationalPrefix\",\n    value: function getSeparatorAfterNationalPrefix(format) {\n      // `US` metadata doesn't have a `national_prefix_formatting_rule`,\n      // so the `if` condition below doesn't apply to `US`,\n      // but in reality there shoudl be a separator\n      // between a national prefix and a national (significant) number.\n      // So `US` national prefix separator is a \"special\" \"hardcoded\" case.\n      if (this.isNANP) {\n        return ' ';\n      } // If a `format` has a `national_prefix_formatting_rule`\n      // and that rule has a separator after a national prefix,\n      // then it means that there should be a separator\n      // between a national prefix and a national (significant) number.\n\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      } // At this point, there seems to be no clear evidence that\n      // there should be a separator between a national prefix\n      // and a national (significant) number. So don't insert one.\n\n\n      return '';\n    }\n  }, {\n    key: \"getInternationalPrefixBeforeCountryCallingCode\",\n    value: function getInternationalPrefixBeforeCountryCallingCode(_ref3, options) {\n      var IDDPrefix = _ref3.IDDPrefix,\n          missingPlus = _ref3.missingPlus;\n\n      if (IDDPrefix) {\n        return options && options.spacing === false ? IDDPrefix : IDDPrefix + ' ';\n      }\n\n      if (missingPlus) {\n        return '';\n      }\n\n      return '+';\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(state) {\n      if (!this.template) {\n        return;\n      } // `this.template` holds the template for a \"complete\" phone number.\n      // The currently entered phone number is most likely not \"complete\",\n      // so trim all non-populated digits.\n\n\n      var index = -1;\n      var i = 0;\n      var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {\n        spacing: false\n      }) : '';\n\n      while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }, {\n    key: \"setNationalNumberTemplate\",\n    value: function setNationalNumberTemplate(template, state) {\n      this.nationalNumberTemplate = template;\n      this.populatedNationalNumberTemplate = template; // With a new formatting template, the matched position\n      // using the old template needs to be reset.\n\n      this.populatedNationalNumberTemplatePosition = -1; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (state.international) {\n        this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, state.callingCode.length) + ' ' + template;\n      } else {\n        this.template = template;\n      }\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplateForFormat\",\n    value: function getTemplateForFormat(format, _ref4) {\n      var nationalSignificantNumber = _ref4.nationalSignificantNumber,\n          international = _ref4.international,\n          nationalPrefix = _ref4.nationalPrefix,\n          complexPrefixBeforeNationalSignificantNumber = _ref4.complexPrefixBeforeNationalSignificantNumber;\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (nationalSignificantNumber.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalSignificantNumber : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalSignificantNumber`\n      // is used instead of `digits`.\n\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n\n      var numberFormat = this.getFormatFormat(format, international);\n      var nationalPrefixIncludedInTemplate; // If a user did input a national prefix (and that's guaranteed),\n      // and if a `format` does have a national prefix formatting rule,\n      // then see if that national prefix formatting rule\n      // prepends exactly the same national prefix the user has input.\n      // If that's the case, then use the `format` with the national prefix formatting rule.\n      // Otherwise, use  the `format` without the national prefix formatting rule,\n      // and prepend a national prefix manually to it.\n\n      if (this.shouldTryNationalPrefixFormattingRule(format, {\n        international: international,\n        nationalPrefix: nationalPrefix\n      })) {\n        var numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()); // If `national_prefix_formatting_rule` of a `format` simply prepends\n        // national prefix at the start of a national (significant) number,\n        // then such formatting can be used with `AsYouType` formatter.\n        // There seems to be no `else` case: everywhere in metadata,\n        // national prefix formatting rule is national prefix + $1,\n        // or `($1)`, in which case such format isn't even considered\n        // when the user has input a national prefix.\n\n        /* istanbul ignore else */\n\n        if (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\n          numberFormat = numberFormatWithNationalPrefix;\n          nationalPrefixIncludedInTemplate = true; // Replace all digits of the national prefix in the formatting template\n          // with `DIGIT_PLACEHOLDER`s.\n\n          if (nationalPrefix) {\n            var i = nationalPrefix.length;\n\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER); // If a prefix of a national (significant) number is not as simple\n      // as just a basic national prefix, then just prepend such prefix\n      // before the national (significant) number, optionally spacing\n      // the two with a whitespace.\n\n      if (!nationalPrefixIncludedInTemplate) {\n        if (complexPrefixBeforeNationalSignificantNumber) {\n          // Prepend the prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + ' ' + template;\n        } else if (nationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n\n      if (international) {\n        template = applyInternationalSeparatorStyle(template);\n      }\n\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      var result = populateTemplateWithDigits(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);\n\n      if (!result) {\n        // Reset the format.\n        this.resetFormat();\n        return;\n      }\n\n      this.populatedNationalNumberTemplate = result[0];\n      this.populatedNationalNumberTemplatePosition = result[1]; // Return the formatted phone number so far.\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }, {\n    key: \"shouldTryNationalPrefixFormattingRule\",\n    value: function shouldTryNationalPrefixFormattingRule(format, _ref5) {\n      var international = _ref5.international,\n          nationalPrefix = _ref5.nationalPrefix;\n\n      if (format.nationalPrefixFormattingRule()) {\n        // In some countries, `national_prefix_formatting_rule` is `($1)`,\n        // so it applies even if the user hasn't input a national prefix.\n        // `format.usesNationalPrefix()` detects such cases.\n        var usesNationalPrefix = format.usesNationalPrefix();\n\n        if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {\n          return true;\n        }\n      }\n    }\n  }]);\n\n  return AsYouTypeFormatter;\n}();\n\nexport { AsYouTypeFormatter as default };","function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport _extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport parseDigits from './helpers/parseDigits.js';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants.js';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART = '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i');\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '(?:' + '[' + PLUS_CHARS + ']' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*' + '|' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + '.*' + '$'); // Tests whether `national_prefix_for_parsing` could match\n// different national prefixes.\n// Matches anything that's not a digit or a square bracket.\n\nvar COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/;\n\nvar AsYouTypeParser = /*#__PURE__*/function () {\n  function AsYouTypeParser(_ref) {\n    var defaultCountry = _ref.defaultCountry,\n        defaultCallingCode = _ref.defaultCallingCode,\n        metadata = _ref.metadata,\n        onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;\n\n    _classCallCheck(this, AsYouTypeParser);\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.metadata = metadata;\n    this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;\n  }\n\n  _createClass(AsYouTypeParser, [{\n    key: \"input\",\n    value: function input(text, state) {\n      var _extractFormattedDigi = extractFormattedDigitsAndPlus(text),\n          _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2),\n          formattedDigits = _extractFormattedDigi2[0],\n          hasPlus = _extractFormattedDigi2[1];\n\n      var digits = parseDigits(formattedDigits); // Checks for a special case: just a leading `+` has been entered.\n\n      var justLeadingPlus;\n\n      if (hasPlus) {\n        if (!state.digits) {\n          state.startInternationalNumber();\n\n          if (!digits) {\n            justLeadingPlus = true;\n          }\n        }\n      }\n\n      if (digits) {\n        this.inputDigits(digits, state);\n      }\n\n      return {\n        digits: digits,\n        justLeadingPlus: justLeadingPlus\n      };\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits, state) {\n      var digits = state.digits;\n      var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3; // Append phone number digits.\n\n      state.appendDigits(nextDigits); // Attempt to extract IDD prefix:\n      // Some users input their phone number in international format,\n      // but in an \"out-of-country\" dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers as soon as there're at least 3 digits.\n      // Google's library attempts to extract IDD prefix at 3 digits,\n      // so this library just copies that behavior.\n      // I guess that's because the most commot IDD prefixes are\n      // `00` (Europe) and `011` (US).\n      // There exist really long IDD prefixes too:\n      // for example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      // An IDD prefix is extracted here, and then every time when\n      // there's a new digit and the number couldn't be formatted.\n\n      if (hasReceivedThreeLeadingDigits) {\n        this.extractIddPrefix(state);\n      }\n\n      if (this.isWaitingForCountryCallingCode(state)) {\n        if (!this.extractCountryCallingCode(state)) {\n          return;\n        }\n      } else {\n        state.appendNationalSignificantNumberDigits(nextDigits);\n      } // If a phone number is being input in international format,\n      // then it's not valid for it to have a national prefix.\n      // Still, some people incorrectly input such numbers with a national prefix.\n      // In such cases, only attempt to strip a national prefix if the number becomes too long.\n      // (but that is done later, not here)\n\n\n      if (!state.international) {\n        if (!this.hasExtractedNationalSignificantNumber) {\n          this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n            return state.update(stateUpdate);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"isWaitingForCountryCallingCode\",\n    value: function isWaitingForCountryCallingCode(_ref2) {\n      var international = _ref2.international,\n          callingCode = _ref2.callingCode;\n      return international && !callingCode;\n    } // Extracts a country calling code from a number\n    // being entered in internatonal format.\n\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode(state) {\n      var _extractCountryCallin = _extractCountryCallingCode('+' + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (countryCallingCode) {\n        state.setCallingCode(countryCallingCode);\n        state.update({\n          nationalSignificantNumber: number\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan) {\n      if (numberingPlan) {\n        this.hasSelectedNumberingPlan = true;\n\n        var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();\n\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);\n      } else {\n        this.hasSelectedNumberingPlan = undefined;\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = undefined;\n      }\n    }\n    /**\r\n     * Extracts a national (significant) number from user input.\r\n     * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n     * and doesn't apply `national_prefix_transform_rule` after that.\r\n     * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n     * @return {boolean} [extracted]\r\n     */\n\n  }, {\n    key: \"extractNationalSignificantNumber\",\n    value: function extractNationalSignificantNumber(nationalDigits, setState) {\n      if (!this.hasSelectedNumberingPlan) {\n        return;\n      }\n\n      var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe.nationalPrefix,\n          nationalNumber = _extractNationalNumbe.nationalNumber,\n          carrierCode = _extractNationalNumbe.carrierCode;\n\n      if (nationalNumber === nationalDigits) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n    /**\r\n     * In Google's code this function is called \"attempt to extract longer NDD\".\r\n     * \"Some national prefixes are a substring of others\", they say.\r\n     * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n     */\n\n  }, {\n    key: \"extractAnotherNationalSignificantNumber\",\n    value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\n      if (!this.hasExtractedNationalSignificantNumber) {\n        return this.extractNationalSignificantNumber(nationalDigits, setState);\n      }\n\n      if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\n        return;\n      }\n\n      var _extractNationalNumbe2 = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe2.nationalPrefix,\n          nationalNumber = _extractNationalNumbe2.nationalNumber,\n          carrierCode = _extractNationalNumbe2.carrierCode; // If a national prefix has been extracted previously,\n      // then it's always extracted as additional digits are added.\n      // That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\n      // doesn't do anything different from what it currently does.\n      // So, just in case, here's this check, though it doesn't occur.\n\n      /* istanbul ignore if */\n\n\n      if (nationalNumber === prevNationalSignificantNumber) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n  }, {\n    key: \"onExtractedNationalNumber\",\n    value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {\n      var complexPrefixBeforeNationalSignificantNumber;\n      var nationalSignificantNumberMatchesInput; // This check also works with empty `this.nationalSignificantNumber`.\n\n      var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber); // If the extracted national (significant) number is the\n      // last substring of the `digits`, then it means that it hasn't been altered:\n      // no digits have been removed from the national (significant) number\n      // while applying `national_prefix_transform_rule`.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n\n      if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\n        nationalSignificantNumberMatchesInput = true; // If a prefix of a national (significant) number is not as simple\n        // as just a basic national prefix, then such prefix is stored in\n        // `this.complexPrefixBeforeNationalSignificantNumber` property and will be\n        // prepended \"as is\" to the national (significant) number to produce\n        // a formatted result.\n\n        var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex); // `prefixBeforeNationalNumber` is always non-empty,\n        // because `onExtractedNationalNumber()` isn't called\n        // when a national (significant) number hasn't been actually \"extracted\":\n        // when a national (significant) number is equal to the national part of `digits`,\n        // then `onExtractedNationalNumber()` doesn't get called.\n\n        if (prefixBeforeNationalNumber !== nationalPrefix) {\n          complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;\n        }\n      }\n\n      setState({\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode,\n        nationalSignificantNumber: nationalSignificantNumber,\n        nationalSignificantNumberMatchesInput: nationalSignificantNumberMatchesInput,\n        complexPrefixBeforeNationalSignificantNumber: complexPrefixBeforeNationalSignificantNumber\n      }); // `onExtractedNationalNumber()` is only called when\n      // the national (significant) number actually did change.\n\n      this.hasExtractedNationalSignificantNumber = true;\n      this.onNationalSignificantNumberChange();\n    }\n  }, {\n    key: \"reExtractNationalSignificantNumber\",\n    value: function reExtractNationalSignificantNumber(state) {\n      // Attempt to extract a national prefix.\n      //\n      // Some people incorrectly input national prefix\n      // in an international phone number.\n      // For example, some people write British phone numbers as `+44(0)...`.\n      //\n      // Also, in some rare cases, it is valid for a national prefix\n      // to be a part of an international phone number.\n      // For example, mobile phone numbers in Mexico are supposed to be\n      // dialled internationally using a `1` national prefix,\n      // so the national prefix will be part of an international number.\n      //\n      // Quote from:\n      // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n      //\n      // \"Dialing a Mexican cell phone from abroad\n      // When you are calling a cell phone number in Mexico from outside Mexico,\n      // it’s necessary to dial an additional “1” after Mexico’s country code\n      // (which is “52”) and before the area code.\n      // You also ignore the 045, and simply dial the area code and the\n      // cell phone’s number.\n      //\n      // If you don’t add the “1”, you’ll receive a recorded announcement\n      // asking you to redial using it.\n      //\n      // For example, if you are calling from the USA to a cell phone\n      // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n      // (Note that this is different to calling a land line in Mexico City\n      // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n      //\n      // Google's demo output:\n      // https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\n      //\n      if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, function (stateUpdate) {\n        return state.update(stateUpdate);\n      })) {\n        return true;\n      } // If no format matches the phone number, then it could be\n      // \"a really long IDD\" (quote from a comment in Google's library).\n      // An IDD prefix is first extracted when the user has entered at least 3 digits,\n      // and then here — every time when there's a new digit and the number\n      // couldn't be formatted.\n      // For example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      //\n      // Could also check `!hasReceivedThreeLeadingDigits` here\n      // to filter out the case when this check duplicates the one\n      // already performed when there're 3 leading digits,\n      // but it's not a big deal, and in most cases there\n      // will be a suitable `format` when there're 3 leading digits.\n      //\n\n\n      if (this.extractIddPrefix(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      } // Google's AsYouType formatter supports sort of an \"autocorrection\" feature\n      // when it \"autocorrects\" numbers that have been input for a country\n      // with that country's calling code.\n      // Such \"autocorrection\" feature looks weird, but different people have been requesting it:\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      // https://github.com/catamphetamine/libphonenumber-js/issues/375\n      // https://github.com/catamphetamine/libphonenumber-js/issues/316\n\n\n      if (this.fixMissingPlus(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"extractIddPrefix\",\n    value: function extractIddPrefix(state) {\n      // An IDD prefix can't be present in a number written with a `+`.\n      // Also, don't re-extract an IDD prefix if has already been extracted.\n      var international = state.international,\n          IDDPrefix = state.IDDPrefix,\n          digits = state.digits,\n          nationalSignificantNumber = state.nationalSignificantNumber;\n\n      if (international || IDDPrefix) {\n        return;\n      } // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n\n\n      var numberWithoutIDD = stripIddPrefix(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n\n      if (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\n        // If an IDD prefix was stripped then convert the IDD-prefixed number\n        // to international number for subsequent parsing.\n        state.update({\n          IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\n        });\n        this.startInternationalNumber(state, {\n          country: undefined,\n          callingCode: undefined\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"fixMissingPlus\",\n    value: function fixMissingPlus(state) {\n      if (!state.international) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n            newCallingCode = _extractCountryCallin2.countryCallingCode,\n            number = _extractCountryCallin2.number;\n\n        if (newCallingCode) {\n          state.update({\n            missingPlus: true\n          });\n          this.startInternationalNumber(state, {\n            country: state.country,\n            callingCode: newCallingCode\n          });\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(state, _ref3) {\n      var country = _ref3.country,\n          callingCode = _ref3.callingCode;\n      state.startInternationalNumber(country, callingCode); // If a national (significant) number has been extracted before, reset it.\n\n      if (state.nationalSignificantNumber) {\n        state.resetNationalSignificantNumber();\n        this.onNationalSignificantNumberChange();\n        this.hasExtractedNationalSignificantNumber = undefined;\n      }\n    }\n  }, {\n    key: \"extractCallingCodeAndNationalSignificantNumber\",\n    value: function extractCallingCodeAndNationalSignificantNumber(state) {\n      if (this.extractCountryCallingCode(state)) {\n        // `this.extractCallingCode()` is currently called when the number\n        // couldn't be formatted during the standard procedure.\n        // Normally, the national prefix would be re-extracted\n        // for an international number if such number couldn't be formatted,\n        // but since it's already not able to be formatted,\n        // there won't be yet another retry, so also extract national prefix here.\n        this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n          return state.update(stateUpdate);\n        });\n      }\n    }\n  }]);\n\n  return AsYouTypeParser;\n}();\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\n\nexport { AsYouTypeParser as default };\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART);\n\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n\n  return text;\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nfunction _extractFormattedDigitsAndPlus(text) {\n  // Extract a formatted phone number part from text.\n  var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n  if (extractedNumber[0] === '+') {\n    return [extractedNumber.slice('+'.length), true];\n  }\n\n  return [extractedNumber];\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nexport function extractFormattedDigitsAndPlus(text) {\n  var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text),\n      _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2),\n      formattedDigits = _extractFormattedDigi4[0],\n      hasPlus = _extractFormattedDigi4[1]; // If the extracted phone number part\n  // can possibly be a part of some valid phone number\n  // then parse phone number characters from a formatted phone number.\n\n\n  if (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\n    formattedDigits = '';\n  }\n\n  return [formattedDigits, hasPlus];\n}","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport Metadata from './metadata.js';\nimport PhoneNumber from './PhoneNumber.js';\nimport AsYouTypeState from './AsYouTypeState.js';\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.js';\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar AsYouType = /*#__PURE__*/function () {\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    this.metadata = new Metadata(metadata);\n\n    var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry),\n        _this$getCountryAndCa2 = _slicedToArray(_this$getCountryAndCa, 2),\n        defaultCountry = _this$getCountryAndCa2[0],\n        defaultCallingCode = _this$getCountryAndCa2[1];\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.reset();\n  }\n\n  _createClass(AsYouType, [{\n    key: \"getCountryAndCallingCode\",\n    value: function getCountryAndCallingCode(optionsOrDefaultCountry) {\n      // Set `defaultCountry` and `defaultCallingCode` options.\n      var defaultCountry;\n      var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n      if (optionsOrDefaultCountry) {\n        if (_typeof(optionsOrDefaultCountry) === 'object') {\n          defaultCountry = optionsOrDefaultCountry.defaultCountry;\n          defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n        } else {\n          defaultCountry = optionsOrDefaultCountry;\n        }\n      }\n\n      if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\n        defaultCountry = undefined;\n      }\n\n      if (defaultCallingCode) {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            defaultCountry = '001';\n          }\n        }\n      }\n\n      return [defaultCountry, defaultCallingCode];\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var _this$parser$input = this.parser.input(text, this.state),\n          digits = _this$parser$input.digits,\n          justLeadingPlus = _this$parser$input.justLeadingPlus;\n\n      if (justLeadingPlus) {\n        this.formattedOutput = '+';\n      } else if (digits) {\n        this.determineTheCountryIfNeeded(); // Match the available formats by the currently available leading digits.\n\n        if (this.state.nationalSignificantNumber) {\n          this.formatter.narrowDownMatchingFormats(this.state);\n        }\n\n        var formattedNationalNumber;\n\n        if (this.metadata.hasSelectedNumberingPlan()) {\n          formattedNationalNumber = this.formatter.format(digits, this.state);\n        }\n\n        if (formattedNationalNumber === undefined) {\n          // See if another national (significant) number could be re-extracted.\n          if (this.parser.reExtractNationalSignificantNumber(this.state)) {\n            this.determineTheCountryIfNeeded(); // If it could, then re-try formatting the new national (significant) number.\n\n            var nationalDigits = this.state.getNationalDigits();\n\n            if (nationalDigits) {\n              formattedNationalNumber = this.formatter.format(nationalDigits, this.state);\n            }\n          }\n        }\n\n        this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();\n      }\n\n      return this.formattedOutput;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n\n      this.state = new AsYouTypeState({\n        onCountryChange: function onCountryChange(country) {\n          // Before version `1.6.0`, the official `AsYouType` formatter API\n          // included the `.country` property of an `AsYouType` instance.\n          // Since that property (along with the others) have been moved to\n          // `this.state`, `this.country` property is emulated for compatibility\n          // with the old versions.\n          _this.country = country;\n        },\n        onCallingCodeChange: function onCallingCodeChange(callingCode, country) {\n          _this.metadata.selectNumberingPlan(country, callingCode);\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n\n          _this.parser.reset(_this.metadata.numberingPlan);\n        }\n      });\n      this.formatter = new AsYouTypeFormatter({\n        state: this.state,\n        metadata: this.metadata\n      });\n      this.parser = new AsYouTypeParser({\n        defaultCountry: this.defaultCountry,\n        defaultCallingCode: this.defaultCallingCode,\n        metadata: this.metadata,\n        state: this.state,\n        onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {\n          _this.determineTheCountryIfNeeded();\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n        }\n      });\n      this.state.reset(this.defaultCountry, this.defaultCallingCode);\n      this.formattedOutput = '';\n      return this;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.state.international;\n    }\n    /**\r\n     * Returns the \"calling code\" part of the phone number when it's being input\r\n     * in an international format.\r\n     * If no valid calling code has been entered so far, returns `undefined`.\r\n     * @return {string} [callingCode]\r\n     */\n\n  }, {\n    key: \"getCallingCode\",\n    value: function getCallingCode() {\n      // If the number is being input in national format and some \"default calling code\"\n      // has been passed to `AsYouType` constructor, then `this.state.callingCode`\n      // is equal to that \"default calling code\".\n      //\n      // If the number is being input in national format and no \"default calling code\"\n      // has been passed to `AsYouType` constructor, then returns `undefined`,\n      // even if a \"default country\" has been passed to `AsYouType` constructor.\n      //\n      if (this.isInternational()) {\n        return this.state.callingCode;\n      }\n    } // A legacy alias.\n\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.getCallingCode();\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      var digits = this.state.digits; // Return `undefined` if no digits have been input yet.\n\n      if (digits) {\n        return this._getCountry();\n      }\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"_getCountry\",\n    value: function _getCountry() {\n      var country = this.state.country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        // `AsYouType.getCountry()` returns `undefined`\n        // for \"non-geographic\" phone numbering plans.\n        if (country === '001') {\n          return;\n        }\n      }\n\n      return country;\n    }\n  }, {\n    key: \"determineTheCountryIfNeeded\",\n    value: function determineTheCountryIfNeeded() {\n      // Suppose a user enters a phone number in international format,\n      // and there're several countries corresponding to that country calling code,\n      // and a country has been derived from the number, and then\n      // a user enters one more digit and the number is no longer\n      // valid for the derived country, so the country should be re-derived\n      // on every new digit in those cases.\n      //\n      // If the phone number is being input in national format,\n      // then it could be a case when `defaultCountry` wasn't specified\n      // when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\n      // and that \"calling code\" could correspond to a \"non-geographic entity\",\n      // or there could be several countries corresponding to that country calling code.\n      // In those cases, `this.country` is `undefined` and should be derived\n      // from the number. Again, if country calling code is ambiguous, then\n      // `this.country` should be re-derived with each new digit.\n      //\n      if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\n        this.determineTheCountry();\n      }\n    } // Prepends `+CountryCode ` in case of an international phone number\n\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      var _this2 = this;\n\n      if (this.isInternational()) {\n        var prefix = function prefix(text) {\n          return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {\n            spacing: text ? true : false\n          }) + text;\n        };\n\n        var callingCode = this.state.callingCode;\n\n        if (!callingCode) {\n          return prefix(\"\".concat(this.state.getDigitsWithoutInternationalPrefix()));\n        }\n\n        if (!formattedNationalNumber) {\n          return prefix(callingCode);\n        }\n\n        return prefix(\"\".concat(callingCode, \" \").concat(formattedNationalNumber));\n      }\n\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumberWithPrefix\",\n    value: function getNonFormattedNationalNumberWithPrefix() {\n      var _this$state = this.state,\n          nationalSignificantNumber = _this$state.nationalSignificantNumber,\n          complexPrefixBeforeNationalSignificantNumber = _this$state.complexPrefixBeforeNationalSignificantNumber,\n          nationalPrefix = _this$state.nationalPrefix;\n      var number = nationalSignificantNumber;\n      var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;\n\n      if (prefix) {\n        number = prefix + number;\n      }\n\n      return number;\n    }\n  }, {\n    key: \"getNonFormattedNumber\",\n    value: function getNonFormattedNumber() {\n      var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;\n      return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      var number = this.getNonFormattedNumber();\n\n      if (number) {\n        return number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n      }\n    }\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var callingCode = this.state.callingCode;\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);\n      return countryCodes && countryCodes.length > 1;\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.state.setCountry(getCountryByCallingCode(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, this.state.nationalSignificantNumber, this.metadata));\n    }\n    /**\r\n     * Returns a E.164 phone number value for the user's input.\r\n     *\r\n     * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n     * it will return `\"+12223334444\"`.\r\n     *\r\n     * For international phone number input, it will also auto-correct\r\n     * some minor errors such as using a national prefix when writing\r\n     * an international phone number. For example, if the user inputs\r\n     * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n     * `\"+447400000000\"` phone number value.\r\n     *\r\n     * Will return `undefined` if no digits have been input,\r\n     * or when inputting a phone number in national format and no\r\n     * default country or default \"country calling code\" have been set.\r\n     *\r\n     * @return {string} [value]\r\n     */\n\n  }, {\n    key: \"getNumberValue\",\n    value: function getNumberValue() {\n      var _this$state2 = this.state,\n          digits = _this$state2.digits,\n          callingCode = _this$state2.callingCode,\n          country = _this$state2.country,\n          nationalSignificantNumber = _this$state2.nationalSignificantNumber; // Will return `undefined` if no digits have been input.\n\n      if (!digits) {\n        return;\n      }\n\n      if (this.isInternational()) {\n        if (callingCode) {\n          return '+' + callingCode + nationalSignificantNumber;\n        } else {\n          return '+' + digits;\n        }\n      } else {\n        if (country || callingCode) {\n          var callingCode_ = country ? this.metadata.countryCallingCode() : callingCode;\n          return '+' + callingCode_ + nationalSignificantNumber;\n        }\n      }\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      var _this$state3 = this.state,\n          nationalSignificantNumber = _this$state3.nationalSignificantNumber,\n          carrierCode = _this$state3.carrierCode,\n          callingCode = _this$state3.callingCode; // `this._getCountry()` is basically same as `this.state.country`\n      // with the only change that it return `undefined` in case of a\n      // \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\n\n      var country = this._getCountry();\n\n      if (!nationalSignificantNumber) {\n        return;\n      }\n\n      if (!country && !callingCode) {\n        return;\n      }\n\n      var phoneNumber = new PhoneNumber(country || callingCode, nationalSignificantNumber, this.metadata.metadata);\n\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.state.nationalSignificantNumber;\n    }\n    /**\r\n     * Returns the phone number characters entered by the user.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getChars\",\n    value: function getChars() {\n      return (this.state.international ? '+' : '') + this.state.digits;\n    }\n    /**\r\n     * Returns the template for the formatted phone number.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || '';\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport { AsYouType as default };","import { getCountryCallingCode } from 'libphonenumber-js/core';\nexport function getInputValuePrefix(_ref) {\n  var country = _ref.country,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      metadata = _ref.metadata;\n  return country && international && !withCountryCallingCode ? \"+\".concat(getCountryCallingCode(country, metadata)) : '';\n}\nexport function removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n\n  return value;\n}","var _excluded = [\"country\", \"international\", \"withCountryCallingCode\", \"metadata\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'input-format/react';\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputSmart` is a \"smarter\" implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's and maintains the caret's position in the process.\r\n   * The caret positioning is maintained using `input-format` library.\r\n   * Relies on being run in a DOM environment for calling caret positioning functions.\r\n   */\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix({\n        country: country,\n        international: international,\n        withCountryCallingCode: withCountryCallingCode,\n        metadata: metadata\n      }); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return /*#__PURE__*/React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n\n  InputSmart = /*#__PURE__*/React.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\nexport default createInput();","var _excluded = [\"value\", \"onChange\", \"country\", \"international\", \"withCountryCallingCode\", \"metadata\", \"inputComponent\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic` is the most basic implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's input but doesn't control the caret in the process:\r\n   * when erasing or inserting digits in the middle of a phone number\r\n   * the caret usually jumps to the end (this is the expected behavior).\r\n   * Why does `InputBasic` exist when there's `InputSmart`?\r\n   * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n   * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    var prefix = getInputValuePrefix({\n      country: country,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      metadata: metadata\n    });\n\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return /*#__PURE__*/React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = /*#__PURE__*/React.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\nexport default createInput();\n\nfunction format(prefix, value, country, metadata) {\n  return removeInputValuePrefix(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}","import AsYouType from './AsYouType.js';\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\n\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n\n  return new AsYouType(country, metadata).input(value);\n}","/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\nexport default function getCountryFlag(country) {\n  return getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1]);\n}\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\n\nfunction getRegionalIndicatorSymbol(letter) {\n  return String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0));\n}","var _excluded = [\"value\", \"onChange\", \"options\"],\n    _excluded2 = [\"value\", \"options\", \"className\", \"iconComponent\", \"getIconAspectRatio\", \"arrowComponent\", \"unicodeFlags\"];\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode';\nexport default function CountrySelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      options = _ref.options,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var onChange_ = useCallback(function (event) {\n    var value = event.target.value;\n    onChange(value === 'ZZ' ? undefined : value);\n  }, [onChange]);\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]); // \"ZZ\" means \"International\".\n  // (HTML requires each `<option/>` have some string `value`).\n\n  return /*#__PURE__*/React.createElement(\"select\", _extends({}, rest, {\n    value: value || 'ZZ',\n    onChange: onChange_\n  }), options.map(function (_ref2) {\n    var value = _ref2.value,\n        label = _ref2.label,\n        divider = _ref2.divider;\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: divider ? '|' : value || 'ZZ',\n      value: divider ? '|' : value || 'ZZ',\n      disabled: divider ? true : false,\n      style: divider ? DIVIDER_STYLE : undefined\n    }, label);\n  }));\n}\nCountrySelect.propTypes = {\n  /**\r\n   * A two-letter country code.\r\n   * Example: \"US\", \"RU\", etc.\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * A function of `value: string`.\r\n   * Updates the `value` property.\r\n   */\n  onChange: PropTypes.func.isRequired,\n  // `<select/>` options.\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.string,\n    divider: PropTypes.bool\n  })).isRequired\n};\nvar DIVIDER_STYLE = {\n  fontSize: '1px',\n  backgroundColor: 'currentColor',\n  color: 'inherit'\n};\nexport function CountrySelectWithIcon(_ref3) {\n  var value = _ref3.value,\n      options = _ref3.options,\n      className = _ref3.className,\n      Icon = _ref3.iconComponent,\n      getIconAspectRatio = _ref3.getIconAspectRatio,\n      Arrow = _ref3.arrowComponent,\n      unicodeFlags = _ref3.unicodeFlags,\n      rest = _objectWithoutProperties(_ref3, _excluded2);\n\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PhoneInputCountry\"\n  }, /*#__PURE__*/React.createElement(CountrySelect, _extends({}, rest, {\n    value: value,\n    options: options,\n    className: classNames('PhoneInputCountrySelect', className)\n  })), unicodeFlags && value && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PhoneInputCountryIconUnicode\"\n  }, getUnicodeFlagIcon(value)), !(unicodeFlags && value) && /*#__PURE__*/React.createElement(Icon, {\n    \"aria-hidden\": true,\n    country: value,\n    label: selectedOption && selectedOption.label,\n    aspectRatio: unicodeFlags ? 1 : undefined\n  }), /*#__PURE__*/React.createElement(Arrow, null));\n}\nCountrySelectWithIcon.propTypes = {\n  // Country flag component.\n  iconComponent: PropTypes.elementType,\n  // Select arrow component.\n  arrowComponent: PropTypes.elementType.isRequired,\n  // Set to `true` to render Unicode flag icons instead of SVG images.\n  unicodeFlags: PropTypes.bool\n};\nCountrySelectWithIcon.defaultProps = {\n  arrowComponent: function arrowComponent() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"PhoneInputCountrySelectArrow\"\n    });\n  }\n};\n\nfunction getSelectedOption(options, value) {\n  for (var _iterator = _createForOfIteratorHelperLoose(options), _step; !(_step = _iterator()).done;) {\n    var option = _step.value;\n\n    if (!option.divider && option.value === value) {\n      return option;\n    }\n  }\n}","var _excluded = [\"country\", \"countryName\", \"flags\", \"flagUrl\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'; // Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\n\nexport default function FlagComponent(_ref) {\n  var country = _ref.country,\n      countryName = _ref.countryName,\n      flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (flags && flags[country]) {\n    return flags[country]({\n      title: countryName\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"img\", _extends({}, rest, {\n    alt: countryName,\n    role: countryName ? undefined : \"presentation\",\n    src: flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())\n  }));\n}\nFlagComponent.propTypes = {\n  // The country to be selected by default.\n  // Two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: PropTypes.string.isRequired,\n  // Will be HTML `title` attribute of the `<img/>`.\n  countryName: PropTypes.string.isRequired,\n  // Country flag icon components.\n  // By default flag icons are inserted as `<img/>`s\n  // with their `src` pointed to `country-flag-icons` gitlab pages website.\n  // There might be cases (e.g. an offline application)\n  // where having a large (3 megabyte) `<svg/>` flags\n  // bundle is more appropriate.\n  // `import flags from 'react-phone-number-input/flags'`.\n  flags: PropTypes.objectOf(PropTypes.elementType),\n  // A URL for a country flag icon.\n  // By default it points to `country-flag-icons` gitlab pages website.\n  flagUrl: PropTypes.string.isRequired\n};","var _excluded = [\"aspectRatio\"],\n    _excluded2 = [\"title\"],\n    _excluded3 = [\"title\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport default function InternationalIcon(_ref) {\n  var aspectRatio = _ref.aspectRatio,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (aspectRatio === 1) {\n    return /*#__PURE__*/React.createElement(InternationalIcon1x1, rest);\n  } else {\n    return /*#__PURE__*/React.createElement(InternationalIcon3x2, rest);\n  }\n}\nInternationalIcon.propTypes = {\n  title: PropTypes.string.isRequired,\n  aspectRatio: PropTypes.number\n}; // 3x2.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon3x2(_ref2) {\n  var title = _ref2.title,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 75 50\"\n  }), /*#__PURE__*/React.createElement(\"title\", null, title), /*#__PURE__*/React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeMiterlimit: \"10\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"26\",\n    y1: \"25\",\n    x2: \"74\",\n    y2: \"25\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"50\",\n    y1: \"1\",\n    x2: \"50\",\n    y2: \"49\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"none\",\n    fill: \"currentColor\",\n    d: \"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"\n  }));\n}\n\nInternationalIcon3x2.propTypes = {\n  title: PropTypes.string.isRequired\n}; // 1x1.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon1x1(_ref3) {\n  var title = _ref3.title,\n      rest = _objectWithoutProperties(_ref3, _excluded3);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\"\n  }), /*#__PURE__*/React.createElement(\"title\", null, title), /*#__PURE__*/React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"27.8\",\n    y1: \"0.85\",\n    x2: \"27.8\",\n    y2: \"34.61\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"15.2\",\n    y1: \"22.23\",\n    x2: \"49.15\",\n    y2: \"22.23\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"transparent\",\n    fill: \"currentColor\",\n    d: \"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"\n  }));\n}\n\nInternationalIcon1x1.propTypes = {\n  title: PropTypes.string.isRequired\n};","function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { isSupportedCountry } from 'libphonenumber-js/core';\nexport { getCountries } from 'libphonenumber-js/core';\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\n\nexport function sortCountryOptions(options, order) {\n  if (!order) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(order), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      (function () {\n        var countryCode = void 0;\n\n        if (element === '🌐') {\n          countryCode = undefined;\n        } else {\n          countryCode = element;\n        } // Find the position of the option.\n\n\n        var index = options.indexOf(options.filter(function (option) {\n          return option.value === countryCode;\n        })[0]); // Get the option.\n\n        var option = options[index]; // Remove the option from its default position.\n\n        options.splice(index, 1); // Add the option on top.\n\n        appendTo.push(option);\n      })();\n    }\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\nexport function getSupportedCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (option) {\n      switch (option) {\n        case '🌐':\n        case '|':\n        case '...':\n        case '…':\n          return true;\n\n        default:\n          return isCountrySupportedWithError(option, metadata);\n      }\n    });\n\n    if (countryOptions.length > 0) {\n      return countryOptions;\n    }\n  }\n}\nexport function isCountrySupportedWithError(country, metadata) {\n  if (isSupportedCountry(country, metadata)) {\n    return true;\n  } else {\n    console.error(\"Country not found: \".concat(country));\n    return false;\n  }\n}\nexport function getSupportedCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}","var _excluded = [\"country\", \"label\", \"aspectRatio\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport DefaultInternationalIcon from './InternationalIcon.js';\nimport Flag from './Flag.js';\nexport function createCountryIconComponent(_ref) {\n  var flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      FlagComponent = _ref.flagComponent,\n      InternationalIcon = _ref.internationalIcon;\n\n  function CountryIcon(_ref2) {\n    var country = _ref2.country,\n        label = _ref2.label,\n        aspectRatio = _ref2.aspectRatio,\n        rest = _objectWithoutProperties(_ref2, _excluded); // `aspectRatio` is currently a hack for the default \"International\" icon\n    // to render it as a square when Unicode flag icons are used.\n    // So `aspectRatio` property is only used with the default \"International\" icon.\n\n\n    var _aspectRatio = InternationalIcon === DefaultInternationalIcon ? aspectRatio : undefined;\n\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n      className: classNames('PhoneInputCountryIcon', {\n        'PhoneInputCountryIcon--square': _aspectRatio === 1,\n        'PhoneInputCountryIcon--border': country\n      })\n    }), country ? /*#__PURE__*/React.createElement(FlagComponent, {\n      country: country,\n      countryName: label,\n      flags: flags,\n      flagUrl: flagUrl,\n      className: \"PhoneInputCountryIconImg\"\n    }) : /*#__PURE__*/React.createElement(InternationalIcon, {\n      title: label,\n      aspectRatio: _aspectRatio,\n      className: \"PhoneInputCountryIconImg\"\n    }));\n  }\n\n  CountryIcon.propTypes = {\n    country: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    aspectRatio: PropTypes.number\n  };\n  return CountryIcon;\n}\nexport default createCountryIconComponent({\n  // Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n  flagComponent: Flag,\n  internationalIcon: DefaultInternationalIcon\n});","import { getCountryCallingCode, Metadata } from 'libphonenumber-js/core';\nvar ONLY_DIGITS_REGEXP = /^\\d+$/;\nexport default function getInternationalPhoneNumberPrefix(country, metadata) {\n  // Standard international phone number prefix: \"+\" and \"country calling code\".\n  var prefix = '+' + getCountryCallingCode(country, metadata); // Get \"leading digits\" for a phone number of the country.\n  // If there're \"leading digits\" then they can be part of the prefix too.\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(country);\n\n  if (metadata.numberingPlan.leadingDigits() && ONLY_DIGITS_REGEXP.test(metadata.numberingPlan.leadingDigits())) {\n    prefix += metadata.numberingPlan.leadingDigits();\n  }\n\n  return prefix;\n}","import parsePhoneNumber_, { getCountryCallingCode, AsYouType, Metadata } from 'libphonenumber-js/core';\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix.js';\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\n\nexport function getPreSelectedCountry(_ref) {\n  var value = _ref.value,\n      phoneNumber = _ref.phoneNumber,\n      defaultCountry = _ref.defaultCountry,\n      getAnyCountry = _ref.getAnyCountry,\n      countries = _ref.countries,\n      required = _ref.required,\n      metadata = _ref.metadata;\n  var country; // If can get country from E.164 phone number\n  // then it overrides the `country` passed (or not passed).\n\n  if (phoneNumber && phoneNumber.country) {\n    // `country` will be left `undefined` in case of non-detection.\n    country = phoneNumber.country;\n  } else if (defaultCountry) {\n    if (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\n      country = defaultCountry;\n    }\n  } // Only pre-select a country if it's in the available `countries` list.\n\n\n  if (countries && countries.indexOf(country) < 0) {\n    country = undefined;\n  } // If there will be no \"International\" option\n  // then some `country` must be selected.\n  // It will still be the wrong country though.\n  // But still country `<select/>` can't be left in a broken state.\n\n\n  if (!country && required && countries && countries.length > 0) {\n    country = getAnyCountry(); // noCountryMatchesTheNumber = true\n  }\n\n  return country;\n}\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\n\nexport function getCountrySelectOptions(_ref2) {\n  var countries = _ref2.countries,\n      countryNames = _ref2.countryNames,\n      addInternationalOption = _ref2.addInternationalOption,\n      compareStringsLocales = _ref2.compareStringsLocales,\n      _compareStrings = _ref2.compareStrings; // Default country name comparator uses `String.localeCompare()`.\n\n  if (!_compareStrings) {\n    _compareStrings = compareStrings;\n  } // Generates a `<Select/>` option for each country.\n\n\n  var countrySelectOptions = countries.map(function (country) {\n    return {\n      value: country,\n      // All `locale` country names included in this library\n      // include all countries (this is checked at build time).\n      // The only case when a country name might be missing\n      // is when a developer supplies their own `labels` property.\n      // To guard against such cases, a missing country name\n      // is substituted by country code.\n      label: countryNames[country] || country\n    };\n  }); // Sort the list of countries alphabetically.\n\n  countrySelectOptions.sort(function (a, b) {\n    return _compareStrings(a.label, b.label, compareStringsLocales);\n  }); // Add the \"International\" option to the country list (if suitable)\n\n  if (addInternationalOption) {\n    countrySelectOptions.unshift({\n      label: countryNames.ZZ\n    });\n  }\n\n  return countrySelectOptions;\n}\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\n\nexport function parsePhoneNumber(value, metadata) {\n  return parsePhoneNumber_(value || '', metadata);\n}\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\n\nexport function generateNationalNumberDigits(phoneNumber) {\n  return phoneNumber.formatNational().replace(/\\D/g, '');\n}\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\n\nexport function getPhoneDigitsForNewCountry(phoneDigits, _ref3) {\n  var prevCountry = _ref3.prevCountry,\n      newCountry = _ref3.newCountry,\n      metadata = _ref3.metadata,\n      useNationalFormat = _ref3.useNationalFormat;\n\n  if (prevCountry === newCountry) {\n    return phoneDigits;\n  } // If `parsed_input` is empty\n  // then no need to migrate anything.\n\n\n  if (!phoneDigits) {\n    if (useNationalFormat) {\n      return '';\n    } else {\n      // If `phoneDigits` is empty then set `phoneDigits` to\n      // `+{getCountryCallingCode(newCountry)}`.\n      return getInternationalPhoneNumberPrefix(newCountry, metadata);\n    }\n  } // If switching to some country.\n  // (from \"International\" or another country)\n  // If switching from \"International\" then `phoneDigits` starts with a `+`.\n  // Otherwise it may or may not start with a `+`.\n\n\n  if (newCountry) {\n    // If the phone number was entered in international format\n    // then migrate it to the newly selected country.\n    // The phone number may be incomplete.\n    // The phone number entered not necessarily starts with\n    // the previously selected country phone prefix.\n    if (phoneDigits[0] === '+') {\n      // If the international phone number is for the new country\n      // then convert it to local if required.\n      if (useNationalFormat) {\n        // // If a phone number is being input in international form\n        // // and the country can already be derived from it,\n        // // and if it is the new country, then format as a national number.\n        // const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\n        // if (derived_country === newCountry) {\n        // \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\n        // }\n        // Actually, the two countries don't necessarily need to match:\n        // the condition could be looser here, because several countries\n        // might share the same international phone number format\n        // (for example, \"NANPA\" countries like US, Canada, etc).\n        // The looser condition would be just \"same nternational phone number format\"\n        // which would mean \"same country calling code\" in the context of `libphonenumber-js`.\n        if (phoneDigits.indexOf('+' + getCountryCallingCode(newCountry, metadata)) === 0) {\n          return stripCountryCallingCode(phoneDigits, newCountry, metadata);\n        } // Simply discard the previously entered international phone number,\n        // because otherwise any \"smart\" transformation like getting the\n        // \"national (significant) number\" part and then prepending the\n        // newly selected country's \"country calling code\" to it\n        // would just be confusing for a user without being actually useful.\n\n\n        return ''; // // Simply strip the leading `+` character\n        // // therefore simply converting all digits into a \"local\" phone number.\n        // // https://github.com/catamphetamine/react-phone-number-input/issues/287\n        // return phoneDigits.slice(1)\n      }\n\n      if (prevCountry) {\n        var newCountryPrefix = getInternationalPhoneNumberPrefix(newCountry, metadata);\n\n        if (phoneDigits.indexOf(newCountryPrefix) === 0) {\n          return phoneDigits;\n        } else {\n          return newCountryPrefix;\n        }\n      } else {\n        var defaultValue = getInternationalPhoneNumberPrefix(newCountry, metadata); // If `phoneDigits`'s country calling code part is the same\n        // as for the new `country`, then leave `phoneDigits` as is.\n\n        if (phoneDigits.indexOf(defaultValue) === 0) {\n          return phoneDigits;\n        } // If `phoneDigits`'s country calling code part is not the same\n        // as for the new `country`, then set `phoneDigits` to\n        // `+{getCountryCallingCode(newCountry)}`.\n\n\n        return defaultValue;\n      } // // If the international phone number already contains\n      // // any country calling code then trim the country calling code part.\n      // // (that could also be the newly selected country phone code prefix as well)\n      // // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\n      // // (e.g. if a user enters an international number\n      // //  not belonging to any of the reduced `countries` list).\n      // phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\n      // // Prepend country calling code prefix\n      // // for the newly selected country.\n      // return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\n\n    }\n  } // If switching to \"International\" from a country.\n  else {\n    // If the phone number was entered in national format.\n    if (phoneDigits[0] !== '+') {\n      // Format the national phone number as an international one.\n      // The phone number entered not necessarily even starts with\n      // the previously selected country phone prefix.\n      // Even if the phone number belongs to whole another country\n      // it will still be parsed into some national phone number.\n      //\n      // Ignore the now-uncovered `|| ''` code branch:\n      // previously `e164()` function could return an empty string\n      // even when `phoneDigits` were not empty.\n      // Now it always returns some `value` when there're any `phoneDigits`.\n      // Still, didn't remove the `|| ''` code branch just in case\n      // that logic changes somehow in some future, so there're no\n      // possible bugs related to that.\n      //\n      // (ignore the `|| ''` code branch)\n\n      /* istanbul ignore next */\n      return e164(phoneDigits, prevCountry, metadata) || '';\n    }\n  }\n\n  return phoneDigits;\n}\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nexport function e164(number, country, metadata) {\n  if (!number) {\n    return;\n  } // If the phone number is being input in international format.\n\n\n  if (number[0] === '+') {\n    // If it's just the `+` sign then return nothing.\n    if (number === '+') {\n      return;\n    } // Return a E.164 phone number.\n    //\n    // Could return `number` \"as is\" here, but there's a possibility\n    // that some user might incorrectly input an international number\n    // with a \"national prefix\". Such numbers aren't considered valid,\n    // but `libphonenumber-js` is \"forgiving\" when it comes to parsing\n    // user's input, and this input component follows that behavior.\n    //\n\n\n    var asYouType = new AsYouType(country, metadata);\n    asYouType.input(number); // This function would return `undefined` only when `number` is `\"+\"`,\n    // but at this point it is known that `number` is not `\"+\"`.\n\n    return asYouType.getNumberValue();\n  } // For non-international phone numbers\n  // an accompanying country code is required.\n  // The situation when `country` is `undefined`\n  // and a non-international phone number is passed\n  // to this function shouldn't happen.\n\n\n  if (!country) {\n    return;\n  }\n\n  var partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata); //\n  // Even if no \"national (significant) number\" digits have been input,\n  // still return a non-`undefined` value.\n  // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\n  //\n  // For example, if the user has selected country `US` and entered `\"1\"`\n  // then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\n  // digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\n  // because otherwise the app would think that the input is empty and mark it as such\n  // while in reality it isn't empty, which might be thought of as a \"bug\", or just\n  // a \"weird\" behavior.\n  //\n  // if (partial_national_significant_number) {\n\n  return \"+\".concat(getCountryCallingCode(country, metadata)).concat(partial_national_significant_number || ''); // }\n}\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\nexport function trimNumber(number, country, metadata) {\n  var nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (nationalSignificantNumberPart) {\n    var overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\n    if (overflowDigitsCount > 0) {\n      return number.slice(0, number.length - overflowDigitsCount);\n    }\n  }\n\n  return number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n  // Get \"possible lengths\" for a phone number of the country.\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(country); // Return the last \"possible length\".\n\n  return metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1];\n} // If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nexport function getCountryForPartialE164Number(partialE164Number, _ref4) {\n  var country = _ref4.country,\n      countries = _ref4.countries,\n      required = _ref4.required,\n      metadata = _ref4.metadata;\n\n  if (partialE164Number === '+') {\n    // Don't change the currently selected country yet.\n    return country;\n  }\n\n  var derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata); // If a phone number is being input in international form\n  // and the country can already be derived from it,\n  // then select that country.\n\n  if (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n    return derived_country;\n  } // If \"International\" country option has not been disabled\n  // and the international phone number entered doesn't correspond\n  // to the currently selected country then reset the currently selected country.\n  else if (country && !required && !couldNumberBelongToCountry(partialE164Number, country, metadata)) {\n    return undefined;\n  } // Don't change the currently selected country.\n\n\n  return country;\n}\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\n\nexport function onPhoneDigitsChange(phoneDigits, _ref5) {\n  var prevPhoneDigits = _ref5.prevPhoneDigits,\n      country = _ref5.country,\n      defaultCountry = _ref5.defaultCountry,\n      countryRequired = _ref5.countryRequired,\n      getAnyCountry = _ref5.getAnyCountry,\n      countries = _ref5.countries,\n      international = _ref5.international,\n      limitMaxLength = _ref5.limitMaxLength,\n      countryCallingCodeEditable = _ref5.countryCallingCodeEditable,\n      metadata = _ref5.metadata;\n\n  if (international && countryCallingCodeEditable === false) {\n    var prefix = getInternationalPhoneNumberPrefix(country, metadata); // The `<input/>` value must start with the country calling code.\n\n    if (phoneDigits.indexOf(prefix) !== 0) {\n      var _value; // If a phone number input is declared as\n      // `international` and `withCountryCallingCode`,\n      // then it's gonna be non-empty even before the user\n      // has input anything in it.\n      // This will result in its contents (the country calling code part)\n      // being selected when the user tabs into such field.\n      // If the user then starts inputting the national part digits,\n      // then `<input/>` value changes from `+xxx` to `y`\n      // because inputting anything while having the `<input/>` value\n      // selected results in erasing the `<input/>` value.\n      // So, the component handles such case by restoring\n      // the intended `<input/>` value: `+xxxy`.\n      // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\n\n\n      if (phoneDigits && phoneDigits[0] !== '+') {\n        phoneDigits = prefix + phoneDigits;\n        _value = e164(phoneDigits, country, metadata);\n      } else {\n        phoneDigits = prefix;\n      }\n\n      return {\n        phoneDigits: phoneDigits,\n        value: _value,\n        country: country\n      };\n    }\n  } // If `international` property is `false`, then it means\n  // \"enforce national-only format during input\",\n  // so, if that's the case, then remove all `+` characters,\n  // but only if some country is currently selected.\n  // (not if \"International\" country is selected).\n\n\n  if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n    phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata);\n  } // Trim the input to not exceed the maximum possible number length.\n\n\n  if (phoneDigits && country && limitMaxLength) {\n    phoneDigits = trimNumber(phoneDigits, country, metadata);\n  } // If this `onChange()` event was triggered\n  // as a result of selecting \"International\" country,\n  // then force-prepend a `+` sign if the phone number\n  // `<input/>` value isn't in international format.\n  // Also, force-prepend a `+` sign if international\n  // phone number input format is set.\n\n\n  if (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\n    phoneDigits = '+' + phoneDigits;\n  } // If the previously entered phone number\n  // has been entered in international format\n  // and the user decides to erase it,\n  // then also reset the `country`\n  // because it was most likely automatically selected\n  // while the user was typing in the phone number\n  // in international format.\n  // This fixes the issue when a user is presented\n  // with a phone number input with no country selected\n  // and then types in their local phone number\n  // then discovers that the input's messed up\n  // (a `+` has been prepended at the start of their input\n  //  and a random country has been selected),\n  // decides to undo it all by erasing everything\n  // and then types in their local phone number again\n  // resulting in a seemingly correct phone number\n  // but in reality that phone number has incorrect country.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/273\n\n\n  if (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\n    if (international) {\n      country = undefined;\n    } else {\n      country = defaultCountry;\n    }\n  } // Also resets such \"randomly\" selected country\n  // as soon as the user erases the number\n  // digit-by-digit up to the leading `+` sign.\n\n\n  if (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\n    country = undefined;\n  } // Generate the new `value` property.\n\n\n  var value;\n\n  if (phoneDigits) {\n    if (phoneDigits[0] === '+') {\n      if (phoneDigits === '+') {\n        value = undefined;\n      } else if (country && getInternationalPhoneNumberPrefix(country, metadata).indexOf(phoneDigits) === 0) {\n        // Selected a `country` but started inputting an\n        // international phone number for another country.\n        // Even though the input value is non-empty,\n        // the `value` is assumed `undefined` in such case.\n        // The `country` will be reset (or re-selected)\n        // immediately after such mismatch has been detected\n        // by the phone number input component, and `value`\n        // will be set to the currently entered international prefix.\n        //\n        // For example, if selected `country` `\"US\"`\n        // and started inputting phone number `\"+2\"`\n        // then `value` `undefined` will be returned from this function,\n        // and then, immediately after that, `country` will be reset\n        // and the `value` will be set to `\"+2\"`.\n        //\n        value = undefined;\n      } else {\n        value = e164(phoneDigits, country, metadata);\n      }\n    } else {\n      value = e164(phoneDigits, country, metadata);\n    }\n  } // Derive the country from the phone number.\n  // (regardless of whether there's any country currently selected,\n  //  because there could be several countries corresponding to one country calling code)\n\n\n  if (value) {\n    country = getCountryForPartialE164Number(value, {\n      country: country,\n      countries: countries,\n      metadata: metadata\n    }); // If `international` property is `false`, then it means\n    // \"enforce national-only format during input\",\n    // so, if that's the case, then remove all `+` characters,\n    // but only if some country is currently selected.\n    // (not if \"International\" country is selected).\n\n    if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n      phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata); // Re-calculate `value` because `phoneDigits` has changed.\n\n      value = e164(phoneDigits, country, metadata);\n    }\n  }\n\n  if (!country && countryRequired) {\n    country = defaultCountry || getAnyCountry();\n  }\n\n  return {\n    phoneDigits: phoneDigits,\n    country: country,\n    value: value\n  };\n}\n\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\n  // Handle the case when a user might have pasted\n  // a phone number in international format.\n  if (input.indexOf(getInternationalPhoneNumberPrefix(country, metadata)) === 0) {\n    // Create \"as you type\" formatter.\n    var formatter = new AsYouType(country, metadata); // Input partial national phone number.\n\n    formatter.input(input); // Return the parsed partial national phone number.\n\n    var phoneNumber = formatter.getNumber();\n\n    if (phoneNumber) {\n      // Transform the number to a national one,\n      // and remove all non-digits.\n      return phoneNumber.formatNational().replace(/\\D/g, '');\n    } else {\n      return '';\n    }\n  } else {\n    // Just remove the `+` sign.\n    return input.replace(/\\D/g, '');\n  }\n}\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nexport function getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\n  var formatter = new AsYouType(null, metadata);\n  formatter.input(number); // // `001` is a special \"non-geograpical entity\" code\n  // // in Google's `libphonenumber` library.\n  // if (formatter.getCountry() === '001') {\n  // \treturn\n  // }\n\n  return formatter.getCountry();\n}\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\n\nexport function compareStrings(a, b, locales) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b, locales);\n  }\n  /* istanbul ignore next */\n\n\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\n\nexport function stripCountryCallingCode(number, country, metadata) {\n  // Just an optimization, so that it\n  // doesn't have to iterate through all country calling codes.\n  if (country) {\n    var countryCallingCodePrefix = '+' + getCountryCallingCode(country, metadata); // If `country` fits the actual `number`.\n\n    if (number.length < countryCallingCodePrefix.length) {\n      if (countryCallingCodePrefix.indexOf(number) === 0) {\n        return '';\n      }\n    } else {\n      if (number.indexOf(countryCallingCodePrefix) === 0) {\n        return number.slice(countryCallingCodePrefix.length);\n      }\n    }\n  } // If `country` doesn't fit the actual `number`.\n  // Try all available country calling codes.\n\n\n  for (var _i = 0, _Object$keys = Object.keys(metadata.country_calling_codes); _i < _Object$keys.length; _i++) {\n    var country_calling_code = _Object$keys[_i];\n\n    if (number.indexOf(country_calling_code) === '+'.length) {\n      return number.slice('+'.length + country_calling_code.length);\n    }\n  }\n\n  return '';\n}\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\n\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\n  // Create \"as you type\" formatter.\n  var formatter = new AsYouType(country, metadata); // Input partial national phone number.\n\n  formatter.input(number); // Return the parsed partial national phone number.\n\n  var phoneNumber = formatter.getNumber();\n  return phoneNumber && phoneNumber.nationalNumber;\n}\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\n\nexport function couldNumberBelongToCountry(number, country, metadata) {\n  var intlPhoneNumberPrefix = getInternationalPhoneNumberPrefix(country, metadata);\n  var i = 0;\n\n  while (i < number.length && i < intlPhoneNumberPrefix.length) {\n    if (number[i] !== intlPhoneNumberPrefix[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\n\nexport function getInitialPhoneDigits(_ref6) {\n  var value = _ref6.value,\n      phoneNumber = _ref6.phoneNumber,\n      defaultCountry = _ref6.defaultCountry,\n      international = _ref6.international,\n      useNationalFormat = _ref6.useNationalFormat,\n      metadata = _ref6.metadata; // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `useNationalFormat` is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n\n  if ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\n    return generateNationalNumberDigits(phoneNumber);\n  } // If `international` property is `true`,\n  // meaning \"enforce international phone number format\",\n  // then always show country calling code in the input field.\n\n\n  if (!value && international && defaultCountry) {\n    return getInternationalPhoneNumberPrefix(defaultCountry, metadata);\n  }\n\n  return value;\n}","function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { getInitialPhoneDigits, getCountryForPartialE164Number, parsePhoneNumber } from './phoneInputHelpers.js';\nimport { isCountrySupportedWithError, getSupportedCountries } from './countries.js';\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\n  var metadata = props.metadata,\n      countries = props.countries,\n      newDefaultCountry = props.defaultCountry,\n      newValue = props.value,\n      newReset = props.reset,\n      international = props.international,\n      displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber,\n      initialValueFormat = props.initialValueFormat;\n  var prevDefaultCountry = prevProps.defaultCountry,\n      prevValue = prevProps.value,\n      prevReset = prevProps.reset;\n  var country = state.country,\n      value = state.value,\n      hasUserSelectedACountry = state.hasUserSelectedACountry;\n\n  var _getInitialPhoneDigits = function _getInitialPhoneDigits(parameters) {\n    return getInitialPhoneDigits(_objectSpread(_objectSpread({}, parameters), {}, {\n      international: international,\n      useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n      metadata: metadata\n    }));\n  }; // Some users requested a way to reset the component\n  // (both number `<input/>` and country `<select/>`).\n  // Whenever `reset` property changes both number `<input/>`\n  // and country `<select/>` are reset.\n  // It's not implemented as some instance `.reset()` method\n  // because `ref` is forwarded to `<input/>`.\n  // It's also not replaced with just resetting `country` on\n  // external `value` reset, because a user could select a country\n  // and then not input any `value`, and so the selected country\n  // would be \"stuck\", if not using this `reset` property.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n\n  if (newReset !== prevReset) {\n    return {\n      phoneDigits: _getInitialPhoneDigits({\n        value: undefined,\n        defaultCountry: newDefaultCountry\n      }),\n      value: undefined,\n      country: newDefaultCountry,\n      hasUserSelectedACountry: undefined\n    };\n  } // `value` is the value currently shown in the component:\n  // it's stored in the component's `state`, and it's not the `value` property.\n  // `prevValue` is \"previous `value` property\".\n  // `newValue` is \"new `value` property\".\n  // If the default country changed\n  // (e.g. in case of ajax GeoIP detection after page loaded)\n  // then select it, but only if the user hasn't already manually\n  // selected a country, and no phone number has been manually entered so far.\n  // Because if the user has already started inputting a phone number\n  // then they're okay with no country being selected at all (\"International\")\n  // and they don't want to be disturbed, don't want their input to be screwed, etc.\n\n\n  if (newDefaultCountry !== prevDefaultCountry) {\n    var isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata);\n\n    var noValueHasBeenEnteredByTheUser = // By default, \"no value has been entered\" means `value` is `undefined`.\n    !value || // When `international` is `true`, and some country has been pre-selected,\n    // then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\n    // so in case of `international` being `true`, \"the user hasn't entered anything\" situation\n    // doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\n    international && value === _getInitialPhoneDigits({\n      value: undefined,\n      defaultCountry: prevDefaultCountry\n    }); // Only update the `defaultCountry` property if no phone number\n    // has been entered by the user or pre-set by the application.\n\n\n    var noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser;\n\n    if (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\n      return {\n        country: newDefaultCountry,\n        // If `phoneDigits` is empty, then automatically select the new `country`\n        // and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\n        // The code assumes that \"no phone number has been entered by the user\",\n        // and no `value` property has been passed, so the `phoneNumber` parameter\n        // of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\n        phoneDigits: _getInitialPhoneDigits({\n          value: undefined,\n          defaultCountry: newDefaultCountry\n        }),\n        // `value` is `undefined` and it stays so.\n        value: undefined\n      };\n    }\n  } // If a new `value` is set externally.\n  // (e.g. as a result of an ajax API request\n  //  to get user's phone after page loaded)\n  // The first part — `newValue !== prevValue` —\n  // is basically `props.value !== prevProps.value`\n  // so it means \"if value property was changed externally\".\n  // The second part — `newValue !== value` —\n  // is for ignoring the `getDerivedStateFromProps()` call\n  // which happens in `this.onChange()` right after `this.setState()`.\n  // If this `getDerivedStateFromProps()` call isn't ignored\n  // then the country flag would reset on each input.\n\n\n  if (newValue !== prevValue && newValue !== value) {\n    var phoneNumber;\n    var parsedCountry;\n\n    if (newValue) {\n      phoneNumber = parsePhoneNumber(newValue, metadata);\n      var supportedCountries = getSupportedCountries(countries, metadata);\n\n      if (phoneNumber && phoneNumber.country) {\n        // Ignore `else` because all countries are supported in metadata.\n\n        /* istanbul ignore next */\n        if (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\n          parsedCountry = phoneNumber.country;\n        }\n      } else {\n        parsedCountry = getCountryForPartialE164Number(newValue, {\n          country: undefined,\n          countries: supportedCountries,\n          metadata: metadata\n        });\n      }\n    }\n\n    var hasUserSelectedACountryUpdate;\n\n    if (!newValue) {\n      // Reset `hasUserSelectedACountry` flag in `state`.\n      hasUserSelectedACountryUpdate = {\n        hasUserSelectedACountry: undefined\n      };\n    }\n\n    return _objectSpread(_objectSpread({}, hasUserSelectedACountryUpdate), {}, {\n      phoneDigits: _getInitialPhoneDigits({\n        phoneNumber: phoneNumber,\n        value: newValue,\n        defaultCountry: newDefaultCountry\n      }),\n      value: newValue,\n      country: newValue ? parsedCountry : newDefaultCountry\n    });\n  } // `defaultCountry` didn't change.\n  // `value` didn't change.\n  // `phoneDigits` didn't change, because `value` didn't change.\n  //\n  // So no need to update state.\n\n}","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nvar _excluded = [\"name\", \"disabled\", \"readOnly\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"containerComponent\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"initialValueFormat\", \"onCountryChange\", \"limitMaxLength\", \"countryCallingCodeEditable\", \"focusInputOnCountrySelection\", \"reset\", \"metadata\", \"international\", \"locales\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart.js';\nimport InputBasic from './InputBasic.js';\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js';\nimport Flag from './Flag.js';\nimport InternationalIcon from './InternationalIcon.js';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './helpers/countries.js';\nimport { createCountryIconComponent } from './CountryIcon.js';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes.js';\nimport { getPreSelectedCountry, getCountrySelectOptions as _getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, getPhoneDigitsForNewCountry, getInitialPhoneDigits, onPhoneDigitsChange, e164 } from './helpers/phoneInputHelpers.js';\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js';\n\nvar PhoneNumberInput_ = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n\n  var _super = _createSuper(PhoneNumberInput_);\n\n  function PhoneNumberInput_(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneNumberInput_);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"setInputRef\", function (instance) {\n      _this.inputRef.current = instance;\n      var ref = _this.props.inputRef;\n\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(instance);\n        } else {\n          ref.current = instance;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n          international = _this$props.international,\n          metadata = _this$props.metadata,\n          onChange = _this$props.onChange,\n          focusInputOnCountrySelection = _this$props.focusInputOnCountrySelection;\n      var _this$state = _this.state,\n          prevPhoneDigits = _this$state.phoneDigits,\n          prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n        prevCountry: prevCountry,\n        newCountry: newCountry,\n        metadata: metadata,\n        // Convert the phone number to \"national\" format\n        // when the user changes the selected country by hand.\n        useNationalFormat: !international\n      });\n      var newValue = e164(newPhoneDigits, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      if (focusInputOnCountrySelection) {\n        _this.inputRef.current.focus();\n      } // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        phoneDigits: newPhoneDigits,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_phoneDigits) {\n      var _this$props2 = _this.props,\n          defaultCountry = _this$props2.defaultCountry,\n          onChange = _this$props2.onChange,\n          addInternationalOption = _this$props2.addInternationalOption,\n          international = _this$props2.international,\n          limitMaxLength = _this$props2.limitMaxLength,\n          countryCallingCodeEditable = _this$props2.countryCallingCodeEditable,\n          metadata = _this$props2.metadata;\n      var _this$state2 = _this.state,\n          countries = _this$state2.countries,\n          prevPhoneDigits = _this$state2.phoneDigits,\n          currentlySelectedCountry = _this$state2.country;\n\n      var _onPhoneDigitsChange = onPhoneDigitsChange(_phoneDigits, {\n        prevPhoneDigits: prevPhoneDigits,\n        country: currentlySelectedCountry,\n        countryRequired: !addInternationalOption,\n        defaultCountry: defaultCountry,\n        getAnyCountry: function getAnyCountry() {\n          return _this.getFirstSupportedCountry({\n            countries: countries\n          });\n        },\n        countries: countries,\n        international: international,\n        limitMaxLength: limitMaxLength,\n        countryCallingCodeEditable: countryCallingCodeEditable,\n        metadata: metadata\n      }),\n          phoneDigits = _onPhoneDigitsChange.phoneDigits,\n          country = _onPhoneDigitsChange.country,\n          value = _onPhoneDigitsChange.value;\n\n      var stateUpdate = {\n        phoneDigits: phoneDigits,\n        value: value,\n        country: country\n      };\n\n      if (countryCallingCodeEditable === false) {\n        // If it simply did `setState({ phoneDigits: intlPrefix })` here,\n        // then it would have no effect when erasing an inital international prefix\n        // via Backspace, because `phoneDigits` in `state` wouldn't change\n        // as a result, because it was `prefix` and it became `prefix`,\n        // so the component wouldn't rerender, and the user would be able\n        // to erase the country calling code part, and that part is\n        // assumed to be non-eraseable. That's why the component is\n        // forcefully rerendered here.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n        if (!value && phoneDigits === _this.state.phoneDigits) {\n          // Force a re-render of the `<input/>` in order to reset its value.\n          stateUpdate.forceRerender = {};\n        }\n      }\n\n      _this.setState(stateUpdate, // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n\n      _this._onBlur();\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n\n    _this.inputRef = /*#__PURE__*/React.createRef();\n    var _this$props3 = _this.props,\n        _value = _this$props3.value,\n        labels = _this$props3.labels,\n        _international = _this$props3.international,\n        _addInternationalOption = _this$props3.addInternationalOption,\n        displayInitialValueAsLocalNumber = _this$props3.displayInitialValueAsLocalNumber,\n        initialValueFormat = _this$props3.initialValueFormat,\n        _metadata = _this$props3.metadata;\n    var _this$props4 = _this.props,\n        _defaultCountry = _this$props4.defaultCountry,\n        _countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n\n    _countries = getSupportedCountries(_countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    var preSelectedCountry = getPreSelectedCountry({\n      value: _value,\n      phoneNumber: phoneNumber,\n      defaultCountry: _defaultCountry,\n      required: !_addInternationalOption,\n      countries: _countries || getCountries(_metadata),\n      getAnyCountry: function getAnyCountry() {\n        return _this.getFirstSupportedCountry({\n          countries: _countries\n        });\n      },\n      metadata: _metadata\n    });\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: preSelectedCountry,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: _countries,\n      // `phoneDigits` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value` is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `phoneDigits` are `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n      phoneDigits: getInitialPhoneDigits({\n        value: _value,\n        phoneNumber: phoneNumber,\n        defaultCountry: _defaultCountry,\n        international: _international,\n        useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n        metadata: _metadata\n      }),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `phoneDigits` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `phoneDigits` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    }\n  }, {\n    key: \"getCountrySelectOptions\",\n    value: function getCountrySelectOptions(_ref) {\n      var countries = _ref.countries;\n      var _this$props5 = this.props,\n          international = _this$props5.international,\n          countryCallingCodeEditable = _this$props5.countryCallingCodeEditable,\n          countryOptionsOrder = _this$props5.countryOptionsOrder,\n          addInternationalOption = _this$props5.addInternationalOption,\n          labels = _this$props5.labels,\n          locales = _this$props5.locales,\n          metadata = _this$props5.metadata;\n      return this.useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(_getCountrySelectOptions({\n          countries: countries || getCountries(metadata),\n          countryNames: labels,\n          addInternationalOption: international && countryCallingCodeEditable === false ? false : addInternationalOption,\n          compareStringsLocales: locales // compareStrings\n\n        }), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n    }\n  }, {\n    key: \"useMemoCountrySelectOptions\",\n    value: function useMemoCountrySelectOptions(generator, dependencies) {\n      if (!this.countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)) {\n        this.countrySelectOptionsMemo = generator();\n        this.countrySelectOptionsMemoDependencies = dependencies;\n      }\n\n      return this.countrySelectOptionsMemo;\n    }\n  }, {\n    key: \"getFirstSupportedCountry\",\n    value: function getFirstSupportedCountry(_ref2) {\n      var countries = _ref2.countries;\n      var countryOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return countryOptions[0].value;\n    } // A shorthand for not passing `metadata` as a second argument.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          name = _this$props6.name,\n          disabled = _this$props6.disabled,\n          readOnly = _this$props6.readOnly,\n          autoComplete = _this$props6.autoComplete,\n          style = _this$props6.style,\n          className = _this$props6.className,\n          inputRef = _this$props6.inputRef,\n          inputComponent = _this$props6.inputComponent,\n          numberInputProps = _this$props6.numberInputProps,\n          smartCaret = _this$props6.smartCaret,\n          CountrySelectComponent = _this$props6.countrySelectComponent,\n          countrySelectProps = _this$props6.countrySelectProps,\n          ContainerComponent = _this$props6.containerComponent,\n          defaultCountry = _this$props6.defaultCountry,\n          countriesProperty = _this$props6.countries,\n          countryOptionsOrder = _this$props6.countryOptionsOrder,\n          labels = _this$props6.labels,\n          flags = _this$props6.flags,\n          flagComponent = _this$props6.flagComponent,\n          flagUrl = _this$props6.flagUrl,\n          addInternationalOption = _this$props6.addInternationalOption,\n          internationalIcon = _this$props6.internationalIcon,\n          displayInitialValueAsLocalNumber = _this$props6.displayInitialValueAsLocalNumber,\n          initialValueFormat = _this$props6.initialValueFormat,\n          onCountryChange = _this$props6.onCountryChange,\n          limitMaxLength = _this$props6.limitMaxLength,\n          countryCallingCodeEditable = _this$props6.countryCallingCodeEditable,\n          focusInputOnCountrySelection = _this$props6.focusInputOnCountrySelection,\n          reset = _this$props6.reset,\n          metadata = _this$props6.metadata,\n          international = _this$props6.international,\n          locales = _this$props6.locales,\n          rest = _objectWithoutProperties(_this$props6, _excluded);\n\n      var _this$state3 = this.state,\n          country = _this$state3.country,\n          countries = _this$state3.countries,\n          phoneDigits = _this$state3.phoneDigits,\n          isFocused = _this$state3.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return /*#__PURE__*/React.createElement(ContainerComponent, {\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused,\n          'PhoneInput--disabled': disabled,\n          'PhoneInput--readOnly': readOnly\n        })\n      }, /*#__PURE__*/React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        readOnly: readOnly || countrySelectProps && countrySelectProps.readOnly,\n        iconComponent: this.CountryIcon\n      })), /*#__PURE__*/React.createElement(InputComponent, _extends({\n        ref: this.setInputRef,\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: phoneDigits || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        readOnly: readOnly,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    function getDerivedStateFromProps(props, state) {\n      return _objectSpread({\n        // Emulate `prevProps` via `state.props`.\n        props: props\n      }, getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state));\n    }\n  }]);\n\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\n\nvar PhoneNumberInput = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(PhoneNumberInput_, _extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   *\r\n   * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * A function of `value: string?`.\r\n   *\r\n   * Updates the `value` property as the user inputs a phone number.\r\n   *\r\n   * If the user erases the input value, the argument is `undefined`.\r\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `disabled`.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `readonly`.\r\n   */\n  readOnly: PropTypes.bool,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com\r\n   * /web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: PropTypes.string.isRequired,\n\n  /**\r\n   * Set to `\"national\"` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if `initialValueFormat` is `\"national\"`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, `initialValueFormat` is `undefined`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `undefined` by default)\n  initialValueFormat: PropTypes.oneOf(['national']),\n  // `displayInitialValueAsLocalNumber` property has been\n  // superceded by `initialValueFormat` property.\n  displayInitialValueAsLocalNumber: PropTypes.bool,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: PropTypes.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: labelsPropType.isRequired,\n\n  /**\r\n   * Country `<select/>` options are sorted by their labels.\r\n   * The default sorting function uses `a.localeCompare(b, locales)`,\r\n   * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n   * Some languages, like Chinese, support multiple sorting variants\r\n   * (called \"collations\"), and the user might prefer one or another.\r\n   * Also, sometimes the Operating System language is not always\r\n   * the preferred language for a person using a website or an application,\r\n   * so there should be a way to specify custom locale.\r\n   * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n   * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n   */\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /*\r\n   * Custom country `<select/>` options sorting function.\r\n   * The default one uses `a.localeCompare(b)`, and,\r\n   * if that's not available, falls back to simple `a > b`/`a < b`.\r\n   * There have been requests to add custom sorter for cases\r\n   * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n   * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n  compareStrings: PropTypes.func,\r\n   */\n\n  /**\r\n   * A URL template of a country flag, where\r\n   * \"{XX}\" is a two-letter country code in upper case,\r\n   * or where \"{xx}\" is a two-letter country code in lower case.\r\n   * By default it points to `country-flag-icons` gitlab pages website.\r\n   * I imagine someone might want to download those country flag icons\r\n   * and host them on their own servers instead\r\n   * (all flags are available in the `country-flag-icons` library).\r\n   * There's a catch though: new countries may be added in future,\r\n   * so when hosting country flag icons on your own server\r\n   * one should check the `CHANGELOG.md` every time before updating this library,\r\n   * otherwise there's a possibility that some new country flag would be missing.\r\n   */\n  flagUrl: PropTypes.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags will be used instead of the default ones.\r\n   * The the \"Flags\" section of the readme for more info.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n   *\r\n   * Example:\r\n   *\r\n   * `import flags from 'country-flag-icons/react/3x2'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: PropTypes.objectOf(PropTypes.elementType),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * `country: string` — The country code.\r\n   * * `countryName: string` — The country name.\r\n   * * `flagUrl: string` — The `flagUrl` property (see above).\r\n   * * `flags: object` — The `flags` property (see above).\r\n   */\n  flagComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n   */\n  addInternationalOption: PropTypes.bool.isRequired,\n\n  /**\r\n   * \"International\" icon component.\r\n   * Should have the same aspect ratio.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `title: string` — \"International\" country option label.\r\n   */\n  internationalIcon: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"XX\"` — inserts an option for \"XX\" country.\r\n   * * `\"🌐\"` — inserts \"International\" option.\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: PropTypes.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name: string?` — HTML `name` attribute.\r\n   * * `value: string?` — The currently selected country code.\r\n   * * `onChange(value: string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n   * * `disabled: boolean?` — HTML `disabled` attribute.\r\n   * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className: string` — CSS class name.\r\n   */\n  countrySelectComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Country `<select/>` component props.\r\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n   */\n  countrySelectProps: PropTypes.object,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  inputComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `style: object` — A component CSS style object.\r\n   * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n   */\n  containerComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: PropTypes.object,\n\n  /**\r\n   * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n   * the caret position is moved right before the next available digit skipping\r\n   * any punctuation in between. This is called \"smart\" caret positioning.\r\n   * Another case would be the phone number format changing as a result of\r\n   * the user inserting the digit somewhere in the middle, which would require\r\n   * re-positioning the caret because all digit positions have changed.\r\n   * This \"smart\" caret positioning feature can be turned off by passing\r\n   * `smartCaret={false}` property: use it in case of any possible issues\r\n   * with caret position during phone number input.\r\n   */\n  // Is `true` by default.\n  smartCaret: PropTypes.bool.isRequired,\n\n  /**\r\n   * Set to `true` to force \"international\" phone number format.\r\n   * Set to `false` to force \"national\" phone number format.\r\n   * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n   */\n  international: PropTypes.bool,\n\n  /**\r\n   * If set to `true`, the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: PropTypes.bool.isRequired,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: PropTypes.bool.isRequired,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: metadataPropType.isRequired,\n\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: PropTypes.func,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: PropTypes.bool.isRequired\n};\nPhoneNumberInput.defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Country `<select/>` component.\r\n   */\n  countrySelectComponent: CountrySelect,\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag,\n\n  /**\r\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   */\n  containerComponent: 'div',\n\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n\n  /**\r\n   *\r\n   */\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: true,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: true\n};\nexport default PhoneNumberInput;\n\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var i = 0;\n\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport labels from '../locale/en.json.js';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes.js';\nimport PhoneInput from './PhoneInputWithCountry.js';\nexport function createPhoneInput(defaultMetadata) {\n  var PhoneInputDefault = /*#__PURE__*/React.forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(PhoneInput, _extends({\n      ref: ref\n    }, props));\n  });\n  PhoneInputDefault.propTypes = {\n    metadata: metadataPropType.isRequired,\n    labels: labelsPropType.isRequired\n  };\n  PhoneInputDefault.defaultProps = {\n    metadata: defaultMetadata,\n    labels: labels\n  };\n  return PhoneInputDefault;\n}\nexport default createPhoneInput();","import metadata from 'libphonenumber-js/min/metadata';\nimport { parsePhoneNumber as _parsePhoneNumber, formatPhoneNumber as _formatPhoneNumber, formatPhoneNumberIntl as _formatPhoneNumberIntl, isValidPhoneNumber as _isValidPhoneNumber, isPossiblePhoneNumber as _isPossiblePhoneNumber, getCountries as _getCountries, getCountryCallingCode as _getCountryCallingCode, isSupportedCountry as _isSupportedCountry } from '../core/index.js';\nimport { createPhoneInput } from '../modules/PhoneInputWithCountryDefault.js';\n\nfunction call(func, _arguments) {\n  var args = Array.prototype.slice.call(_arguments);\n  args.push(metadata);\n  return func.apply(this, args);\n}\n\nexport default createPhoneInput(metadata);\nexport function parsePhoneNumber() {\n  return call(_parsePhoneNumber, arguments);\n}\nexport function formatPhoneNumber() {\n  return call(_formatPhoneNumber, arguments);\n}\nexport function formatPhoneNumberIntl() {\n  return call(_formatPhoneNumberIntl, arguments);\n}\nexport function isValidPhoneNumber() {\n  return call(_isValidPhoneNumber, arguments);\n}\nexport function isPossiblePhoneNumber() {\n  return call(_isPossiblePhoneNumber, arguments);\n}\nexport function getCountries() {\n  return call(_getCountries, arguments);\n}\nexport function getCountryCallingCode() {\n  return call(_getCountryCallingCode, arguments);\n}\nexport function isSupportedCountry() {\n  return call(_isSupportedCountry, arguments);\n}"],"sourceRoot":""}